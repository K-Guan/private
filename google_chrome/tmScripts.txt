{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Stack Exchange CV Request Generator","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/\\w*.?(stackexchange.com|stackoverflow.com|serverfault.com|superuser.com|askubuntu.com|stackapps.com|mathoverflow.net)\\/q(uestions)?\\/\\d+/","/^https?:\\/\\/\\w*.?stackoverflow.com/tools/new-answers-old-questions.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":["stackoverflow.com","rawgit.com","raw.githubusercontent.com"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831270},"enabled":true,"position":1,"file_url":"https://rawgit.com/SO-Close-Vote-Reviewers/UserScripts/master/SECloseVoteRequestGenerator.user.js","uuid":"92eb7581-a2c9-462d-af44-7eb8c903f8cb","source":""},{"name":"stackoverflow-comment-reply","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://stackoverflow.com/*","*://serverfault.com/*","*://superuser.com/*","*://meta.stackoverflow.com/*","*://meta.serverfault.com/*","*://meta.superuser.com/*","*://stackapps.com/*","*://*.stackexchange.com/*","*://askubuntu.com/*","*://meta.askubuntu.com/*","*://answers.onstartups.com/*","*://meta.answers.onstartups.com/*","*://mathoverflow.net/*","*://area51.stackexchange.com/proposals/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1456451831289},"enabled":true,"position":2,"file_url":"https://bitbucket.org/balpha/user-scripts/raw/tip/comment-reply-links/comment-reply-links.user.js","uuid":"b30320e8-9e48-4191-9a0a-15f6c81e1d21","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIHN0YWNrb3ZlcmZsb3ctY29tbWVudC1yZXBseQovLyBAbmFtZXNwYWNlICAgICAgc3RhY2tvdmVyZmxvdwovLyBAZGVzY3JpcHRpb24gICAgQWRkICJyZXBseSIgbGlua3MgdG8gY29tbWVudHMKLy8gQHZlcnNpb24gICAgICAgIDEuMgovLyBAbWF0Y2ggICAgICAgICAgKjovL3N0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9zZXJ2ZXJmYXVsdC5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL3N1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuc3RhY2tvdmVyZmxvdy5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuc2VydmVyZmF1bHQuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9tZXRhLnN1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL3N0YWNrYXBwcy5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL2Fza3VidW50dS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuYXNrdWJ1bnR1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAqOi8vYW5zd2Vycy5vbnN0YXJ0dXBzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAqOi8vbWV0YS5hbnN3ZXJzLm9uc3RhcnR1cHMuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9tYXRob3ZlcmZsb3cubmV0LyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9hcmVhNTEuc3RhY2tleGNoYW5nZS5jb20vcHJvcG9zYWxzLyoKLy8gQGF1dGhvciAgICAgICAgIEJlbmphbWluIER1bWtlLXZvbiBkZXIgRWhlCi8vID09L1VzZXJTY3JpcHQ9PQoKLy8gVGhhbmtzIHRvIFNob2c5IGZvciB0aGlzIGlkZWEgZm9yIG1ha2luZyB0aGUgc2NyaXB0IHdvcmsgaW4gYm90aAovLyBDaHJvbWUgYW5kIEZpcmVmb3g6Ci8vIGh0dHA6Ly9tZXRhLnN0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80NjU2MgpmdW5jdGlvbiB3aXRoX2pxdWVyeShmKSB7CiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogICAgc2NyaXB0LnRleHRDb250ZW50ID0gIigiICsgZi50b1N0cmluZygpICsgIikoalF1ZXJ5KSI7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7Cn0KCndpdGhfanF1ZXJ5KGZ1bmN0aW9uKCQpIHsKCiAgICAkKGRvY3VtZW50KS5hamF4Q29tcGxldGUoZnVuY3Rpb24oKXsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiLmNvbW1lbnRzIikuZWFjaChwdXRfcmVwbHlfbGlua3MpOwogICAgICAgIH0sIDEwMCk7CiAgICB9KTsKIC8qICAgICAgRXhhbXBsZSBvZiAiYWRkIGEgY29tbWVudCIgZGl2IGFzIDMwLzAxLzIwMTYKICAgICAgPGRpdiBpZD0iY29tbWVudHMtbGluay0yNTQ1Ij4KICAgICAgICAgICAgPGEgdGl0bGU9IlVzZSBjb21tZW50cyB0byBhc2sgZm9yIG1vcmUgaW5mb3JtYXRpb24gb3Igc3VnZ2VzdCBpbXByb3ZlbWVudHMuIEF2b2lkIGNvbW1lbnRzIGxpa2Ug4oCcKzHigJ0gb3Ig4oCcdGhhbmtz4oCdLiIgY2xhc3M9ImpzLWFkZC1saW5rIGNvbW1lbnRzLWxpbmsgIiBocmVmPSIjIj5hZGQgYSBjb21tZW50PC9hPjxzcGFuIGNsYXNzPSJqcy1saW5rLXNlcGFyYXRvciBkbm8iPiZuYnNwO3wmbmJzcDs8L3NwYW4+CiAgICAgICAgICAgIDxhIHRpdGxlPSJleHBhbmQgdG8gc2hvdyBhbGwgY29tbWVudHMgb24gdGhpcyBwb3N0IiBjbGFzcz0ianMtc2hvdy1saW5rIGNvbW1lbnRzLWxpbmsgZG5vIiBvbmNsaWNrPSIiIGhyZWY9IiMiPjwvYT4KICAgICAgICA8L2Rpdj4KKi8KICAgIC8vIGV2ZW50IGhhbmRsZXIgZm9yIGEgY2xpY2sgb24gdGhlIHJlcGx5IGxpbmtzCiAgICBmdW5jdGlvbiByZXBseSgpIHsKICAgICAgICB2YXIgZGl2QWRkQ29tbWVudCA9ICQodGhpcykuY2xvc2VzdCgiLmNvbW1lbnRzIikubmV4dCgpOwogICAgICAgIHZhciBhZGRBQ29tbWVudCA9IGRpdkFkZENvbW1lbnQuY2hpbGRyZW4oIkEiKS5jbGljaygpOy8vICgiLmpzLWFkZC1saW5rIC5jb21tZW50cy1saW5rIikuY2xpY2soKTsKICAgICAgICB2YXIgY29tbWVudGxpbmtJZCA9IGRpdkFkZENvbW1lbnQuYXR0cigiaWQiKTsKICAgICAgICB2YXIgdXNlcm5hbWUgPSBnb29kaWZ5KCQodGhpcykucHJldigpLnRleHQoKS5yZXBsYWNlKC/DouKEosKmLywgIiIpKTsKICAgICAgICB2YXIgZm9ybWlkID0gY29tbWVudGxpbmtJZC5yZXBsYWNlKC9eLiotKFxkKykkLywgImFkZC1jb21tZW50LSQxIik7CiAgICAgICAgdmFyIHRhID0gJCgiIyIgKyBmb3JtaWQgKyAiIHRleHRhcmVhIilbMF07CiAgICAgICAgdmFyIHN0YXJ0ID0gdGEuc2VsZWN0aW9uU3RhcnQ7CiAgICAgICAgdmFyIGVuZCA9IHRhLnNlbGVjdGlvbkVuZDsKICAgICAgICB2YXIgc2hpZnQgPSB1c2VybmFtZS5sZW5ndGggKyAzOwogICAgICAgIHRhLnZhbHVlID0gIkAiICsgdXNlcm5hbWUgKyAiOiAiICsgdGEudmFsdWU7CiAgICAgICAgdGEuZm9jdXMoKTsKICAgICAgICB0YS5zZWxlY3Rpb25TdGFydCA9IHN0YXJ0ICsgc2hpZnQ7CiAgICAgICAgdGEuc2VsZWN0aW9uRW5kID0gZW5kICsgc2hpZnQ7CiAgICB9CgogICAgZnVuY3Rpb24gcHV0X3JlcGx5X2xpbmtzKCkgewogICAgICAgICQodGhpcykuZmluZCgiLmNvbW1lbnQ6bm90KDpoYXMoLnJlcGx5LWxpbmspKSAuY29tbWVudC11c2VyIikuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICQoIjxzcGFuIGNsYXNzPSdyZXBseS1saW5rJyBzdHlsZT0nY3Vyc29yOnBvaW50ZXI7JyB0aXRsZT0ncmVwbHknPiAmY3JhcnI7PC9zcGFuPiIpLmNsaWNrKHJlcGx5KS5pbnNlcnRBZnRlcih0aGlzKTsKICAgICAgICB9KTsKICAgIH0KCiAgICAkKCIuY29tbWVudHMiKS5lYWNoKHB1dF9yZXBseV9saW5rcyk7CgogICAgZnVuY3Rpb24gZ29vZGlmeShzKSB7CiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvICsvZywgIiIpOwogICAgfQp9KTs="},{"name":"Stack Exchange like I like it (without tab feature)","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["/^https?:\\/\\/(chat|blog|careers)\\..*/"],"orig_includes":[],"orig_matches":["*://stackexchange.com/*","*://*.stackexchange.com/*/*","*://stackoverflow.com/*/*","*://*.stackoverflow.com/*/*","*://stackapps.com/*/*","*://serverfault.com/*/*","*://superuser.com/*/*","*://askubuntu.com/*/*","*://mathoverflow.net/*/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831303},"enabled":true,"position":3,"file_url":"https://github.com/calraith/gm_scripts/raw/master/se_like_I_like_it.user.js","uuid":"a490bb56-67fc-4b13-ba27-3ac98ef75e75","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFN0YWNrIEV4Y2hhbmdlIGxpa2UgSSBsaWtlIGl0ICh3aXRob3V0IHRhYiBmZWF0dXJlKQovLyBAbmFtZXNwYWNlICAgaHR0cDovL3N0YWNrYXBwcy5vcmcvCi8vIEBkZXNjcmlwdGlvbiBEb3VibGUtY2xpY2sgYSBjb2RlIGJsb2NrIHRvIHNlbGVjdCBhbGwgKyBlZGl0IGJveCBhdXRvIGluZGVudCAvIHRhYiBrZXkgYmVoYXZpb3IgZW5oYW5jZW1lbnRzCi8vIEBtYXRjaAkJKjovL3N0YWNrZXhjaGFuZ2UuY29tLyoKLy8gQG1hdGNoCQkqOi8vKi5zdGFja2V4Y2hhbmdlLmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vc3RhY2tvdmVyZmxvdy5jb20vKi8qCi8vIEBtYXRjaAkJKjovLyouc3RhY2tvdmVyZmxvdy5jb20vKi8qCi8vIEBtYXRjaAkJKjovL3N0YWNrYXBwcy5jb20vKi8qCi8vIEBtYXRjaAkJKjovL3NlcnZlcmZhdWx0LmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vc3VwZXJ1c2VyLmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vYXNrdWJ1bnR1LmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vbWF0aG92ZXJmbG93Lm5ldC8qLyoKLy8gQGV4Y2x1ZGUgICAgIC9eaHR0cHM/OlwvXC8oY2hhdHxibG9nfGNhcmVlcnMpXC4uKi8KLy8gQHZlcnNpb24gICAgIDEuNgovLyBAZG93bmxvYWRVUkwJaHR0cHM6Ly9naXRodWIuY29tL2NhbHJhaXRoL2dtX3NjcmlwdHMvcmF3L21hc3Rlci9zZV9saWtlX0lfbGlrZV9pdC51c2VyLmpzCi8vIEBncmFudCAgICAgICBHTV9pbmZvCi8vID09L1VzZXJTY3JpcHQ9PQoKCmZ1bmN0aW9uIHNlbGVjdEFsbCgpIHsKCXZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7CgkvLyBzZWxlY3QgcGFyZW50IGlmIHBhcmVudCA9PT0gPHByZT47IGVsc2Ugc2VsZWN0IHNlbGYKCXJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyh0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdwcmUnID8gdGhpcy5jaGlsZE5vZGVzWzBdIDogdGhpcyk7Cgl2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpOwoJc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpOwoJc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTsKfQoKZnVuY3Rpb24gYWRkRGJsQ2xpY2soKSB7Cgl2YXIgY29kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdjb2RlJyk7Cglmb3IgKHZhciBpPTA7IGk8Y29kZS5sZW5ndGg7IGkrKykgewoJCS8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgkJSWYgcGFyZW50IG5vZGUgaXMgPHByZT4sIGFkZCBsaXN0ZW5lciB0byBwYXJlbnQuICBUaGlzIGFsbG93cyBkb3VibGUtCgkJY2xpY2tpbmcgYW55d2hlcmUgd2l0aGluIGEgY29kZSBibG9jayB0byBzZWxlY3QgYWxsLCBhcyB3ZWxsIGFzIGRvdWJsZS0KCQljbGlja2luZyBpbmxpbmUgY29kZSBzbmlwcGV0cyB0aGUgcG9zdGVyIGVuY2xvc2VkIGluIGJhY2t0aWNrcy4KCQk9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLwoJCXZhciBub2RlID0gKGNvZGVbaV0ucGFyZW50Tm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAncHJlJyA/IGNvZGVbaV0ucGFyZW50Tm9kZSA6IGNvZGVbaV0pOwoJCW5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCBzZWxlY3RBbGwsIHRydWUpOwoJCW5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCBzZWxlY3RBbGwsIHRydWUpOwoJCW5vZGUudGl0bGUgPSAnZG91YmxlLWNsaWNrIHRvIHNlbGVjdCBhbGwnOwoJfQp9CmFkZERibENsaWNrKCk7CgovLyBsaXN0ZW4gZm9yIHN0dWZmIGxpa2UgInNob3cgMSBtb3JlIGNvbW1lbnQiCnZhciBjcmVlcCA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGFkZERibENsaWNrKTsKY3JlZXAub2JzZXJ2ZShkb2N1bWVudCwge3N1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZX0pOwoKLyogZW5kIGRvdWJsZS1jbGljayBtb2RzICovCgovLyBJZiBvbiBodHRwOi8vc3RhY2tleGNoYW5nZS5jb20vLCBjaGVjayBmb3Igc2l0ZXMgbm90IGluY2x1ZGVkIGluIG1ldGFkYXRhIEBtYXRjaCBkaXJlY3RpdmVzCmlmICgvaHR0cHM/OlwvXC9zdGFja2V4Y2hhbmdlXC5jb20vaS50ZXN0KGxvY2F0aW9uLmhyZWYpICYmIEdNX2luZm8pIHsKCXZhciBYSFIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCXdpdGggKFhIUikgewoJCW9wZW4oIkdFVCIsICJodHRwOi8vc3RhY2tleGNoYW5nZS5jb20vc2l0ZXM/dmlldz1saXN0IiwgdHJ1ZSk7CgkJb25lcnJvciA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH07CgkJb25sb2FkID0gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9OwoJCW9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewoJCQlpZiAoWEhSLnJlYWR5U3RhdGUgPT0gNCkgewoJCQkJdmFyIGRvbSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgpOwoJCQkJZG9tLmRvY3VtZW50RWxlbWVudC5pbm5lckhUTUwgPSBYSFIucmVzcG9uc2VUZXh0OwoJCQkJdmFyIGxpc3QgPSBkb20uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGlzdC12aWV3LWNvbnRhaW5lcicpWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJyk7CgkJCQl2YXIgbWF0Y2hlcyA9IEdNX2luZm8uc2NyaXB0Lm1hdGNoZXM7CgkJCQlmb3IgKHZhciBpPWZvdW5kPTA7IGk8bGlzdC5sZW5ndGg7IGkrKykgewoJCQkJCWlmICgvKHR3aXR0ZXJ8YmxvZykvaS50ZXN0KGxpc3RbaV0uaHJlZikpIGNvbnRpbnVlOwoJCQkJCWZvciAodmFyIGo9MDsgajxtYXRjaGVzLmxlbmd0aDsgaisrKSB7CgkJCQkJCXZhciByeHAgPSBuZXcgUmVnRXhwKCdeJyArIG1hdGNoZXNbal0ucmVwbGFjZSgvXC9cKiQvLCcnKS5yZXBsYWNlKC9bXC5cL1wqXS9nLCBmdW5jdGlvbihtKSB7CgkJCQkJCQlyZXR1cm4gKG0gPT0gJyonKSA/ICcuKicgOiAnXFwnICsgbTsKCQkJCQkJfSkgKyAnJCcsICdpJyk7CgkJCQkJCWlmIChyeHAudGVzdChsaXN0W2ldLmhyZWYpKSB7IGZvdW5kPTE7IGJyZWFrOyB9CgkJCQkJfQoJCQkJCWlmICghZm91bmQpIGNvbnNvbGUubG9nKCdOZXcgc3RhY2tleGNoYW5nZSBkb21haW46ICcgKyBsaXN0W2ldLmhyZWYpOwoJCQkJCWVsc2UgZm91bmQ9MDsKCQkJCX0KCQkJfQoJCX07CgkJc2VuZCgnJyk7Cgl9Cn0K"},{"name":"StackExchange obvious followed link color","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?\\:\\/\\/([a-z\\.]*\\.)?stackexchange\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?askubuntu\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?superuser\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?serverfault\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?stackoverflow\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?answers.onstartups\\.com\\/.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831318},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/3362-stackexchange-obvious-followed-link-color/code/StackExchange%20obvious%20followed%20link%20color.user.js","uuid":"6ea166e0-79ab-4e14-9f4e-fe17128833fc","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgU3RhY2tFeGNoYW5nZSBvYnZpb3VzIGZvbGxvd2VkIGxpbmsgY29sb3IKLy8gQG5hbWVzcGFjZSBodHRwOi8vb3N0ZXJtaWxsZXIub3JnLwovLyBAdmVyc2lvbiAxLjAwCi8vIEBkZXNjcmlwdGlvbiBDaGFuZ2UgdGhlIGNvbG9yIG9mIGZvbGxvd2VkIGxpbmtzIG9uIGFsbCBTdGFja0V4Y2hhbmdlIHNpdGVzIHNvIHRoZXkgdGhleSBhcmUgZWFzaWx5IGRpc3Rpbmd1aXNoYWJsZS4KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9zdGFja2V4Y2hhbmdlXC5jb21cLy4qLwovLyBAaW5jbHVkZSAvaHR0cHM/XDpcL1wvKFthLXpcLl0qXC4pP2Fza3VidW50dVwuY29tXC8uKi8KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9zdXBlcnVzZXJcLmNvbVwvLiovCi8vIEBpbmNsdWRlIC9odHRwcz9cOlwvXC8oW2EtelwuXSpcLik/c2VydmVyZmF1bHRcLmNvbVwvLiovCi8vIEBpbmNsdWRlIC9odHRwcz9cOlwvXC8oW2EtelwuXSpcLik/c3RhY2tvdmVyZmxvd1wuY29tXC8uKi8KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9hbnN3ZXJzLm9uc3RhcnR1cHNcLmNvbVwvLiovCi8vIEBncmFudCBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gYWRkQ3NzKGNzc1N0cmluZykgewogICAgdmFyIG5ld0NzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CiAgICBuZXdDc3MudHlwZSA9ICJ0ZXh0L2NzcyI7CiAgICBuZXdDc3MuaW5uZXJIVE1MID0gY3NzU3RyaW5nOwogICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChuZXdDc3MpOwogICAgY29uc29sZS5sb2coImFwcGVuZGVkIGNzcyIpOwp9CgphZGRDc3MgKAogICAgJy5xdWVzdGlvbi1oeXBlcmxpbms6dmlzaXRlZCwgLnJlc3VsdC1saW5rIGE6dmlzaXRlZCB7Y29sb3I6ICMwMDAwOEIgISBpbXBvcnRhbnQ7fScKKTsg"},{"name":"Unclosed Request Review Script","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://chat.stackoverflow.com/rooms/41570/*","*://chat.stackoverflow.com/search?q=tagged%2Fcv-pls&Room=41570&page=*&pagesize=50&sort=newest"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831340},"enabled":true,"position":5,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/UnclosedRequestReview.user.js","uuid":"ea33379b-d41e-4b0a-8231-2ab1c5a6b70f","source":""},{"name":"Stack Exchange: Add Timeline and Revisions links to posts","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/questions/*","*://*.mathoverflow.net/questions/*","*://*.serverfault.com/questions/*","*://*.stackapps.com/questions/*","*://*.stackexchange.com/questions/*","*://*.stackoverflow.com/questions/*","*://*.superuser.com/questions/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1456451831358},"enabled":true,"position":6,"file_url":"https://gist.github.com/BrockA/5761948/raw/Add_Timeline_Button_to_Stack_Exchange_questions.user.js","uuid":"88d06f2f-ef9a-464b-85ee-432a3c718aa2","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFN0YWNrIEV4Y2hhbmdlOiBBZGQgVGltZWxpbmUgYW5kIFJldmlzaW9ucyBsaW5rcyB0byBwb3N0cwovLyBAZGVzY3JpcHRpb24gQWRkcyBsaW5rcyB0byBwb3N0cyB0byBhbHdheXMgc2hvdyBoaXN0b3J5IGFuZCBsaW5rcyB0byBxdWVzdGlvbnMgdG8gc2hvdyB0aGUgVGltZWxpbmUiLgovLyBAbmFtZXNwYWNlICAgU3RhY2tFeGNoYW5nZQovLyBAbWF0Y2ggICAgICAgKjovLyouYXNrdWJ1bnR1LmNvbS9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyoubWF0aG92ZXJmbG93Lm5ldC9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyouc2VydmVyZmF1bHQuY29tL3F1ZXN0aW9ucy8qCi8vIEBtYXRjaCAgICAgICAqOi8vKi5zdGFja2FwcHMuY29tL3F1ZXN0aW9ucy8qCi8vIEBtYXRjaCAgICAgICAqOi8vKi5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyouc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLyoKLy8gQG1hdGNoICAgICAgICo6Ly8qLnN1cGVydXNlci5jb20vcXVlc3Rpb25zLyoKLy8gQHZlcnNpb24gICAgIDEuMwovLyBAaGlzdG9yeSAgICAgMS4zIFJlbW92ZWQgInF1ZXN0aW9uIG9ubHkiIGZlYXR1cmUKLy8gQGhpc3RvcnkgICAgIDEuMiBVcGRhdGVkIG1hdGNoIGxpc3QKLy8gQGhpc3RvcnkgICAgIDEuMSBBZGRlZCByZXZpc2lvbnMgbGluawovLyA9PS9Vc2VyU2NyaXB0PT0KCmZ1bmN0aW9uIGFkZFV0aWxpdHlMaW5rcyAoJCkgewoKICAgICQoIi5wb3N0LW1lbnUiKS5lYWNoICggZnVuY3Rpb24gKEopIHsKICAgICAgICB2YXIgalRoaXMgICA9ICQodGhpcyk7CiAgICAgICAgdmFyIGhyZWYgICAgPSBqVGhpcy5maW5kICgnYVtjbGFzcz0ic2hvcnQtbGluayJdJykuYXR0ciAoImhyZWYiKTsKICAgICAgICB2YXIgaWRNdGNoICA9IGhyZWYuc3BsaXQgKC9bcWFdXC8oXGQrKS8pOwogICAgICAgIGlmIChpZE10Y2gubGVuZ3RoID4gMikgewogICAgICAgICAgICB2YXIgaWQgID0gaWRNdGNoWzFdOwoKICAgICAgICAgICAgalRoaXMuYXBwZW5kICgKICAgICAgICAgICAgICAgICc8c3BhbiBjbGFzcz0ibHNlcCI+fDwvc3Bhbj48YSBocmVmPSIvcG9zdHMvJyArIGlkICsgJy9yZXZpc2lvbnMiPnJldmlzaW9uczwvYT4nCiAgICAgICAgICAgICk7CgogICAgICAgICAgICBqVGhpcy5hcHBlbmQgKAogICAgICAgICAgICAgICAgJzxzcGFuIGNsYXNzPSJsc2VwIj58PC9zcGFuPjxhIGhyZWY9Ii9wb3N0cy8nICsgaWQgKyAnL3RpbWVsaW5lIj50aW1lbGluZTwvYT4nCiAgICAgICAgICAgICk7CiAgICAgICAgfQogICAgfSApOwogICAgJCgiLnJldmNlbGwzLnZtPmRpdiIpLmVhY2ggKGZ1bmN0aW9uICgpIHsKICAgICAgICAvLy0tIExvb2tzIGxpa2UgYSB0aW1lYm9tYi4uLgogICAgICAgIGd1aWQgPSAkKHRoaXMpLmZpbmQgKCJhIikuYXR0ciAoImhyZWYiKS5tYXRjaCAoL1x3ezh9ICg/Oi1cd3s0fSApezN9LVx3ezEyfS8pWzBdOwogICAgICAgICQodGhpcykucHJlcGVuZCAoJzxhIGhyZWY9IiNyZXYnICsgZ3VpZCArICciPmxpbms8L2E+PHNwYW4gY2xhc3M9ImxzZXAiPnw8L3NwYW4+Jyk7CiAgICB9ICk7Cn0KCndpdGhQYWdlc19qUXVlcnkgKGFkZFV0aWxpdHlMaW5rcyk7CgpmdW5jdGlvbiB3aXRoUGFnZXNfalF1ZXJ5IChOQU1FRF9GdW5jdGlvblRvUnVuKSB7CiAgICAvLy0tLSBVc2UgbmFtZWQgZnVuY3Rpb25zIGZvciBjbGFyaXR5IGFuZCBkZWJ1Z2dpbmcuLi4KICAgIHZhciBmdW5jVGV4dCAgICAgICAgPSBOQU1FRF9GdW5jdGlvblRvUnVuLnRvU3RyaW5nICgpOwogICAgdmFyIGZ1bmNOYW1lICAgICAgICA9IGZ1bmNUZXh0LnJlcGxhY2UgKC9eZnVuY3Rpb25ccysoXHcrKVxzKlwoKC58XG58XHIpKyQvLCAiJDEiKTsKICAgIHZhciBzY3JpcHQgICAgICAgICAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50ICgic2NyaXB0Iik7CiAgICBzY3JpcHQudGV4dENvbnRlbnQgID0gZnVuY1RleHQgKyAiXG5cbiI7CiAgICBzY3JpcHQudGV4dENvbnRlbnQgKz0gJ2pRdWVyeShkb2N1bWVudCkucmVhZHkoIGZ1bmN0aW9uICgpIHsnICsgZnVuY05hbWUgKyAnKGpRdWVyeSk7fSApOyc7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkIChzY3JpcHQpOwp9"},{"name":"Chat Reply Helper for Stack Exchange sites","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/chat\\.stackexchange\\.com/.*$/","/^https?:\\/\\/chat\\.stackoverflow\\.com/.*$/","/^https?:\\/\\/chat\\.meta\\.stackexchange\\.com/.*$/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831374},"enabled":true,"position":7,"file_url":"https://raw.githubusercontent.com/oliversalzburg/se-chat-reply-highlight/master/dist/se-chat-replyhelper.user.js","uuid":"4d7672e8-fd1e-4a91-a55f-fbe9bc041877","source":""},{"name":"Helpful Flag Percentage","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.stackexchange.com/users/flag-summary/*","*://*.stackoverflow.com/users/flag-summary/*","*://*.stackapps.com/users/flag-summary/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831385},"enabled":true,"position":8,"uuid":"a0dec57b-c225-47bc-8e4a-4677037b017f","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBIZWxwZnVsIEZsYWcgUGVyY2VudGFnZQovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTQ1NDUzOC8KLy8gQGF1dGhvciAgICAgICBlbmtpCi8vIEBtYXRjaCAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vdXNlcnMvZmxhZy1zdW1tYXJ5LyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5zdGFja292ZXJmbG93LmNvbS91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnN0YWNrYXBwcy5jb20vdXNlcnMvZmxhZy1zdW1tYXJ5LyoKLy8gPT0vVXNlclNjcmlwdD09Ci8qanNsaW50IGJyb3dzZXI6IHRydWUsIHdoaXRlOiB0cnVlKi8KLypqc2xpbnQgdGhpcyAqLwovKmdsb2JhbCAkLCBqUXVlcnkqLwokKGZ1bmN0aW9uICgpIHsKJ3VzZSBzdHJpY3QnOwoKICAgIHZhciBoZWxwZnVsRmxhZ3MgPSAwOwogICAgJCgidGQgPiBhOmNvbnRhaW5zKCdoZWxwZnVsJykiKS5wYXJlbnQoKS5wcmV2KCkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgaGVscGZ1bEZsYWdzICs9IHBhcnNlSW50KCQodGhpcykudGV4dCgpLnJlcGxhY2UoIiwiLCIiKSk7CiAgICB9KTsKCiAgICB2YXIgZGVjbGluZWRGbGFncyA9IDA7CiAgICAkKCJ0ZCA+IGE6Y29udGFpbnMoJ2RlY2xpbmVkJykiKS5wYXJlbnQoKS5wcmV2KCkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgZGVjbGluZWRGbGFncyArPSBwYXJzZUludCgkKHRoaXMpLnRleHQoKS5yZXBsYWNlKCIsIiwiIikpOwogICAgfSk7CgogICAgaWYgKGhlbHBmdWxGbGFncyA+IDApIHsKCiAgICAgICAgdmFyIHBlcmNlbnRIZWxwZnVsID0gTnVtYmVyKE1hdGgucm91bmQoKGhlbHBmdWxGbGFncyAvIChoZWxwZnVsRmxhZ3MgKyBkZWNsaW5lZEZsYWdzKSkgKiAxMDAgKyAnZTInKSArICdlLTInKTsKCiAgICAgICAgaWYgKHBlcmNlbnRIZWxwZnVsID4gMTAwICkgewogICAgICAgICAgICBwZXJjZW50SGVscGZ1bCA9IDEwMDsKICAgICAgICB9CgogICAgICAgIHZhciBwZXJjZW50Q29sb3I7CiAgICAgICAgaWYgKHBlcmNlbnRIZWxwZnVsID49IDkwKSB7CiAgICAgICAgICAgIHBlcmNlbnRDb2xvciA9ICJsaW1lZ3JlZW4iOwogICAgICAgIH0gZWxzZSBpZiAocGVyY2VudEhlbHBmdWwgPj0gODApIHsKICAgICAgICAgICAgcGVyY2VudENvbG9yID0gImRhcmtvcmFuZ2UiOwogICAgICAgIH0gZWxzZSBpZiAocGVyY2VudEhlbHBmdWwgPCA4MCkgewogICAgICAgICAgICBwZXJjZW50Q29sb3IgPSAicmVkIjsKICAgICAgICB9IAoKICAgICAgICB2YXIgY3NzID0gIjxzdHlsZT5cCiAgICAgICAgICAgICAgICAgICAgI3Byb2dyZXNzIHtcCiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNjY2M7XAogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwcHg7XAogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjIwcHg7XAogICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDZweCAxMHB4IDEwcHggMDtcCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDtcCiAgICAgICAgICAgICAgICAgICB9XAogICAgICAgICAgICAgICAgICAgICNwcm9ncmVzczphZnRlciB7XAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnJztcCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1wKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIiArIHBlcmNlbnRDb2xvciArICI7XAogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIiArIHBlcmNlbnRIZWxwZnVsICsgIiU7XAogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XAogICAgICAgICAgICAgICAgICAgIH1cCiAgICAgICAgICAgICAgICAgICAgI3BlcmNlbnRIZWxwZnVsIHtcCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcCiAgICAgICAgICAgICAgICAgICAgfVwKICAgICAgICAgICAgICAgICAgICA8L3N0eWxlPiI7CgogICAgICAgICQoJ2hlYWQnKS5hcHBlbmQoY3NzKTsKCiAgICAgICAgJCgiI2ZsYWctc3RhdC1pbmZvLXRhYmxlIikuYmVmb3JlKCI8aDMgaWQ9J3BlcmNlbnRIZWxwZnVsJyB0aXRsZT0ncGVuZGluZywgYWdlZCBhd2F5IGFuZCBkaXNwdXRlZCBmbGFncyBhcmUgbm90IGNvdW50ZWQnPjxzcGFuIGlkPSdwZXJjZW50Jz4iICsgcGVyY2VudEhlbHBmdWwgKyAiJTwvc3Bhbj4gaGVscGZ1bDwvaDM+Iik7CiAgICAgICAgJCgic3BhbiNwZXJjZW50IikuY3NzKCJjb2xvciIsIHBlcmNlbnRDb2xvcik7CgogICAgICAgICQoIiNwZXJjZW50SGVscGZ1bCIpLmFmdGVyKCI8ZGl2IGlkPSdwcm9ncmVzcyc+PC9kaXY+Iik7CiAgICB9Cn0pOw=="},{"name":"Interesting Questions alternate highlighting","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.stackexchange.com/*","*://*.stackoverflow.com/*","*://*.superuser.com/*","*://*.serverfault.com/*","*://*.askubuntu.com/*","*://*.stackapps.com/*","*://*.mathoverflow.net/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831417},"enabled":true,"position":9,"file_url":"https://gist.github.com/shu8/415cd905568ad9667f46/raw/ffbc35151fbecce5436aa819bf282336c42b59fb/favoriteQuestions.user.js","uuid":"2a77d2d9-e7cf-4487-9acd-ecbcb7d8e4e3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBJbnRlcmVzdGluZyBRdWVzdGlvbnMgYWx0ZXJuYXRlIGhpZ2hsaWdodGluZwovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly9zdGFja2V4Y2hhbmdlLmNvbS91c2Vycy80MzM3ODEwLyVFMSVCOSVBNyVEMCVCRCVDQSU4QSVDMyU5RgovLyBAdmVyc2lvbiAgICAgIDAuMgovLyBAZGVzY3JpcHRpb24gIENoYW5nZXMgU3RhY2sgRXhjaGFuZ2Ugd2Vic2l0ZXMgJ2Zhdm9yaXRlIHRhZ3MnIGhpZ2hsaWdodGluZyB0byBqdXN0IHRoZSB0YWcuCi8vIEBhdXRob3IgICAgICAg4bmn0L3KisOfCi8vIEBtYXRjaAkJICo6Ly8qLnN0YWNrZXhjaGFuZ2UuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLnN0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLnN1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggCQkgKjovLyouc2VydmVyZmF1bHQuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLmFza3VidW50dS5jb20vKgovLyBAbWF0Y2gJCSAqOi8vKi5zdGFja2FwcHMuY29tLyoKLy8gQG1hdGNoCQkgKjovLyoubWF0aG92ZXJmbG93Lm5ldC8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KdmFyIHVzZXJzY3JpcHQgPSBmdW5jdGlvbigkKSB7CiAgICAkKHdpbmRvdykuYmluZCgibG9hZCIsIGZ1bmN0aW9uKCkgewogICAgICAgIAogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdzdXBlcnVzZXInKSA+IC0xKSB7IC8vc3VwZXJ1c2VyCiAgICAgICAgICAgIHZhciBiZXR0ZXJDU1MgPSB7CiAgICAgICAgICAgIAliYWNrZ3JvdW5kQ29sb3I6ICcjYTFlYWZmJywKICAgICAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snICAgICAgICAgICAgICAgIAogICAgICAgIAl9OwogICAgICAgIH0KICAgICAgICBlbHNlIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdzdGFja292ZXJmbG93JykgPiAtMSkgeyAvL3N0YWNrb3ZlcmZsb3cKICAgICAgICAJdmFyIGJldHRlckNTUyA9IHsKICAgICAgICAgICAgCWJhY2tncm91bmRDb2xvcjogJyNmZmVmYzYnLAogICAgICAgICAgICAJYm9yZGVyV2lkdGg6ICcwJyAgICAgICAgICAgICAgICAKICAgICAgICAJfTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignLnN0YWNrZXhjaGFuZ2UuY29tJykgPiAtMSkgewogICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignbWV0YScpID09PSAtMSkgeyAvL2JldGEgc2l0ZXMKICAgICAgICAgICAgICAgIHZhciBiZXR0ZXJDU1MgPSB7CiAgICAgICAgICAgIAliYWNrZ3JvdW5kQ29sb3I6ICcjYzNkYWZhJywKICAgICAgICAgICAgCWJvcmRlcldpZHRoOiAnMCcgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB9OyAKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHggPSAkKCIjaW50ZXJlc3RpbmdUYWdzIikudGV4dCgpOwogICAgICAgIHZhciBpbnRlcmVzdGluZyA9IHguc3BsaXQoJyAnKTsKICAgICAgICBpbnRlcmVzdGluZy5wb3AoKTsgLy9CZWNhdXNlIHRoZXJlJ3Mgb25lIGV4dHJhIHZhbHVlIGF0IHRoZSBlbmQKCiAgICAgICAgCgogICAgICAgICQoIi50YWdnZWQtaW50ZXJlc3RpbmcgPiAuc3VtbWFyeSA+IC50YWdzID4gLnBvc3QtdGFnIikuZmlsdGVyKGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgICAgIHJldHVybiBpbnRlcmVzdGluZy5pbmRleE9mKCQodGhpcykudGV4dCgpKSA+IC0xOwogICAgICAgIH0pLmNzcyhiZXR0ZXJDU1MpOwoKICAgICAgICAvLyAkKCIudGFnZ2VkLWludGVyZXN0aW5nIikucmVtb3ZlQ2xhc3MoInRhZ2dlZC1pbnRlcmVzdGluZyIpOwogICAgfSk7Cn07Cgp2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKZWwudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwplbC50ZXh0ID0gJygnICsgdXNlcnNjcmlwdCArICcpKGpRdWVyeSk7JzsKZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlbCk7"},{"name":"character limits restriction","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/*","*://*.serverfault.com/*","*://*.stackapps.com/*","*://*.stackexchange.com/*","*://*.stackoverflow.com/*","*://*.superuser.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831454},"enabled":true,"position":10,"uuid":"0945c427-cc2b-481c-9195-8dfb244f8b4c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICBjaGFyYWN0ZXIgbGltaXRzIHJlc3RyaWN0aW9uCi8vIEBuYW1lc3BhY2UgICAgICAgU3RhY2tFeGNoYW5nZQovLyBAZGVzY3JpcHRpb24gICAgIEJ5cGFzcyBjaGFyYWN0ZXIgbGltaXRzIHJlc3RyaWN0aW9uIGZvciBjb21tZW50cwovLyBAdmVyc2lvbiAgICAgICAgIDEuMAovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLmFza3VidW50dS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLnNlcnZlcmZhdWx0LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAgKjovLyouc3RhY2thcHBzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLnN0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICAqOi8vKi5zdXBlcnVzZXIuY29tLyoKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgc2NyaXB0ID0gZnVuY3Rpb24oJCkgewogICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJ3RleHRhcmVhW25hbWU9Y29tbWVudF0nICwgImZvY3VzIiwgZnVuY3Rpb24oKXsKICAgICAgICAgbSA9ICQodGhpcykudmFsKCkubGVuZ3RoCiAgICAgICAgIGZvcih2YXIgaT0wOyBpPCAoMTUgLSBtKTsgaSsrKXsKICAgICAgICAgJCh0aGlzKS52YWwoJCh0aGlzKS52YWwoKSArICJcdTIwMGIiKQogICAgICAgIH0KICAgIH0pCn07Cgp2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKZWwudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwplbC50ZXh0ID0gJygnICsgc2NyaXB0ICsgJykoalF1ZXJ5KTsnOwpkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGVsKTs="},{"name":"Magic™Editor","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/^https?:\\/\\/\\w*.?(stackoverflow|stackexchange|serverfault|superuser|askubuntu|stackapps)\\.com\\/(questions|posts|review|tools)\\/(?!tagged\\/|new\\/).*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1456451831467},"enabled":true,"position":11,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/Magic%E2%84%A2Editor.user.js","uuid":"c8fdd2ca-2370-4737-bb6b-437ca517e31b","source":""},{"name":"Current Completed Reviews in Queue","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["http://stackoverflow.com/review/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831477},"enabled":true,"position":12,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/CurrentQueueReviewsDone.user.js","uuid":"1ae23fcb-e8b9-43e0-bacc-14e8c3ed4798","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBDdXJyZW50IENvbXBsZXRlZCBSZXZpZXdzIGluIFF1ZXVlCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzU3ODQxMS9yZW5lCi8vIEB2ZXJzaW9uICAgICAgMC4yCi8vIEBkZXNjcmlwdGlvbiAgQWRkcyB0aGUgY3VycmVudCBudW1iZXIgb2YgcmV2aWV3cyB5b3UgaGF2ZSBjb21wbGV0ZWQgaW4gdGhlIHF1ZXVlIGluIGZyb250IG9mIHlvdXIgdG90YWwgcmV2aWV3cyBvbiB0aGUgcmV2aWV3IHRhYgovLyBAYXV0aG9yICAgICAgIFJlbmUsIFNPQ1ZSCi8vIEBtYXRjaCAgICAgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3Jldmlldy8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCi8vIHRoaXMgc2NyaXB0IGNvbWVzIGZyb20gdGhlIHJlcXVlc3QgaGVyZTogaHR0cDovL21ldGEuc3RhY2tleGNoYW5nZS5jb20vcS8yNTA1ODAvMjEzNjcxCi8vIHJlbmUgb3JpZ2luYWxseSBtYWRlIHRoaXM6IGh0dHA6Ly9tZXRhLnN0YWNrZXhjaGFuZ2UuY29tL2EvMjUwNjIyLzIxMzY3MQoKKGZ1bmN0aW9uKCQsIHdpbmRvdykgewoKICAgIHZhciBwYXJ0cywKICAgICAgICBzdGF0c3VybCwKICAgICAgICBjdXJyZW50aHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLAogICAgICAgIC8vIGhlcmUgd2UgcHV0IG91ciBzdGF0CiAgICAgICAgc3RhdCA9ICQoJzxkaXY+PC9kaXY+JykKICAgICAgICAuaHRtbCgnLi4uJm5ic3A7LyZuYnNwOycpCiAgICAgICAgLmNzcygnZmxvYXQnLCdsZWZ0JykKICAgICAgICAuY3NzKCdwYWRkaW5nLXRvcCcsJzEzcHgnKTsKCiAgICBmdW5jdGlvbiBidWlsZFVybCgpIHsKICAgICAgICAvLyBidWlsZCB0aGUgc3RhdHMgdXJsCiAgICAgICAgcGFydHMgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKTsKICAgICAgICBpZiAocGFydHMubGVuZ3RoPjMpIHsKICAgICAgICAgICBwYXJ0c1twYXJ0cy5sZW5ndGgtMV0gPSAnc3RhdHMnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBhcnRzLnB1c2goJ3N0YXRzJyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcvJyk7CiAgICB9CgogICAgc3RhdHN1cmwgPSBidWlsZFVybCgpOwoKICAgIC8vIGludGVnYXRlIGluIHRoZSByZXZpZXcgcGFnZQogICAgJCgnI2JhZGdlLXByb2dyZXNzJykucHJlcGVuZChzdGF0KTsKCiAgICAvLyBnZXQgdGhlIChmdWxsYmxvd24pIHN0YXRzIHBhZ2UgYW5kIGZpbmQgeW91ciBvd24gc3RhdAogICAgZnVuY3Rpb24gcmVmcmVzaHN0YXQoKSB7CiAgICAgICAgJC5nZXQoc3RhdHN1cmwsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgIHZhciBodG1sID0gJChkYXRhKSwKICAgICAgICAgICAgICAgIHRkID0gaHRtbC5maW5kKCd0ZC5yZXZpZXctc3RhdHMtY291bnQtY3VycmVudC11c2VyOmZpcnN0Jyk7CiAgICAgICAgICAgIC8vIHJlcGxhY2Ugb3VyIGN1cnJlbnQgc3RhdCB3aXRoIHRoZSBqdXN0IGxvYWRlZCBvbmUKICAgICAgICAgICAgc3RhdC5odG1sKHRkLnRleHQoKSArICcmbmJzcDsvJm5ic3A7Jyk7ICAgIAogICAgICAgIH0pLmZhaWwoZnVuY3Rpb24ocHJvbSwgZXJyb3IsIG1zZykgewogICAgICAgICAgICBkZWJ1Z2dlcjsKICAgICAgICAgICAgaWYgKG1zZyA9PT0gJ05vdCBGb3VuZCcpIHsKICAgICAgICAgICAgICAgIC8vIHRoZSB1cmwgaXMgbm90IGNvcnJlY3QsIHRyeSBhIG5ldyBvbmUKICAgICAgICAgICAgICAgIHN0YXRzdXJsID0gYnVpbGRVcmwoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIC8vIGNoZWNrIHJlZ3VsYXJseSAoZXZlcnkgNSBzZWNvbmRzKSBpZiB3ZSBkb25lIGEgcmV2aWV3IHlldAogICAgd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBpZiB0aGUgdXJsIGNoYW5nZWQsIGxldHMgZ2V0IHRoZSBuZXcgc3RhdAogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZiAhPT0gY3VycmVudGhyZWYpIHsKICAgICAgICAgICAgY3VycmVudGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgcmVmcmVzaHN0YXQoKTsKICAgICAgICB9CiAgICB9LCA1MDAwKTsgLy8gbm93IDUgc2Vjb25kcyBiZWNhdXNlIHdlIGhhcmRseSBldmVyIHJldmlldyBxdWlja2VyIHRoYW4gdGhhdAogICAgcmVmcmVzaHN0YXQoKTsgLy8gcnVuIG9uY2UgZm9yIGFuIGluaXRpYWwgdmFsdWUKCn0oJCB8fCB1bnNhZmVXaW5kb3cuJCwgd2luZG93IHx8IHVuc2FmZVdpbmRvdykpOwo="},{"name":"(SE) Customize help menu","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/*","*://*.mathoverflow.net/*","*://*.serverfault.com/*","*://*.stackapps.com/*","*://*.stackexchange.com/*","*://*.stackoverflow.com/*","*://*.superuser.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{"helpSE_v1":"s{\"help_blank\":false,\"remove_help\":false,\"menu\":[{\"name\":\"Moderation Tools\",\"url\":\"/tools\"},{\"name\":\"NATO\",\"url\":\"/tools/new-answers-old-questions\"}]}"},"ts":1456720105784},"enabled":true,"position":13,"file_url":"https://gist.github.com/raw/a539c1905608b253fcb6/CustomizeHelpMenu.user.js","uuid":"098ebad5-b95b-472e-be23-361868277072","source":""},{"name":"AutoReviewComments","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/^https?:\\/\\/(.*\\.)?stackoverflow\\.com/.*$/","/^https?:\\/\\/(.*\\.)?serverfault\\.com/.*$/","/^https?:\\/\\/(.*\\.)?superuser\\.com/.*$/","/^https?:\\/\\/(.*\\.)?stackexchange\\.com/.*$/","/^https?:\\/\\/(.*\\.)?askubuntu\\.com/.*$/","/^https?:\\/\\/(.*\\.)?mathoverflow\\.com/.*$/","/^https?:\\/\\/discuss\\.area51\\.stackexchange\\.com/.*$/","/^https?:\\/\\/stackapps\\.com/.*$/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"data":{},"ts":1456451831506},"enabled":true,"position":14,"file_url":"https://raw.github.com/Benjol/SE-AutoReviewComments/master/dist/autoreviewcomments.user.js","uuid":"8b302a20-45b6-48df-aa1f-ba2a8c340e57","source":""},{"name":"NATO Enhancements","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?:\\/\\/(meta\\.)?stackoverflow.com\\/tools\\/new-answers-old-questions.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1456466373761,"data":{}},"enabled":true,"position":15,"file_url":"https://raw.githubusercontent.com/Tiny-Giant/myuserscripts/master/NATOEnhancements.user.js","uuid":"6dad8b6e-1a2a-42b0-901e-67831ea0cf8f","source":""},{"name":"Votes Page Enhancer","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?:\\/\\/(meta\\.|www\\.)?stackoverflow\\.com/users/.*?tab\\=votes.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1457442038376,"data":{}},"enabled":true,"position":16,"uuid":"ad9135a7-2e9a-423b-baf5-6bc59f6598cf","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBWb3RlcyBQYWdlIEVuaGFuY2VyCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMS4wLjAuMgovLyBAZGVzY3JpcHRpb24gIExvYWRzIHBvc3RzIGluIHRoZWlyIG5hdHVyYWwgZm9ybSBvbiB0aGUgdm90ZXMgcGFnZXMgZm9yIHVzZXJzLgovLyBAYXV0aG9yICAgICAgIEBUaW55LUdpYW50Ci8vIEBpbmNsdWRlICAgICAgL2h0dHBzPzpcL1wvKG1ldGFcLnx3d3dcLik/c3RhY2tvdmVyZmxvd1wuY29tL3VzZXJzLy4qP3RhYlw9dm90ZXMuKi8KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQovKiBqc2hpbnQgLVcwOTcgKi8KJ3VzZSBzdHJpY3QnOwoKbGV0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKc3R5bGUudGV4dENvbnRlbnQgPSAnLmFjdHVhbC1lZGl0LW92ZXJsYXkgeyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH0nOwpkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN0eWxlKTsKClN0YWNrRXhjaGFuZ2UudXNpbmcoImlubGluZUVkaXRpbmciLCBmdW5jdGlvbiAoKSB7CiAgICBTdGFja0V4Y2hhbmdlLmlubGluZUVkaXRpbmcuaW5pdCgpOwp9KTsKCmxldCBjc3MgPSBbCiAgICAnLnF1ZXN0aW9uLCAuYW5zd2VyIHsnLAogICAgJyAgICB3aWR0aDogNzMwcHggIWltcG9ydGFudCcsCiAgICAnfScsCiAgICAnLnZvdGVjZWxsIHsnLAogICAgJyAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wICFpbXBvcnRhbnQ7JywKICAgICd9JywKICAgICdoMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHsnLAogICAgJyAgICBmb250LXdlaWdodDogbm9ybWFsJywKICAgICd9JwpdLmpvaW4oJ1xuJyk7CgppZiAoZmFsc2UpOwplbHNlIGlmICgidW5kZWZpbmVkIiAhPSB0eXBlb2YgR01fYWRkU3R5bGUpICBHTV9hZGRTdHlsZShjc3MpOwplbHNlIGlmICgidW5kZWZpbmVkIiAhPSB0eXBlb2YgUFJPX2FkZFN0eWxlKSBQUk9fYWRkU3R5bGUoY3NzKTsKZWxzZSBpZiAoInVuZGVmaW5lZCIgIT0gdHlwZW9mIGFkZFN0eWxlKSAgICAgYWRkU3R5bGUoY3NzKTsKZWxzZSAoZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpLnBhcmVudE5vZGUpOwoKbGV0IGluaXRQb3N0ID0gKHBvc3QsIGh0bWwsIGNvbnRhaW5lciwgbG9hZGVyLCBwYXJlbnQpID0+IHsKICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGV2ZW50ID0+IHsKICAgICAgICBpZih4aHIuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgY29uc29sZS5sb2coeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQsIHhoci5yZXNwb25zZVRleHQpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGxldCBxdWVzdGlvbiA9ICgvXGQrLy5leGVjKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlbmFibGUtbG9hZC1ib2R5LScgKyBwb3N0KS5xdWVyeVNlbGVjdG9yKCdhW2hyZWZdJykpfHxbZmFsc2VdKVswXTsKICAgICAgICAKICAgICAgICBsZXQgb3NuaXBwZXRzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbmlwcGV0Jyk7CiAgICAgICAgCiAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IGh0bWw7CiAgICAgICAgCiAgICAgICAgbGV0IG5zbmlwcGV0cyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuc25pcHBldCcpOwogICAgICAgIAogICAgICAgIGxvYWRlci5yZW1vdmUoKTsKICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTsKCiAgICAgICAgU3RhY2tFeGNoYW5nZS5xdWVzdGlvbi5pbml0KHsKICAgICAgICAgICAgdm90ZXNDYXN0OiBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpLAogICAgICAgICAgICBjYW5WaWV3Vm90ZUNvdW50czogdHJ1ZSwKICAgICAgICAgICAgcXVlc3Rpb25JZDogcXVlc3Rpb24KICAgICAgICB9KTsKCiAgICAgICAgY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5qcy1zaG93LWxpbmsuY29tbWVudHMtbGluaycpLmNsaWNrKCk7CiAgICAgICAgCiAgICAgICAgZm9yKGxldCBpIGluIE9iamVjdC5rZXlzKG5zbmlwcGV0cykpIHsKICAgICAgICAgICAgbnNuaXBwZXRzW2ldLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG9zbmlwcGV0c1tpXSwgbnNuaXBwZXRzW2ldKTsKICAgICAgICAgICAgbnNuaXBwZXRzW2ldLnJlbW92ZSgpOwogICAgICAgIH0KICAgIH0sIGZhbHNlKTsKCiAgICB4aHIub3BlbignR0VUJywgJy9wb3N0cy8nICsgcG9zdCArICcvdm90ZXMnKTsKCiAgICB4aHIuc2VuZCgpOwp9CgpsZXQgZmV0Y2hQb3N0ID0gcG9zdCA9PiB7CiAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VuYWJsZS1sb2FkLWJvZHktJyArIHBvc3QpLnBhcmVudE5vZGUubmV4dEVsZW1lbnRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoJy5ib2R5LWNvbnRhaW5lcicpOwogICAgbGV0IHBhcmVudCA9IGNvbnRhaW5lci5wYXJlbnROb2RlOwogICAgY29udGFpbmVyLnJlbW92ZSgpOwogICAgCiAgICBsZXQgbG9hZGVyID0gcGFyZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJykpOwogICAgbG9hZGVyLmNsYXNzTmFtZSA9ICdib2R5LWNvbnRhaW5lcic7CiAgICBsb2FkZXIuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nOwogICAgbG9hZGVyLmlubmVySFRNTCA9ICc8aW1nIGNsYXNzPSJhamF4LWxvYWRlciIgc3JjPSIvY29udGVudC9pbWcvcHJvZ3Jlc3MtZG90cy5naWYiIHRpdGxlPSJsb2FkaW5nLi4uIiBhbHQ9ImxvYWRpbmcuLi4iPic7CiAgICAKICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGV2ZW50ID0+IHsKICAgICAgICBpZih4aHIuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgY29uc29sZS5sb2coeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQsIHhoci5yZXNwb25zZVRleHQpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpbml0UG9zdChwb3N0LCB4aHIucmVzcG9uc2VUZXh0LCBjb250YWluZXIsIGxvYWRlciwgcGFyZW50KTsKICAgIH0sIGZhbHNlKTsKCiAgICB4aHIub3BlbignR0VUJywgJy9wb3N0cy9hamF4LWxvYWQtcmVhbHRpbWUvJyArIHBvc3QpOwoKICAgIHhoci5zZW5kKCk7Cn0KCiQoZG9jdW1lbnQpLmFqYXhDb21wbGV0ZSgoZXZlbnQsIHJlcXVlc3QsIHNldHRpbmdzKSA9PiB7IAogICAgbGV0IHBvc3QgPSAoL3Bvc3RzXC8oXGQrKVwvYm9keS8uZXhlYyhzZXR0aW5ncy51cmwpfHxbMCwwXSlbMV07CiAgICBpZiAocG9zdCkgZmV0Y2hQb3N0KHBvc3QpOwp9KTs="},{"name":"Flagging Percentages","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["*://api.stackexchange.com/*","*://blog.stackexchange.com/*","*://blog.stackoverflow.com/*","*://data.stackexchange.com/*","*://elections.stackexchange.com/*","*://stackexchange.com/*"],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/users/flag-summary/*","*://*.mathoverflow.net/users/flag-summary/*","*://*.serverfault.com/users/flag-summary/*","*://*.stackapps.com/users/flag-summary/*","*://*.stackexchange.com/users/flag-summary/*","*://*.stackoverflow.com/users/flag-summary/*","*://*.superuser.com/users/flag-summary/*"],"orig_noframes":null,"orig_run_at":"document-end","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1458020544836,"data":{}},"enabled":true,"position":17,"file_url":"file:///home/kevin/Downloads/flagging-percentages.user.js","uuid":"3d679309-7436-47ce-b601-9fc6c1be4484","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBGbGFnZ2luZyBQZXJjZW50YWdlcwovLyBAZGVzY3JpcHRpb24gIEFkZHMgZmxhZ2dpbmcgcGVyY2VudGFnZXMgd2hlbiB2aWV3aW5nIHRoZSBGbGFnIFN1bW1hcnkgcGFnZS4KLy8gQG5hbWVzcGFjZSAgICBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzE0NTQ1MzgvCi8vIEBhdXRob3IgICAgICAg4bSJyp51x50KLy8gQG1hdGNoICAgICAgICAqOi8vKi5hc2t1YnVudHUuY29tL3VzZXJzL2ZsYWctc3VtbWFyeS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoubWF0aG92ZXJmbG93Lm5ldC91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnNlcnZlcmZhdWx0LmNvbS91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnN0YWNrYXBwcy5jb20vdXNlcnMvZmxhZy1zdW1tYXJ5LyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5zdGFja2V4Y2hhbmdlLmNvbS91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnN0YWNrb3ZlcmZsb3cuY29tL3VzZXJzL2ZsYWctc3VtbWFyeS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyouc3VwZXJ1c2VyLmNvbS91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAZXhjbHVkZSAgICAgICo6Ly9hcGkuc3RhY2tleGNoYW5nZS5jb20vKgovLyBAZXhjbHVkZSAgICAgICo6Ly9ibG9nLnN0YWNrZXhjaGFuZ2UuY29tLyoKLy8gQGV4Y2x1ZGUgICAgICAqOi8vYmxvZy5zdGFja292ZXJmbG93LmNvbS8qCi8vIEBleGNsdWRlICAgICAgKjovL2RhdGEuc3RhY2tleGNoYW5nZS5jb20vKgovLyBAZXhjbHVkZSAgICAgICo6Ly9lbGVjdGlvbnMuc3RhY2tleGNoYW5nZS5jb20vKgovLyBAZXhjbHVkZSAgICAgICo6Ly9zdGFja2V4Y2hhbmdlLmNvbS8qCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtZW5kCi8vID09L1VzZXJTY3JpcHQ9PQovKiBqc2hpbnQgLVcwOTcgKi8KKGZ1bmN0aW9uICgkKSB7CiAgICAidXNlIHN0cmljdCI7CiAgICB2YXIgZ3JvdXAgPSB7CiAgICAgICAgUE9TVDogMSwKICAgICAgICBTUEFNOiAyLAogICAgICAgIE9GRkVOU0lWRTogMywKICAgICAgICBDT01NRU5UOiA0CiAgICB9OwogICAgdmFyIHR5cGUgPSB7CiAgICAgICAgVE9UQUw6ICJmbGFncyIsCiAgICAgICAgV0FJVElORzogIndhaXRpbmciLAogICAgICAgIEhFTFBGVUw6ICJoZWxwZnVsIiwKICAgICAgICBERUNMSU5FRDogImRlY2xpbmVkIiwKICAgICAgICBESVNQVVRFRDogImRpc3B1dGVkIiwKICAgICAgICBBR0VEQVdBWTogImFnZWQgYXdheSIKICAgIH07CgogICAgdmFyIGdyb3VwS2V5LAogICAgICAgIHR5cGVLZXksCiAgICAgICAgdG90YWwsCiAgICAgICAgY291bnQsCiAgICAgICAgcGVyY2VudGFnZTsKCiAgICBmdW5jdGlvbiBhZGRQZXJjZW50YWdlKGdyb3VwLCB0eXBlLCBwZXJjZW50YWdlKSB7CiAgICAgICAgdmFyICRzcGFuID0gJCgiPHNwYW4vPiIsIHsKICAgICAgICAgICAgdGV4dDogIih7MH0lKSIucmVwbGFjZSgnezB9JywgcGVyY2VudGFnZSksCiAgICAgICAgICAgIHN0eWxlOiAibWFyZ2luLWxlZnQ6NXB4OyBjb2xvcjogIzk5OTsgZm9udC1zaXplOiAxMnB4OyIKICAgICAgICB9KTsKICAgICAgICAkKCJ0ZCA+IGFbaHJlZio9J2dyb3VwPSIgKyBncm91cCArICInXTpjb250YWlucygnIiArIHR5cGUgKyAiJykiKS5hZnRlcigkc3Bhbik7CiAgICB9CgogICAgZnVuY3Rpb24gY2FsY3VsYXRlUGVyY2VudGFnZShjb3VudCwgdG90YWwpIHsKICAgICAgICB2YXIgcGVyY2VudCA9IChjb3VudCAvIHRvdGFsKSAqIDEwMDsKICAgICAgICByZXR1cm4gK3BlcmNlbnQudG9GaXhlZCgyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRGbGFnQ291bnQoZ3JvdXAsIHR5cGUpIHsKICAgICAgICB2YXIgZmxhZ0NvdW50ID0gMDsKICAgICAgICBmbGFnQ291bnQgKz0gTnVtYmVyKCQoInRkID4gYVtocmVmKj0nZ3JvdXA9IiArIGdyb3VwICsgIiddOmNvbnRhaW5zKCciICsgdHlwZSArICInKSIpCiAgICAgICAgICAgIC5wYXJlbnQoKQogICAgICAgICAgICAucHJldigpCiAgICAgICAgICAgIC50ZXh0KCkKICAgICAgICAgICAgLnJlcGxhY2UoIiwiLCAiIikpOwogICAgICAgIHJldHVybiBmbGFnQ291bnQ7CiAgICB9CgogICAgLy8gYWRkIHBlcmNlbnRhZ2VzCiAgICBmb3IgKGdyb3VwS2V5IGluIGdyb3VwKSB7CiAgICAgICAgdG90YWwgPSBnZXRGbGFnQ291bnQoZ3JvdXBbZ3JvdXBLZXldLCB0eXBlLlRPVEFMKTsKICAgICAgICBmb3IgKHR5cGVLZXkgaW4gdHlwZSkgewogICAgICAgICAgICBpZiAodHlwZUtleSAhPT0gIlRPVEFMIikgewogICAgICAgICAgICAgICAgY291bnQgPSBnZXRGbGFnQ291bnQoZ3JvdXBbZ3JvdXBLZXldLCB0eXBlW3R5cGVLZXldKTsKICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSBjYWxjdWxhdGVQZXJjZW50YWdlKGNvdW50LCB0b3RhbCk7CiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGdyb3VwS2V5ICsgIjogIiArIHR5cGVLZXkgKyAiIEZsYWdzIC0tICIgKyBjb3VudCk7CiAgICAgICAgICAgICAgICBhZGRQZXJjZW50YWdlKGdyb3VwW2dyb3VwS2V5XSwgdHlwZVt0eXBlS2V5XSwgcGVyY2VudGFnZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0oalF1ZXJ5KSk7Cg=="},{"name":"SmokePreview","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://chat.meta.stackexchange.com/rooms/89/tavern-on-the-meta","http://chat.stackexchange.com/rooms/11540/charcoal-hq","http://chat.stackoverflow.com/rooms/41570/so-close-vote-reviewers"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{"askubuntu.com":"n103","meta.stackexchange.com":"n118","stackapps.com":"n113","stackoverflow.com":"n10248","superuser.com":"n105","token":"sK(Kzc7KCwmPboc84OE1TQA))","unix.stackexchange.com":"n103"},"ts":1458289631453},"enabled":true,"position":18,"file_url":"https://raw.githubusercontent.com/rekire/SmokePreview/master/SmokePreview.user.js","uuid":"8173f05d-49f7-4213-b6d7-6c2a7bf0dc9c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFNtb2tlUHJldmlldwovLyBAbmFtZXNwYWNlICAgZXUucmVraXNvZnQuc21va2VyCi8vIEBkZXNjcmlwdGlvbiBBIEdyZWFzZU1vbmtleSBzY3JpcHQgdG8gYWRkIGEgcHJldmlldyB0byBjaGF0IG1lc3NhZ2VzIG9mIHRoZSBTbW9rZURldGVjdG9yLgovLyBAaW5jbHVkZSAgICAgaHR0cDovL2NoYXQubWV0YS5zdGFja2V4Y2hhbmdlLmNvbS9yb29tcy84OS90YXZlcm4tb24tdGhlLW1ldGEKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly9jaGF0LnN0YWNrZXhjaGFuZ2UuY29tL3Jvb21zLzExNTQwL2NoYXJjb2FsLWhxCi8vIEBpbmNsdWRlICAgICBodHRwOi8vY2hhdC5zdGFja292ZXJmbG93LmNvbS9yb29tcy80MTU3MC9zby1jbG9zZS12b3RlLXJldmlld2VycwovLyBAdmVyc2lvbiAgICAgMTYwMzMwMDEKLy8gQGdyYW50ICAgICAgIEdNX2dldFZhbHVlCi8vIEBncmFudCAgICAgICBHTV9zZXRWYWx1ZQovLyA9PS9Vc2VyU2NyaXB0PT0KCnVuc2FmZVdpbmRvdy5zcF9sb2FkID0gR01fZ2V0VmFsdWU7CnVuc2FmZVdpbmRvdy5zcF9zYXZlID0gR01fc2V0VmFsdWU7Cgp2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXQnKTsKdmFyIGxhc3RVc2VyOwp2YXIgcHJpbnRUb0NvbnNvbGUgPSBmYWxzZTsKCnZhciBtc2dHcm91cE9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obXV0YXRpb25zKSB7CiAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHsKICAgIGlmKG11dGF0aW9uLmFkZGVkTm9kZXMubGVuZ3RoID4gMCkgewogICAgICBwcm9jZXNzTWVzc2FnZU5vZGUobXV0YXRpb24uYWRkZWROb2Rlc1swXSk7CiAgICB9CiAgfSk7Cn0pOwoKdmFyIG5ld01zZ09ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obXV0YXRpb25zKSB7CiAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHsKICAgIHRyeSB7CgkgIC8vIHRoZSBsYXN0IGdyb3VwIGlzIG5vdCBpbnRlcmVzdGluZyBhbnltb3JlIHNpbmNlIHRoZXJlIGlzIGEgbmV3IGdyb3VwCiAgICAgIG1zZ0dyb3VwT2JzZXJ2ZXIuZGlzY29ubmVjdCgpOwogICAgfSBjYXRjaChlKSB7fQogICAgLy8gcHJvY2VzcyB0aGUgbmV3IG1lc3NhZ2UKICAgIHByb2Nlc3NOZXdNZXNzYWdlKG11dGF0aW9uKTsKICAgIHZhciBtZXNzYWdlTGlzdCA9IHRhcmdldC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJtZXNzYWdlcyIpOwogICAgdmFyIGxhc3RNZXNzYWdlID0gbWVzc2FnZUxpc3RbbWVzc2FnZUxpc3QubGVuZ3RoIC0gMV07CiAgICBtc2dHcm91cE9ic2VydmVyLm9ic2VydmUobGFzdE1lc3NhZ2UsIG9ic2VydmVyQ29uZmlnKTsKICB9KTsgICAgCn0pOwoKZnVuY3Rpb24gcHJvY2Vzc05ld01lc3NhZ2UobXV0YXRpb24pIHsKICB0cnkgewogICAgbGFzdFVzZXIgPSBtdXRhdGlvbi5hZGRlZE5vZGVzWzBdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoInVzZXJuYW1lIilbMF0uaW5uZXJIVE1MOwogICAgdmFyIG1lc3NhZ2UgPSBtdXRhdGlvbi5hZGRlZE5vZGVzWzBdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImNvbnRlbnQiKVswXTsKICAgIG9uTWVzc2FnZShsYXN0VXNlciwgbWVzc2FnZSk7CiAgfSBjYXRjaChlKSB7fQp9CgpmdW5jdGlvbiBwcm9jZXNzTWVzc2FnZU5vZGUobm9kZSkgewogIHRyeSB7CiAgICB2YXIgbWVzc2FnZSA9IG5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiY29udGVudCIpWzBdOwogICAgb25NZXNzYWdlKGxhc3RVc2VyLCBtZXNzYWdlKTsKICB9IGNhdGNoKGUpIHt9Cn0KCmZ1bmN0aW9uIG9uTWVzc2FnZSh1c2VyLCBtc2cpIHsKICBpZihwcmludFRvQ29uc29sZSkgY29uc29sZS5sb2codXNlciArICIgc2FpZCAiICsgbXNnLmlubmVySFRNTCk7CiAgaWYodXNlciA9PSAiU21va2VEZXRlY3RvciIgJiYgbXNnLmlubmVySFRNTC5pbmRleE9mKCJieSIpID4gMCkgewogICAgdmFyIGNvZGUgPSBtc2cuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImNvZGUiKTsKICAgIGlmKGNvZGUubGVuZ3RoID4gMCkgewogICAgICB2YXIgc2l0ZSA9IGNvZGVbMF0uaW5uZXJIVE1MOwogICAgICB2YXIgcG9zdCA9IG1zZy5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYSIpWzFdLmhyZWY7CiAgICAgIHZhciB0eXBlID0gKHBvc3QuaW5kZXhPZigicXVlc3Rpb25zIikgPiAwKSA/ICJxdWVzdGlvbnMiIDogImFuc3dlcnMiOwogICAgICB2YXIgaWQgPSBwb3N0LnN1YnN0cihwb3N0Lmxhc3RJbmRleE9mKCIvIikgKyAxKTsKICAgICAgdmFyIHRhZyA9ICc8ZGl2IGlkPSJzZCcgKyBpZCArICciIGNsYXNzPSJvbmVib3ggb2ItcG9zdCIgc3R5bGU9Im92ZXJmbG93LXk6YXV0bzsgbWF4LWhlaWdodDoxNTBweDsgbWFyZ2luLWJvdHRvbToyZW0iPjwvZGl2Pic7CiAgICAgIGlmKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZCcraWQpID09IG51bGwpIHsKICAgICAgICBtc2cuaW5uZXJIVE1MICs9IHRhZzsKICAgICAgfQogICAgICBpZihwcmludFRvQ29uc29sZSkgY29uc29sZS5sb2coY29kZVswXS5pbm5lckhUTUwgKyAiIC0+ICIgKyBzaXRlLCB0eXBlLCBpZCwgbXNnKTsKICAgICAgLy8gVE9ETyBjaGVjayBpZiB0aGUgY3VycmVudCB1c2VyIGhhcyBhbiBhY2NvdW50IG9uIHRoYXQgc2l0ZS4KICAgICAgbG9hZFByZXZpZXcoc2l0ZSwgaWQpOwogICAgfQogICAgaWYocHJpbnRUb0NvbnNvbGUpIGNvbnNvbGUubG9nKGNvZGVbMF0uaW5uZXJIVE1MLCBtc2cuaW5uZXJIVE1MKTsKICB9Cn0KCmZ1bmN0aW9uIGxvYWRQcmV2aWV3KHNpdGUsIGlkKSB7CiAgdmFyIHVybCA9ICJodHRwOi8vYXBpLnN0YWNrZXhjaGFuZ2UuY29tLzIuMi9wb3N0cy8iICsgaWQgKyAiP3NpdGU9IiArIHNpdGUgKyAiJmZpbHRlcj0hTEduS0tLLVgwYmJkKmNpeGtaaWgqSyZrZXk9NEp2RU9sZ20wYUlncmNtbzJoc2JuZygoIjsKICBpZihwcmludFRvQ29uc29sZSkgY29uc29sZS5sb2coInRyeSB0byBkb3dubG9hZCAiICsgdXJsKTsKICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7CiAgeGhyLm9ubG9hZCA9IHNob3dQcmV2aWV3OwogIHhoci5pZCA9IGlkOwogIHhoci5zZW5kKCk7Cn0KCmZ1bmN0aW9uIHNob3dQcmV2aWV3KHJlc3BvbnNlKSB7CiAgaWYocHJpbnRUb0NvbnNvbGUpIGNvbnNvbGUubG9nKHJlc3BvbnNlLCB0aGlzLnJlc3BvbnNlLCB0aGlzLmlkKTsKICB2YXIgcmVzcCA9IEpTT04ucGFyc2UodGhpcy5yZXNwb25zZSk7CiAgaWYocmVzcC5pdGVtcy5sZW5ndGggPT0gMCkgewogICAgdmFyIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2QiICsgdGhpcy5pZCk7CiAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICBlbGVtLnBhcmVudE5vZGUuc3R5bGUub3BhY2l0eSA9IC41OwogIH0gZWxzZSB7CiAgICB2YXIgcG9zdCA9IHJlc3AuaXRlbXNbMF07Cgl2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgIGxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgcG9zdC5saW5rKTsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzZCIgKyB0aGlzLmlkKS5pbm5lckhUTUwgPQogICAgICAnPGRpdiB0aXRsZT0iVGhpcyAnICsgcG9zdC5wb3N0X3R5cGUgKyAnIGhhcyBhIHNjb3JlIG9mICcgKyBwb3N0LnNjb3JlICsKICAgICAgJy4iIGNsYXNzPSJvYi1wb3N0LXZvdGVzIj4nICsgcG9zdC5zY29yZSArICc8L2Rpdj4nICsKICAgICAgJzxkaXYgY2xhc3M9Im9iLXBvc3QtdGl0bGUiPicgKyBwb3N0LnBvc3RfdHlwZS5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSArCiAgICAgICc6IDxhIGhyZWY9IicgKyBwb3N0LmxpbmsgKyAnIiBzdHlsZT0iY29sb3I6ICM0RTgyQzI7Ij4nICsgcG9zdC50aXRsZSArCiAgICAgICc8L2E+PC9kaXY+PHAgY2xhc3M9Im9iLXBvc3QtYm9keSI+PGltZyB3aWR0aD0iMzIiIGhlaWdodD0iMzIiIGFsdD0iJyArIHBvc3Qub3duZXIuZGlzcGxheV9uYW1lICsKICAgICAgJyIgdGl0bGU9IicgKyBwb3N0Lm93bmVyLmRpc3BsYXlfbmFtZSArICciIHNyYz0iJyArIHBvc3Qub3duZXIucHJvZmlsZV9pbWFnZSArCiAgICAgICciIGNsYXNzPSJ1c2VyLWdyYXZhdGFyMzIiPicgKyByZXNwLml0ZW1zWzBdLmJvZHkgKyAnPC9wPicgKwogICAgICAnPGRpdiBjbGFzcz0idG9vbGJhciIgc3R5bGU9InBvc2l0aW9uOmFic29sdXRlOyBib3R0b206IDBweDsiPic7CiAgfQp9CgovLyBzZXR1cCB0aGUgb2JzZXJ2ZXIgY29uZmlndXJhdGlvbgp2YXIgb2JzZXJ2ZXJDb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9OwoKd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbigpIHsKICBpZihwcmludFRvQ29uc29sZSkgY29uc29sZS5sb2coImluaXQiKTsKICB2YXIgbWVzc2FnZUxpc3QgPSB0YXJnZXQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgibWVzc2FnZXMiKTsKICB2YXIgbGFzdE1lc3NhZ2UgPSBtZXNzYWdlTGlzdFttZXNzYWdlTGlzdC5sZW5ndGggLSAxXTsKICBtc2dHcm91cE9ic2VydmVyLm9ic2VydmUobGFzdE1lc3NhZ2UsIG9ic2VydmVyQ29uZmlnKTsKICBuZXdNc2dPYnNlcnZlci5vYnNlcnZlKHRhcmdldCwgb2JzZXJ2ZXJDb25maWcpOwoKICB2YXIgbmljayA9IHRhcmdldC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ1c2VybmFtZSIpOwogIGxhc3RVc2VyID0gbmljay5sZW5ndGggPiAwCiAgICAgICAgICAgICAgICAgPyBuaWNrW25pY2subGVuZ3RoIC0gMV0uaW5uZXJIVE1MCiAgICAgICAgICAgICAgICAgOiAidW5rbm93biI7CiAgCiAgLy8gcGFyc2UgZXhpc3RpbmcgbWVzc2FnZXMKICB2YXIgbWVzc2FnZUJsb2NrcyA9IHRhcmdldC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ1c2VyLWNvbnRhaW5lciIpOwogIGZvcih2YXIgaSA9IDAsIG1lc3NhZ2VCbG9ja3NMZW5ndGggPSBtZXNzYWdlQmxvY2tzLmxlbmd0aDsgaSA8IG1lc3NhZ2VCbG9ja3NMZW5ndGg7IGkrKykgewogICAgdmFyIHVzZXIgPSBtZXNzYWdlQmxvY2tzW2ldLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoInVzZXJuYW1lIilbMF0uaW5uZXJIVE1MOwogICAgdmFyIG1lc3NhZ2VzID0gbWVzc2FnZUJsb2Nrc1tpXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJtZXNzYWdlIik7CiAgICBmb3IodmFyIGogPSAwLCBtZXNzYWdlc0xlbmd0aCA9IG1lc3NhZ2VzLmxlbmd0aDsgaiA8IG1lc3NhZ2VzTGVuZ3RoOyBqKyspIHsKICAgICAgdmFyIG1lc3NhZ2UgPSBtZXNzYWdlc1tqXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJjb250ZW50IilbMF07CiAgICAgIG9uTWVzc2FnZSh1c2VyLCBtZXNzYWdlKTsKICAgIH0KICB9CiAgCiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogIHNjcmlwdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnKCcgKyBwdWJsaWNBcGkgKyAnKSgpOycpKTsKICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKfSwgZmFsc2UpOw=="},{"name":"Show Edited Votes","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/^https?:\\/\\/(?:meta\\.)?(?:stackoverflow|[^\\/\\.]+\\.stackexchange)\\.com\\/users\\/\\d+\\/.*\\?tab=votes/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1460728127464,"data":{}},"enabled":true,"position":19,"file_url":"https://www.tuggycomputer.com/nathan/software/userscripts/Show_Edited_Votes.user.js","uuid":"30b13fb4-62a3-401a-a8bf-fee6ac2f5f83","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFNob3cgRWRpdGVkIFZvdGVzCi8vIEBuYW1lc3BhY2UgICBjb20udHVnZ3kubmF0aGFuCi8vIEBkZXNjcmlwdGlvbiBEaXNwbGF5cyBhIGxpc3Qgb2YgcG9zdHMgdGhhdCBoYXZlIGJlZW4gZWRpdGVkIHNpbmNlIHZvdGluZwovLyBAaW5jbHVkZSAgICAgL15odHRwcz86XC9cLyg/Om1ldGFcLik/KD86c3RhY2tvdmVyZmxvd3xbXlwvXC5dK1wuc3RhY2tleGNoYW5nZSlcLmNvbVwvdXNlcnNcL1xkK1wvLipcP3RhYj12b3Rlcy8KLy8gQHZlcnNpb24gICAgIDEuMi4wNQovLyBAZ3JhbnQgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0vLwovLyBUaHJvdHRsaW5nIGltcGxlbWVudGF0aW9uIGJvcnJvd2VkIGZyb20gcmVuZSdzIE1hdGNoIEFnYWluc3QgUGVlcnMgSW4gUmV2aWV3CgpmdW5jdGlvbiBwYXJzZUlzb0RhdGV0aW1lKGR0c3RyKSB7ICAgICAgLy8gRnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjQzNDYxOQogIHZhciBkdCA9IGR0c3RyLnNwbGl0KC9bOiBULV0vKS5tYXAocGFyc2VGbG9hdCk7CiAgcmV0dXJuIG5ldyBEYXRlKGR0WzBdLCBkdFsxXSAtIDEsIGR0WzJdLCBkdFszXSB8fCAwLCBkdFs0XSB8fCAwLCBkdFs1XSB8fCAwLCAwKTsKfQoKZnVuY3Rpb24gcGFyc2VJbnQoc3RyKSB7CiAgcmV0dXJuIE51bWJlci5wYXJzZUludChzdHIucmVwbGFjZSgiLCIsICIiKSk7Cn0KCihmdW5jdGlvbiAoJCwgd2luZG93KSB7CiAgInVzZSBzdHJpY3QiOwogIGNvbnN0IG1vbnRocyA9IFsiSmFuIiwgIkZlYiIsICJNYXIiLCAiQXByIiwgIk1heSIsICJKdW4iLCAiSnVsIiwgIkF1ZyIsICJTZXAiLCAiT2N0IiwgIk5vdiIsICJEZWMiXTsKICB2YXIgdGFza3MgPSBbXSwKICAgICAgaW50ZXJ2YWxUaW1lID0gMjAwLCAvLyBtaWxsaXNlY29uZHMgKG1ha2UgdGhpcyBsYXJnZXIgd2hlbiB0aHJvdHRsZWQgb2Z0ZW4pCiAgICAgIHBlciA9IDkwMDAwLCAgICAgICAgLy8gbWlsbGlzZWNvbmRzCiAgICAgIHBlbmFsdHkgPSA2MDAwMCwgICAgLy8gbWlsbGlzZWNvbmRzIHRvIHdhaXQgYWZ0ZXIgNTAzCiAgICAgIHJhdGUgPSAxNTAsICAgICAgICAgLy8gcGVyIDkwMDAwIG1pbGxpc2Vjb25kcyAobWFrZSB0aGlzIHNtYWxsZXIgd2hlbiB0aHJvdHRsZWQgb2Z0ZW4sIGJ1dCBvbiA4MCB5b3UncmUgc2FmZSkKICAgICAgaW50ZXJ2YWwsCiAgICAgIGhhbmRsZXIsCiAgICAgIGlkcyA9IFtdLAogICAgICBsYXN0Vm90ZWQgPSBbXSwKICAgICAgdm90ZVR5cGVzID0gW10sCiAgICAgIGZpbHRlcnMgPSAkKCcuc3VidGFicy51c2VyLXRhYi1zb3J0cycpLmZpcnN0KCksCiAgICAgIHRhYmxlID0gJCgnLmhpc3RvcnktdGFibGUgPiB0Ym9keScpLmZpcnN0KCksCiAgICAgIGVkaXRlZEZpbHRlciA9ICQoJzxhIGhyZWY9IiMiPmVkaXRlZCBzaW5jZSB2b3Rpbmc8L2E+JyksCiAgICAgIGlkQ3VycmVudFVzZXIgPSBuZXcgTnVtYmVyKC9cLyhcZCspXC8vLmV4ZWMoZG9jdW1lbnQubG9jYXRpb24uaHJlZilbMV0pLAogICAgICBjb3VudGVyID0gJCgnaDEgPiBzcGFuLmNvdW50JykuZmlyc3QoKSwKICAgICAgcHJvZ3Jlc3MgPSAkKCc8aW1nIHNyYz0iL2NvbnRlbnQvaW1nL3Byb2dyZXNzLWRvdHMuZ2lmIj48L2ltZz4nKSwKICAgICAgc3RhdGUgPSAic3RhcnQiLAogICAgICB2b3RlQWRkUGVuZGluZ0NvdW50ZXI7CgogIC8vIEFkZCBmaXJzdCBwYWdlIG9mIGdpdmVuIHZvdGUgdHlwZQogIGZ1bmN0aW9uIGFkZEZpcnN0UGFnZSh2b3RlVHlwZSkgewogICAgdmFyIHVybEJhc2UgPSBkb2N1bWVudC5sb2NhdGlvbi5ocmVmLnJlcGxhY2UoLyZzb3J0PS4qJC8sICcnKSwgdXJsRmlyc3QgPSB1cmxCYXNlICsgJyZzb3J0PScgKyB2b3RlVHlwZTsKICAgIHN0YXRlID0gdm90ZVR5cGU7CiAgICBoYW5kbGVyID0gYWRkUGFnZXMuYmluZCh1cmxGaXJzdCk7CiAgICB2b3RlQWRkUGVuZGluZ0NvdW50ZXIgPSAwOwogICAgdGFza3MucHVzaCh1cmxGaXJzdCk7CiAgfQogIAogIC8vIEZvciBlYWNoIHBhZ2Ugb2YgdGhlIHR5cGUgZnJvbSB0aGUgcGFnZSBnaXZlbiwgcHV0IGEgdGFzayBpbiB0aGUgcXVldWUKICBmdW5jdGlvbiBhZGRQYWdlcyhkb2NGaXJzdCkgewogICAgdmFyIHVybEZpcnN0ID0gdGhpcywKICAgICAgICBtYXhQYWdlID0gcGFyc2VJbnQoJCgnYTpub3QoW3JlbD1uZXh0XSkgPiBzcGFuLnBhZ2UtbnVtYmVycycsIGRvY0ZpcnN0KS5sYXN0KCkudGV4dCgpKTsKICAgIHBhZ2VIYW5kbGVyKGRvY0ZpcnN0KTsKICAgIHN0YXRlICs9ICctcGFnaW5nJzsKICAgIGhhbmRsZXIgPSBwYWdlSGFuZGxlcjsKICAgIGZvciAobGV0IGkgPSAyOyBpIDw9IG1heFBhZ2U7IGkrKykgewogICAgICB0YXNrcy5wdXNoKHVybEZpcnN0ICsgJyZwYWdlPScgKyBpKTsKICAgIH0KICB9CiAgCiAgLy8gRm9yIGVhY2ggMTAwIHBvc3QgSURzLCBwdXQgYSB0YXNrIGluIHRoZSBxdWV1ZSwgZG9pbmcgcHJlbGltaW5hcnkgZmlsdGVyaW5nIGJ5IHRoZSBlYXJsaWVzdCBvZiB0aG9zZSBwb3N0cycgdm90ZSBkYXRlcwogIGZ1bmN0aW9uIGFkZEFQSUNhbGxzKCkgewogICAgY29uc3QgbWV0aG9kQmFzZSA9ICdodHRwczovL2FwaS5zdGFja2V4Y2hhbmdlLmNvbS8yLjIvcG9zdHMvJywKICAgICAgICAgIHBhcmFtQmFzZUEgPSAnP3BhZ2VzaXplPTEwMCZvcmRlcj1kZXNjJm1pbj0nLAogICAgICAgICAgcGFyYW1CYXNlQiA9ICcmc29ydD1hY3Rpdml0eSZmaWx0ZXI9ISk0ay1GbVNFa3JrQ2hSa1NIWFBYSEUyU3hPaFkmc2l0ZT0nLAogICAgICAgICAgc2l0ZVBhdHRlcm4gPSAvKD86bWV0YVwuKT8oPzpbXlwuXC9dKyg/PVwuc3RhY2tleGNoYW5nZSl8c3RhY2tvdmVyZmxvdykvOwogICAgdmFyIHNpdGVNYXRjaCA9IHNpdGVQYXR0ZXJuLmV4ZWMoZG9jdW1lbnQubG9jYXRpb24uaG9zdG5hbWUpLCBzaXRlUGFyYW07CiAgICBzdGF0ZSA9ICJBUEktY2FsbGluZyI7CiAgICBoYW5kbGVyID0gYXBpSGFuZGxlcjsKICAgIGlmIChzaXRlTWF0Y2gpIHsKICAgICAgc2l0ZVBhcmFtID0gc2l0ZU1hdGNoWzBdOwogICAgfQogICAgZWxzZSB7CiAgICAgIGFsZXJ0KCJTaG93IEVkaXRlZCBWb3RlczogQ291bGRuJ3QgZmluZCBzaXRlIGFiYnJldmlhdGlvbiBpbiBVUkwhICgnIiArIGRvY3VtZW50LmxvY2F0aW9uLmhvc3RuYW1lICsgIicpIik7CiAgICAgIHJldHVybjsKICAgIH0KICAgIHdoaWxlIChpZHMubGVuZ3RoID4gMCkgewogICAgICBsZXQgcGFyYW1JRHMgPSBpZHMuc2xpY2UoMCwgMTAwKSwgaWRQYXJhbSA9IHBhcmFtSURzLmpvaW4oJzsnKTsKICAgICAgbGV0IG1pblBhcmFtID0gcGFyYW1JRHMubWFwKGZ1bmN0aW9uIChlKSB7CiAgICAgICAgICByZXR1cm4gbmV3IE51bWJlcihsYXN0Vm90ZWRbZV0pOwogICAgICAgIH0pLnJlZHVjZShmdW5jdGlvbiAoYSwgYikgewogICAgICAgICAgICByZXR1cm4gTWF0aC5taW4oYSwgYik7CiAgICAgICAgICB9LCBEYXRlLm5vdygpIC8gMTAwMCk7CiAgICAgIGxldCB1cmwgPSBtZXRob2RCYXNlICsgaWRQYXJhbSArIHBhcmFtQmFzZUEgKyBtaW5QYXJhbSArIHBhcmFtQmFzZUIgKyBzaXRlUGFyYW07CiAgICAgIHRhc2tzLnB1c2godXJsKTsKICAgICAgaWRzID0gaWRzLnNsaWNlKDEwMCk7CiAgICB9CiAgfQoKICBmdW5jdGlvbiBwYWdlSGFuZGxlcihkYXRhKSB7CiAgICAvLyBHcmFiIHBvc3QgVERzCiAgICB2YXIgcG9zdHMgPSAkKCd0ZC5hc3luYy1sb2FkJywgZGF0YSksIG5vVm90ZSA9IFtdLCB2b3RlVHlwZSA9IHN0YXRlLnNwbGl0KCctJylbMF07CiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvc3RzLmxlbmd0aDsgaSsrKSB7CiAgICAgIGxldCBpZCA9IG5ldyBOdW1iZXIocG9zdHNbaV0uaWQucmVwbGFjZSgnZW5hYmxlLWxvYWQtYm9keS0nLCAnJykpOwogICAgICBsZXQgdm90ZWQgPSAkKHBvc3RzW2ldKS5wYXJlbnQoKS5maW5kKCcuZGF0ZV9icmlja1t0aXRsZV0sIC5kYXRlW3RpdGxlXScpWzBdLnRpdGxlOwogICAgICBpZiAodm90ZWQpIHsKICAgICAgICBpZHMucHVzaChpZCk7CiAgICAgICAgbGFzdFZvdGVkW2lkXSA9IHBhcnNlSXNvRGF0ZXRpbWUodm90ZWQpLnZhbHVlT2YoKSAvIDEwMDA7CiAgICAgICAgdm90ZVR5cGVzW2lkXSA9IHZvdGVUeXBlOwogICAgICB9CiAgICAgIGVsc2UgewogICAgICAgIG5vVm90ZS5wdXNoKGlkKTsKICAgICAgfQogICAgfQogICAgaWYgKG5vVm90ZS5sZW5ndGggPiAwKSB7CiAgICAgIGFsZXJ0KCJTaG93IEVkaXRlZCBWb3RlczogUG9zdHMgIiArIG5vVm90ZS5qb2luKCIsICIpICsgIiBoYXZlIG5vIHZvdGUgZGF0ZSEiKTsKICAgIH0KICB9CiAgZnVuY3Rpb24gYXBpSGFuZGxlcihkYXRhKSB7CiAgICBjb25zdCBzcGFuRG93bnZvdGUgPSAnPHNwYW4gc3R5bGU9ImNvbG9yOm1hcm9vbjsiPmRvd252b3RlPC9zcGFuPicsCiAgICAgICAgICBzcGFuVXB2b3RlICAgPSAnPHNwYW4gc3R5bGU9ImNvbG9yOmdyZWVuIDsiPiAgdXB2b3RlPC9zcGFuPic7CiAgICBpZiAoZGF0YS5iYWNrb2ZmKSB7CiAgICAgIGFsZXJ0KCJTaG93IEVkaXRlZCBWb3RlczogQmFja2luZyBvZmYgZm9yICIgKyBkYXRhLmJhY2tvZmYgKyAiIHNlY29uZHMiKTsKICAgICAgc2V0VGhyb3R0bGUoRGF0ZS5ub3coKSArIGRhdGEuYmFja29mZik7CiAgICAgIHJldHVybjsKICAgIH0KICAgIAogICAgdmFyIG1vZGlmaWVkID0gW107CiAgICBpZiAoZGF0YS5pdGVtcykgewogICAgICBtb2RpZmllZCA9IGRhdGEuaXRlbXMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7CiAgICAgICAgcmV0dXJuIGl0ZW0ubGFzdF9lZGl0X2RhdGUgJiYgaXRlbS5sYXN0X2VkaXRvciAmJgogICAgICAgICAgICAgICBuZXcgTnVtYmVyKGl0ZW0ubGFzdF9lZGl0X2RhdGUpID4gbGFzdFZvdGVkW2l0ZW0ucG9zdF9pZF0gJiYKICAgICAgICAgICAgICAgaXRlbS5sYXN0X2VkaXRvci51c2VyX2lkICE9IGlkQ3VycmVudFVzZXI7CiAgICAgIH0pOwogICAgfQogICAgLy8gQWRkIHRvIHZpc2libGUgbGlzdAogICAgLy8gVE9ETzogU29ydCBieSBkYXRlIGJlZm9yZSB2b3RlIHR5cGUKICAgIG1vZGlmaWVkLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHsKICAgICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKGxhc3RWb3RlZFtpdGVtLnBvc3RfaWRdICogMTAwMCk7CiAgICAgICAgLy8gVE9ETzogQWRkIGVkaXRlZCBkYXRlIHRvIGRpc3BsYXkKICAgICAgICB0YWJsZS5hcHBlbmQoJzx0cj48dGQ+PGRpdiBjbGFzcz0iZGF0ZV9icmljayIgdGl0bGU9IicgKyAKICAgICAgICAgICAgZGF0ZS50b0xvY2FsZVN0cmluZygpICsgCiAgICAgICAgICAgICciPicgKyAKICAgICAgICAgICAgbW9udGhzW2RhdGUuZ2V0TW9udGgoKV0gKyAiICIgKyBkYXRlLmdldERhdGUoKSArCiAgICAgICAgICAgICc8L2Rpdj48L3RkPjx0ZD4nICsKICAgICAgICAgICAgKCdkb3dudm90ZScgPT0gdm90ZVR5cGVzW2l0ZW0ucG9zdF9pZF0gPyBzcGFuRG93bnZvdGUgOiBzcGFuVXB2b3RlKSArCiAgICAgICAgICAgICc8L3RkPjx0ZD48Yj48YSBocmVmPSInICsKICAgICAgICAgICAgaXRlbS5saW5rICsKICAgICAgICAgICAgJyIgY2xhc3M9ImFuc3dlci1oeXBlcmxpbmsgdGltZWxpbmUtYW5zd2VycyI+JyArCiAgICAgICAgICAgIGl0ZW0udGl0bGUgKwogICAgICAgICAgICAnPC9hPjwvYj48L3RkPjwvdHI+Jyk7CiAgICAgIH0pOwogICAgY291bnRlci50ZXh0KHBhcnNlSW50KGNvdW50ZXIudGV4dCgpKSArIG1vZGlmaWVkLmxlbmd0aCk7CiAgICAKICAgIGlmICgwID09IGRhdGEucXVvdGFfcmVtYWluaW5nKSB7CiAgICAgIGFsZXJ0KCJTaG93IEVkaXRlZCBWb3RlczogT3V0IG9mIHF1b3RhISIpOwogICAgICB3aW5kb3cuY2xlYXJJbnRlcnZhbChpbnRlcnZhbCk7ICAgLy8gRHJvcCB0aGUgcmVzdCBvbiB0aGUgZmxvb3IKICAgICAgLy8gVE9ETz8gU2V0IGRhdGUgZmxhZyB0byBub3QgZXZlbiB0cnkgdW50aWwgdG9tb3Jyb3cKICAgIH0KICB9CgogIC8vIGdldCBhcnJheSB3aXRoIHRpbWVzdGFtcHMgZnJvbSBsb2NhbHN0b3JhZ2UKICBmdW5jdGlvbiBnZXRUaHJvdHRsZSgpIHsKICAgIHZhciBjYWxscyA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgnc2UtdGhyb3R0bGUnKTsKICAgIGlmIChjYWxscyA9PT0gbnVsbCkgewogICAgICBjYWxscyA9IFsgRGF0ZS5ub3coKSBdOwogICAgfSBlbHNlIHsKICAgICAgY2FsbHMgPSBKU09OLnBhcnNlKGNhbGxzKTsKICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNhbGxzKSkgewogICAgICAgICAgY2FsbHMgPSBbIERhdGUubm93KCkgXTsKICAgICAgfQogICAgfQogICAgcmV0dXJuIGNhbGxzOwogIH0KICAKICAvLyB1cGRhdGUgdGltZXN0YW1wIGFycmF5IGZvciB0aHJvdHRsZQogIGZ1bmN0aW9uIHNldFRocm90dGxlKHRpbWUpIHsKICAgIHZhciBjYWxscyA9IGdldFRocm90dGxlKCksCiAgICAgICAgaTsKICAgIAogICAgaWYgKHRpbWUgPT09IHVuZGVmaW5lZCkgewogICAgICAgIHRpbWUgPSBEYXRlLm5vdygpOwogICAgfQogICAgZm9yIChpID0gMDsgKChpIDwgY2FsbHMubGVuZ3RoIC0gMSkgJiYgKGNhbGxzWzBdIDwgRGF0ZS5ub3coKSAtIHBlcikpOyBpKyspIHsKICAgICAgY2FsbHMuc2hpZnQoKTsKICAgIH0KICAgIGlmIChjYWxscy5sZW5ndGggPiByYXRlKSB7CiAgICAgIGNhbGxzLnNoaWZ0KCk7CiAgICB9CiAgICBjYWxscy5wdXNoKHRpbWUpOyAKICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbSgnc2UtdGhyb3R0bGUnLCBKU09OLnN0cmluZ2lmeShjYWxscykpOwogIH0KICAKICAvLyBnZXRzIGNhbGxlZCBieSB0aGUgc2V0SW50ZXJ2YWwKICBmdW5jdGlvbiB0YXNrV29ya2VyKCkgewogICAgdmFyIHVybCA9IHRhc2tzLnNoaWZ0KCksIGpxWEhSOwoKICAgIGlmICh1cmwpIHsKICAgICAgJC5nZXQodXJsKQogICAgICAgIC5kb25lKGZ1bmN0aW9uIChkYXRhKSB7IAogICAgICAgICAgc2V0VGhyb3R0bGUoKTsKICAgICAgICAgIGhhbmRsZXIoZGF0YSk7IAogICAgICAgIH0pCiAgICAgICAgLmZhaWwoZnVuY3Rpb24gKHhociwgc3RhdCwgZXJyb3IpIHsKICAgICAgICAgIC8vIFNlcnZpY2UgVW5hdmFpbGFibGUgbWVhbnMgd2UncmUgdGhyb3R0bGVkLCBwYW5pYwogICAgICAgICAgLy9jb25zb2xlLmxvZyh4aHIpOwogICAgICAgICAgaWYgKHhoci5zdGF0dXMgPT09IDUwMykgewogICAgICAgICAgICAvLyB3YWl0IGEgZnVsbCBtaW51dGUgdG8gZ2V0IGZyZWUKICAgICAgICAgICAgc2V0VGhyb3R0bGUoRGF0ZS5ub3coKSArIHBlbmFsdHkpOyAKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgIH0KICAgIGVsc2UgewogICAgICAvLyBjdXJyZW50IHN0YXRlIGVtcHR5LCB3aGF0J3MgbmV4dD8KICAgICAgc3dpdGNoIChzdGF0ZSkgewogICAgICAgIGNhc2UgInVwdm90ZS1wYWdpbmciOgogICAgICAgICAgc2V0VGhyb3R0bGUoKTsgCiAgICAgICAgICBhZGRGaXJzdFBhZ2UoImRvd252b3RlIik7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlICJkb3dudm90ZS1wYWdpbmciOgogICAgICAgICAgLy8gQVBJIGNhbGxzLCBpZiB0aGVyZSdzIGFueXRoaW5nIHRvIGRvCiAgICAgICAgICBpZiAoaWRzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgc2V0VGhyb3R0bGUoKTsgCiAgICAgICAgICAgIGFkZEFQSUNhbGxzKCk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgfQogICAgICAgIGNhc2UgInVwdm90ZSI6CiAgICAgICAgY2FzZSAiZG93bnZvdGUiOgogICAgICAgICAgaWYgKHZvdGVBZGRQZW5kaW5nQ291bnRlciA8IDEwKSB7CiAgICAgICAgICAgIHZvdGVBZGRQZW5kaW5nQ291bnRlcisrOwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICAgIC8vIGZhbGwgdGhyb3VnaAogICAgICAgIGRlZmF1bHQ6IAogICAgICAgICAgLy8gbm90aGluZyBsZWZ0IHRvIGRvCiAgICAgICAgICBwcm9ncmVzcy5oaWRlKCk7CiAgICAgICAgICBzZXRUaHJvdHRsZSgpOyAKICAgICAgICAgIHdpbmRvdy5jbGVhckludGVydmFsKGludGVydmFsKTsKICAgICAgICAgIGlmICgiQVBJLWNhbGxpbmciICE9IHN0YXRlKSBhbGVydCgiU2hvdyBFZGl0ZWQgVm90ZXM6IEZpbmlzaGVkICciICsgc3RhdGUgKyAiJyBzdGF0ZSB1bmV4cGVjdGVkbHkiKTsKICAgICAgfQogICAgfQogIH0KICAKICAvLyBjaGVjayBpZiB3ZSBhcmUgd2l0aGluIHRoZSB0aHJvdHRsZSBib3VuZGFyaWVzCiAgZnVuY3Rpb24gaXNBbGxvd2VkKCkgewogICAgdmFyIGNhbGxzID0gZ2V0VGhyb3R0bGUoKSwKICAgICAgICB0aW1lcGFzc2VkOwogICAgICAgCiAgICB0aW1lcGFzc2VkID0gRGF0ZS5ub3coKSAtIGNhbGxzWzBdOwogICAgLy9jb25zb2xlLmxvZyh0aW1lcGFzc2VkKTsKICAgIHJldHVybiAoKChjYWxscy5sZW5ndGggPCByYXRlKSB8fCAKICAgICAgICAgICAodGltZXBhc3NlZCA+IHBlcikpICYmIAogICAgICAgICAgIChjYWxsc1tjYWxscy5sZW5ndGgtMV0gPCBEYXRlLm5vdygpKSk7CiAgfQogIAogIC8vIGhhbmRsZSBhIHRhc2sKICBmdW5jdGlvbiB0YXNrKCkgewogICAgaWYgKGlzQWxsb3dlZCgpKSB7CiAgICAgIHRhc2tXb3JrZXIoKTsKICAgIH0gZWxzZSB7CiAgICAgIC8vY29uc29sZS5sb2coJzw8IHRocm90dGxlID4+Jyk7CiAgICB9CiAgfQogIAogIGVkaXRlZEZpbHRlci5jbGljayhmdW5jdGlvbiAoKSB7CiAgICBmaWx0ZXJzLmZpbmQoJy55b3VhcmVoZXJlJykucmVtb3ZlQ2xhc3MoJ3lvdWFyZWhlcmUnKTsKICAgIGVkaXRlZEZpbHRlci5hZGRDbGFzcygneW91YXJlaGVyZScpOwogICAgY291bnRlci5wYXJlbnQoKS5odG1sKCc8c3BhbiBjbGFzcz0iY291bnQiPjA8L3NwYW4+IEVkaXRzIFNpbmNlIFZvdGVzIENhc3QnKTsKICAgIGNvdW50ZXIgPSAkKCdoMSA+IHNwYW4uY291bnQnKS5maXJzdCgpOwogICAgdGFibGUuZW1wdHkoKTsKICAgICQoJy5wYWdlcicpLnJlbW92ZSgpOwogICAgcHJvZ3Jlc3Muc2hvdygpOwogICAgCiAgICBhZGRGaXJzdFBhZ2UoInVwdm90ZSIpOwogICAgaW50ZXJ2YWwgPSB3aW5kb3cuc2V0SW50ZXJ2YWwodGFzaywgaW50ZXJ2YWxUaW1lKTsKICAgIHJldHVybiBmYWxzZTsKICB9KTsKICAKICBlZGl0ZWRGaWx0ZXIuYXBwZW5kKHByb2dyZXNzKTsKICBwcm9ncmVzcy5jc3MoJ21hcmdpbi1sZWZ0JywgJzAuNWVtJyk7CiAgcHJvZ3Jlc3MuaGlkZSgpOwogIGZpbHRlcnMucHJlcGVuZChlZGl0ZWRGaWx0ZXIpOwp9KCQgfHwgdW5zYWZlV2luZG93LiQsIHdpbmRvdyB8fCB1bnNhZmVXaW5kb3cpKTsKICA="},{"name":"SO Time Lines","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":["*://chat.stackoverflow.com/rooms/info/*","*://chat.meta.stackexchange.com/rooms/info/*"],"orig_includes":["*://chat.stackoverflow.com/rooms/*","*://chat.meta.stackexchange.com/rooms/*","*://chat.stackexchange.com/rooms/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1461159934919,"data":{}},"enabled":true,"position":20,"file_url":"https://raw.githubusercontent.com/Aralun/SO-chat-things/master/message_timelines/message_timelines.user.js","uuid":"a60e5c81-dcb5-47d0-9c34-d9b4edb4b869","source":""},{"name":"Frequent Message Manager","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://chat.stackoverflow.com/rooms/*","http://chat.meta.stackoverflow.com/rooms/*","http://chat.stackexchange.com/rooms/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1461202447675,"data":{}},"enabled":true,"position":21,"file_url":"http://files.quickmediasolutions.com/userscripts/message_manager.user.js","uuid":"a581179d-0e49-47cb-a0ef-1575b3c4a9fd","source":""},{"name":"Highlight Code in Chat","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://chat.stackoverflow.com/rooms/*","http://chat.stackoverflow.com/transcript/*","http://chat.meta.stackoverflow.com/rooms/*","http://chat.meta.stackoverflow.com/transcript/*","http://chat.stackexchange.com/rooms/*","http://chat.stackexchange.com/transcript/*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1461202722012,"data":{}},"enabled":true,"position":22,"file_url":"http://files.quickmediasolutions.com/userscripts/code_highlight.user.js","uuid":"d8003815-268a-4034-bf35-9a9392ef02a7","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgSGlnaGxpZ2h0IENvZGUgaW4gQ2hhdAovLyBAYXV0aG9yICAgICAgICBOYXRoYW4gT3NtYW4KLy8gQHZlcnNpb24gICAgICAgMS4wCi8vIEBuYW1lc3BhY2UgICAgIGh0dHA6Ly9xdWlja21lZGlhc29sdXRpb25zLmNvbQovLyBAZGVzY3JpcHRpb24gICBIaWdobGlnaHRzIDxjb2RlPiBlbGVtZW50cyBjb250YWluZWQgaW4gY2hhdCBtZXNzYWdlcy4KLy8gQGluY2x1ZGUgICAgICAgaHR0cDovL2NoYXQuc3RhY2tvdmVyZmxvdy5jb20vcm9vbXMvKgovLyBAaW5jbHVkZSAgICAgICBodHRwOi8vY2hhdC5zdGFja292ZXJmbG93LmNvbS90cmFuc2NyaXB0LyoKLy8gQGluY2x1ZGUgICAgICAgaHR0cDovL2NoYXQubWV0YS5zdGFja292ZXJmbG93LmNvbS9yb29tcy8qCi8vIEBpbmNsdWRlICAgICAgIGh0dHA6Ly9jaGF0Lm1ldGEuc3RhY2tvdmVyZmxvdy5jb20vdHJhbnNjcmlwdC8qCi8vIEBpbmNsdWRlICAgICAgIGh0dHA6Ly9jaGF0LnN0YWNrZXhjaGFuZ2UuY29tL3Jvb21zLyoKLy8gQGluY2x1ZGUgICAgICAgaHR0cDovL2NoYXQuc3RhY2tleGNoYW5nZS5jb20vdHJhbnNjcmlwdC8qCi8vID09L1VzZXJTY3JpcHQ9PQoKLyogRW1iZWQgdGhlIHN0eWxlIHJ1bGUgb24gdGhlIHBhZ2UuICovCnZhciBzdHlsZV9lbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKc3R5bGVfZWxlbWVudC50eXBlID0gJ3RleHQvY3NzJzsKc3R5bGVfZWxlbWVudC50ZXh0Q29udGVudCA9CiAgICAnLmNvbnRlbnQgPiBjb2RlIHsnICsKICAgICcgIGJhY2tncm91bmQtY29sb3I6IHJnYmEoMCwgMCwgMCwgMC4xKTsnICsKICAgICcgIGJvcmRlci1yYWRpdXM6IDNweDsnICsKICAgICcgIHBhZGRpbmc6IDRweDsnICsKICAgICd9JyArCiAgICAnLmNvbnRlbnQgPiBwcmUgeycgKwogICAgJyAgYm9yZGVyLWxlZnQ6IDhweCBzb2xpZCByZ2JhKDAsIDAsIDAsIDAuMSk7JyArCiAgICAnICBwYWRkaW5nLWxlZnQ6IDEycHg7JyArCiAgICAnfSc7CmRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc3R5bGVfZWxlbWVudCk7Cg=="},{"name":"SO link to JavaScript tag","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":true,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["/^https?:\\/\\/\\w*.?stackoverflow.com\\/.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null},"storage":{"ts":1461360705003,"data":{}},"enabled":true,"position":23,"uuid":"de06b716-31df-49bd-91ce-6e8123730c86","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTTyBsaW5rIHRvIEphdmFTY3JpcHQgdGFnCi8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS91c2Vycy81Mjk5MjM2L2tldmluLWd1YW4KLy8gQGF1dGhvciAgICAgICBLZXZpbgovLyBAZGVzY3JpcHRpb24gIENoYW5nZSB0aGUgbGluayBvZiBTdGFjayBPdmVyZmxvdyBtYWluIGxvZ28uCi8vIEB2ZXJzaW9uICAgICAgMC4yCi8vIEBpbmNsdWRlICAgICAgL15odHRwcz86XC9cL1x3Ki4/c3RhY2tvdmVyZmxvdy5jb21cLy4qLwovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2JhYmVsLWNvcmUvNS42LjE1L2Jyb3dzZXItcG9seWZpbGwubWluLmpzCi8vIEByZXF1aXJlICAgICAgaHR0cHM6Ly9jZG5qcy5jbG91ZGZsYXJlLmNvbS9hamF4L2xpYnMvYmFiZWwtY29yZS81LjYuMTUvYnJvd3Nlci5taW4uanMKLy8gPT0vVXNlclNjcmlwdD09CgovKiBqc2hpbnQgaWdub3JlOnN0YXJ0ICovCnZhciBpbmxpbmVfc3JjID0gKDw+PCFbQ0RBVEFbCi8qIGpzaGludCBpZ25vcmU6ZW5kICovCi8qIGpzaGludCBlc25leHQ6IHRydWUgKi8KCmNvbnN0IGxvZ28gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaGxvZ28nKTsKbG9nby5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpWzBdLmhyZWYgPSAnL3F1ZXN0aW9ucy90YWdnZWQvamF2YXNjcmlwdCc7CgoKLyoganNoaW50IGlnbm9yZTpzdGFydCAqLwpdXT48Lz4pLnRvU3RyaW5nKCk7CnZhciBjID0gYmFiZWwudHJhbnNmb3JtKGlubGluZV9zcmMpOwpldmFsKGMuY29kZSk7Ci8qIGpzaGludCBpZ25vcmU6ZW5kICov"},{"name":"cv-pls preview","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"override":{"merge_connects":true,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_connects":[],"orig_excludes":[],"orig_includes":["http://chat.stackoverflow.com/rooms/41570/so-close-vote-reviewers"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_blockers":[],"use_connects":[],"use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"ts":1461933818988,"data":{}},"enabled":true,"position":24,"uuid":"815ad2b0-9ae5-4592-9f0d-bc302d05790e","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIGN2LXBscyBwcmV2aWV3Ci8vIEBuYW1lc3BhY2UgICBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzUyOTkyMzYva2V2aW4tZ3VhbgovLyBAYXV0aG9yICAgICAgS2V2aW4KLy8gQGRlc2NyaXB0aW9uIFByZXZpZXcgZXZlcnkgYGN2LXBsc2AgcmVxdWVzdHMgaW4gU09DVlI7IHRoZSBjb2RlIGlzIGJhc2VkIG9uIHN0YWNrYXBwcy5jb20vcS82NzM3Ci8vIEBpbmNsdWRlICAgICBodHRwOi8vY2hhdC5zdGFja292ZXJmbG93LmNvbS9yb29tcy80MTU3MC9zby1jbG9zZS12b3RlLXJldmlld2VycwovLyBAdmVyc2lvbiAgICAgMi4yCi8vIEBncmFudCAgICAgICBHTV9nZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgR01fc2V0VmFsdWUKLy8gPT0vVXNlclNjcmlwdD09CgoKdW5zYWZlV2luZG93LnNwX2xvYWQgPSBHTV9nZXRWYWx1ZTsKdW5zYWZlV2luZG93LnNwX3NhdmUgPSBHTV9zZXRWYWx1ZTsKCnZhciBsYXN0VXNlcjsKdmFyIHRhcmdldCA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdjaGF0Jyk7Cgp2YXIgbXNnR3JvdXBPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKG11dGF0aW9ucykgewogICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHsKICAgICAgICBpZihtdXRhdGlvbi5hZGRlZE5vZGVzLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgcHJvY2Vzc01lc3NhZ2VOb2RlKG11dGF0aW9uLmFkZGVkTm9kZXNbMF0pOwogICAgICAgIH0KICAgIH0pOwp9KTsKCnZhciBuZXdNc2dPYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKG11dGF0aW9ucykgewogICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHsKICAgICAgICB0cnkgewogICAgICAgICAgICAvLyB0aGUgbGFzdCBncm91cCBpcyBub3QgaW50ZXJlc3RpbmcgYW55bW9yZSBzaW5jZSB0aGVyZSBpcyBhIG5ldyBncm91cAogICAgICAgICAgICBtc2dHcm91cE9ic2VydmVyLmRpc2Nvbm5lY3QoKTsKICAgICAgICB9IGNhdGNoKGUpIHt9CiAgICAgICAgLy8gcHJvY2VzcyB0aGUgbmV3IG1lc3NhZ2UKICAgICAgICBwcm9jZXNzTmV3TWVzc2FnZShtdXRhdGlvbik7CiAgICAgICAgdmFyIG1lc3NhZ2VMaXN0ID0gdGFyZ2V0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIm1lc3NhZ2VzIik7CiAgICAgICAgdmFyIGxhc3RNZXNzYWdlID0gbWVzc2FnZUxpc3RbbWVzc2FnZUxpc3QubGVuZ3RoIC0gMV07CiAgICAgICAgbXNnR3JvdXBPYnNlcnZlci5vYnNlcnZlKGxhc3RNZXNzYWdlLCBvYnNlcnZlckNvbmZpZyk7CiAgICB9KTsKfSk7CgpmdW5jdGlvbiBwcm9jZXNzTmV3TWVzc2FnZShtdXRhdGlvbikgewogICAgdHJ5IHsKICAgICAgICBsYXN0VXNlciA9IG11dGF0aW9uLmFkZGVkTm9kZXNbMF0uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgidXNlcm5hbWUiKVswXS5pbm5lckhUTUw7CiAgICAgICAgdmFyIG1lc3NhZ2UgPSBtdXRhdGlvbi5hZGRlZE5vZGVzWzBdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImNvbnRlbnQiKVswXTsKICAgICAgICBvbk1lc3NhZ2UobGFzdFVzZXIsIG1lc3NhZ2UpOwogICAgfSBjYXRjaChlKSB7fQp9CgpmdW5jdGlvbiBwcm9jZXNzTWVzc2FnZU5vZGUobm9kZSkgewogICAgdHJ5IHsKICAgICAgICB2YXIgbWVzc2FnZSA9IG5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiY29udGVudCIpWzBdOwogICAgICAgIG9uTWVzc2FnZShsYXN0VXNlciwgbWVzc2FnZSk7CiAgICB9IGNhdGNoKGUpIHt9Cn0KCmZ1bmN0aW9uIG9uTWVzc2FnZSh1c2VyLCBtc2cpIHsKICAgIGlmKG1zZy5pbm5lckhUTUwuaW5kZXhPZignc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zL3RhZ2dlZC9jdi1wbHMnKSA+IDAgJiYgbXNnLmlubmVySFRNTC5pbmRleE9mKCc8YSBocmVmPSJodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20nKSA+IDApIHsKICAgICAgICB2YXIgcG9zdCA9IG1zZy5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYSIpWzFdLmhyZWY7CiAgICAgICAgdmFyIGlkID0gcG9zdC5zcGxpdCgnLycpWzRdOwoKICAgICAgICB2YXIgdGFnID0gJzxkaXYgaWQ9ImN2cGxzJyArIGlkICsgJyIgY2xhc3M9Im9uZWJveCBvYi1wb3N0IiBzdHlsZT0ib3ZlcmZsb3cteTphdXRvOyBtYXgtaGVpZ2h0OjE1MHB4OyBtYXJnaW4tYm90dG9tOjJlbSI+PC9kaXY+JzsKICAgICAgICBpZihkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY3ZwbHMnICsgaWQpID09PSBudWxsKSB7CiAgICAgICAgICAgIG1zZy5pbm5lckhUTUwgKz0gdGFnOwogICAgICAgIH0KCiAgICAgICAgbG9hZFByZXZpZXcoaWQpOwogICAgfQp9CgpmdW5jdGlvbiBsb2FkUHJldmlldyhpZCkgewogICAgdmFyIHVybCA9ICJodHRwOi8vYXBpLnN0YWNrZXhjaGFuZ2UuY29tLzIuMi9xdWVzdGlvbnMvIiArIGlkICsgIj9zaXRlPXN0YWNrb3ZlcmZsb3cmZmlsdGVyPSEpUTJCKF9YWFRJYmJKWXA3S284TCllU3giOwogICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwogICAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7CiAgICB4aHIub25sb2FkID0gc2hvd1ByZXZpZXc7CiAgICB4aHIuaWQgPSBpZDsKICAgIHhoci5zZW5kKCk7Cn0KCmZ1bmN0aW9uIHNob3dQcmV2aWV3KHJlc3BvbnNlKSB7CiAgICB2YXIgcmVzcCA9IEpTT04ucGFyc2UodGhpcy5yZXNwb25zZSk7CiAgICBpZihyZXNwLml0ZW1zLmxlbmd0aCA9PT0gMCkgewogICAgICAgIHZhciBlbGVtID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImN2cGxzIiArIHRoaXMuaWQpOwogICAgICAgIGVsZW0uc3R5bGUuZGlzcGxheSA9ICJub25lIjsKICAgICAgICBlbGVtLnBhcmVudE5vZGUuc3R5bGUub3BhY2l0eSA9IDAuNTsKICAgIH0gZWxzZSB7CiAgICAgICAgdmFyIHBvc3QgPSByZXNwLml0ZW1zWzBdOwogICAgICAgIHZhciB0YWdzID0gJzxkaXYgY2xhc3M9Im9iLXBvc3QtdGFncyI+JzsKICAgICAgICBwb3N0LnRhZ3MuZm9yRWFjaChmdW5jdGlvbih0YWcpIHsKICAgICAgICAgICAgdGFncyArPSAnPGEgaHJlZj0iLy9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvdGFnZ2VkLycgKyB0YWcgKwogICAgICAgICAgICAnIj4gPHNwYW4gY2xhc3M9Im9iLXBvc3QtdGFnIiBzdHlsZT0iYmFja2dyb3VuZC1jb2xvcjogI0UwRUFGMTsgJyArCiAgICAgICAgICAgICdjb2xvcjogIzNFNkQ4RTsgYm9yZGVyLWNvbG9yOiAjM0U2RDhFOyBib3JkZXItc3R5bGU6IHNvbGlkOyI+JyArIHRhZyArICc8L3NwYW4+PC9hPic7CiAgICAgICAgfSk7CiAgICAgICAgdGFncyArPSAnPC9kaXY+JzsKCiAgICAgICAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoImN2cGxzIiArIHRoaXMuaWQpLmlubmVySFRNTCA9CiAgICAgICAgICAgICc8ZGl2IHRpdGxlPSJUaGlzIHF1ZXN0aW9uIGhhcyBhIHNjb3JlIG9mICcgKyBwb3N0LnNjb3JlICsKICAgICAgICAgICAgJy4iIGNsYXNzPSJvYi1wb3N0LXZvdGVzIj4nICsgcG9zdC5zY29yZSArICc8L2Rpdj48aW1nIHdpZHRoPSIyMCcgKwogICAgICAgICAgICAnIiBoZWlnaHQ9IjIwIiBjbGFzcz0ib2ItcG9zdC1zaXRlaWNvbiIgc3JjPScgKwogICAgICAgICAgICAnIi8vY2RuLnNzdGF0aWMubmV0L1NpdGVzL3N0YWNrb3ZlcmZsb3cvaW1nL2FwcGxlLXRvdWNoLWljb24ucG5nJyArCiAgICAgICAgICAgICciIHRpdGxlPSJTdGFjayBPdmVyZmxvdyI+IDxkaXYgY2xhc3M9Im9iLXBvc3QtdGl0bGUiPiBROiA8YSBocmVmPSInICsgcG9zdC5saW5rICsKICAgICAgICAgICAgJyIgc3R5bGU9ImNvbG9yOiAjNEU4MkMyOyI+JyArIHBvc3QudGl0bGUgKyAnPC9hPjwvZGl2PjxwIGNsYXNzPSJvYi1wb3N0LWJvZHkiPjxpbWcgd2lkdGg9IjMyJyArCiAgICAgICAgICAgICciIGhlaWdodD0iMzIiIGFsdD0iJyArIHBvc3Qub3duZXIuZGlzcGxheV9uYW1lICsKICAgICAgICAgICAgJyIgdGl0bGU9IicgKyBwb3N0Lm93bmVyLmRpc3BsYXlfbmFtZSArICciIHNyYz0iJyArIHBvc3Qub3duZXIucHJvZmlsZV9pbWFnZSArCiAgICAgICAgICAgICciIGNsYXNzPSJ1c2VyLWdyYXZhdGFyMzIiPicgKyBwb3N0LmJvZHkgKyAnPC9wPicgKyB0YWdzOwogICAgfQp9CgovLyBzZXR1cCB0aGUgb2JzZXJ2ZXIgY29uZmlndXJhdGlvbgp2YXIgb2JzZXJ2ZXJDb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9OwoKd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbigpIHsKICAgIHZhciBtZXNzYWdlTGlzdCA9IHRhcmdldC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJtZXNzYWdlcyIpOwogICAgdmFyIGxhc3RNZXNzYWdlID0gbWVzc2FnZUxpc3RbbWVzc2FnZUxpc3QubGVuZ3RoIC0gMV07CiAgICBtc2dHcm91cE9ic2VydmVyLm9ic2VydmUobGFzdE1lc3NhZ2UsIG9ic2VydmVyQ29uZmlnKTsKICAgIG5ld01zZ09ic2VydmVyLm9ic2VydmUodGFyZ2V0LCBvYnNlcnZlckNvbmZpZyk7CgogICAgdmFyIG5pY2sgPSB0YXJnZXQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgidXNlcm5hbWUiKTsKICAgIGxhc3RVc2VyID0gbmljay5sZW5ndGggPiAwCiAgICAgICAgPyBuaWNrW25pY2subGVuZ3RoIC0gMV0uaW5uZXJIVE1MCiAgICAgICAgOiAidW5rbm93biI7CgogICAgICAgIC8vIHBhcnNlIGV4aXN0aW5nIG1lc3NhZ2VzCiAgICAgICAgdmFyIG1lc3NhZ2VCbG9ja3MgPSB0YXJnZXQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgidXNlci1jb250YWluZXIiKTsKICAgICAgICBmb3IodmFyIGkgPSAwLCBtZXNzYWdlQmxvY2tzTGVuZ3RoID0gbWVzc2FnZUJsb2Nrcy5sZW5ndGg7IGkgPCBtZXNzYWdlQmxvY2tzTGVuZ3RoOyBpKyspIHsKICAgICAgICAgICAgdmFyIHVzZXIgPSBtZXNzYWdlQmxvY2tzW2ldLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoInVzZXJuYW1lIilbMF0uaW5uZXJIVE1MOwogICAgICAgICAgICB2YXIgbWVzc2FnZXMgPSBtZXNzYWdlQmxvY2tzW2ldLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIm1lc3NhZ2UiKTsKICAgICAgICAgICAgZm9yKHZhciBqID0gMCwgbWVzc2FnZXNMZW5ndGggPSBtZXNzYWdlcy5sZW5ndGg7IGogPCBtZXNzYWdlc0xlbmd0aDsgaisrKSB7CiAgICAgICAgICAgICAgICB2YXIgbWVzc2FnZSA9IG1lc3NhZ2VzW2pdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImNvbnRlbnQiKVswXTsKICAgICAgICAgICAgICAgIG9uTWVzc2FnZSh1c2VyLCBtZXNzYWdlKTsKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogICAgICAgIHNjcmlwdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnKCcgKyBwdWJsaWNBcGkgKyAnKSgpOycpKTsKICAgICAgICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKfSwgZmFsc2UpOw=="}]}