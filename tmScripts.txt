{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Stack Exchange CV Request Generator","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/\\w*.?(stackexchange.com|stackoverflow.com|serverfault.com|superuser.com|askubuntu.com|stackapps.com|mathoverflow.net)\\/q(uestions)?\\/\\d+/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1448203128163},"enabled":true,"position":1,"file_url":"https://rawgit.com/SO-Close-Vote-Reviewers/UserScripts/master/SECloseVoteRequestGenerator.user.js","uuid":"92eb7581-a2c9-462d-af44-7eb8c903f8cb","source":""},{"name":"stackoverflow-comment-reply","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://stackoverflow.com/*","*://serverfault.com/*","*://superuser.com/*","*://meta.stackoverflow.com/*","*://meta.serverfault.com/*","*://meta.superuser.com/*","*://stackapps.com/*","*://*.stackexchange.com/*","*://askubuntu.com/*","*://meta.askubuntu.com/*","*://answers.onstartups.com/*","*://meta.answers.onstartups.com/*","*://mathoverflow.net/*","*://area51.stackexchange.com/proposals/*"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1448203128208},"enabled":true,"position":2,"file_url":"https://bitbucket.org/balpha/user-scripts/raw/tip/comment-reply-links/comment-reply-links.user.js","uuid":"b30320e8-9e48-4191-9a0a-15f6c81e1d21","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIHN0YWNrb3ZlcmZsb3ctY29tbWVudC1yZXBseQovLyBAbmFtZXNwYWNlICAgICAgc3RhY2tvdmVyZmxvdwovLyBAZGVzY3JpcHRpb24gICAgQWRkICJyZXBseSIgbGlua3MgdG8gY29tbWVudHMKLy8gQHZlcnNpb24gICAgICAgIDEuMQovLyBAbWF0Y2ggICAgICAgICAgKjovL3N0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9zZXJ2ZXJmYXVsdC5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL3N1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuc3RhY2tvdmVyZmxvdy5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuc2VydmVyZmF1bHQuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9tZXRhLnN1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL3N0YWNrYXBwcy5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL2Fza3VidW50dS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuYXNrdWJ1bnR1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAqOi8vYW5zd2Vycy5vbnN0YXJ0dXBzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAqOi8vbWV0YS5hbnN3ZXJzLm9uc3RhcnR1cHMuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9tYXRob3ZlcmZsb3cubmV0LyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9hcmVhNTEuc3RhY2tleGNoYW5nZS5jb20vcHJvcG9zYWxzLyoKLy8gQGF1dGhvciAgICAgICAgIEJlbmphbWluIER1bWtlLXZvbiBkZXIgRWhlCi8vID09L1VzZXJTY3JpcHQ9PQoKLy8gVGhhbmtzIHRvIFNob2c5IGZvciB0aGlzIGlkZWEgZm9yIG1ha2luZyB0aGUgc2NyaXB0IHdvcmsgaW4gYm90aAovLyBDaHJvbWUgYW5kIEZpcmVmb3g6Ci8vIGh0dHA6Ly9tZXRhLnN0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80NjU2MgpmdW5jdGlvbiB3aXRoX2pxdWVyeShmKSB7CiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogICAgc2NyaXB0LnRleHRDb250ZW50ID0gIigiICsgZi50b1N0cmluZygpICsgIikoalF1ZXJ5KSI7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7Cn07Cgp3aXRoX2pxdWVyeShmdW5jdGlvbigkKSB7CiAgICAgICAgCiAgICAkKGRvY3VtZW50KS5hamF4Q29tcGxldGUoZnVuY3Rpb24oKXsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiLmNvbW1lbnRzIikuZWFjaChwdXRfcmVwbHlfbGlua3MpOwogICAgICAgIH0sIDEwMCk7CiAgICB9KTsKICAgICAgICAKICAgIC8vIGV2ZW50IGhhbmRsZXIgZm9yIGEgY2xpY2sgb24gdGhlIHJlcGx5IGxpbmtzCiAgICBmdW5jdGlvbiByZXBseSgpIHsKICAgICAgICB2YXIgY29tbWVudGxpbmsgPSAkKHRoaXMpLmNsb3Nlc3QoIi5jb21tZW50cyIpLm5leHQoKS5jbGljaygpOwogICAgICAgIHZhciBjb21tZW50bGlua0lkID0gY29tbWVudGxpbmsuYXR0cigiaWQiKTsKICAgICAgICB2YXIgdXNlcm5hbWUgPSBnb29kaWZ5KCQodGhpcykucHJldigpLnRleHQoKS5yZXBsYWNlKC/imaYvLCAiIikpCiAgICAgICAgdmFyIGZvcm1pZCA9IGNvbW1lbnRsaW5rSWQucmVwbGFjZSgvXi4qLShcZCspJC8sICJhZGQtY29tbWVudC0kMSIpOwogICAgICAgIHZhciB0YSA9ICQoIiMiICsgZm9ybWlkICsgIiB0ZXh0YXJlYSIpWzBdOwogICAgICAgIHZhciBzdGFydCA9IHRhLnNlbGVjdGlvblN0YXJ0OwogICAgICAgIHZhciBlbmQgPSB0YS5zZWxlY3Rpb25FbmQ7CiAgICAgICAgdmFyIHNoaWZ0ID0gdXNlcm5hbWUubGVuZ3RoICsgMzsKICAgICAgICB0YS52YWx1ZSA9ICJAIiArIHVzZXJuYW1lICsgIjogIiArIHRhLnZhbHVlOwogICAgICAgIHRhLmZvY3VzKCk7CiAgICAgICAgdGEuc2VsZWN0aW9uU3RhcnQgPSBzdGFydCArIHNoaWZ0OwogICAgICAgIHRhLnNlbGVjdGlvbkVuZCA9IGVuZCArIHNoaWZ0OwogICAgfTsKCiAgICBmdW5jdGlvbiBwdXRfcmVwbHlfbGlua3MoKSB7CiAgICAgICAgJCh0aGlzKS5maW5kKCIuY29tbWVudDpub3QoOmhhcygucmVwbHktbGluaykpIC5jb21tZW50LXVzZXIiKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiPHNwYW4gY2xhc3M9J3JlcGx5LWxpbmsnIHN0eWxlPSdjdXJzb3I6cG9pbnRlcjsnIHRpdGxlPSdyZXBseSc+ICZjcmFycjs8L3NwYW4+IikuY2xpY2socmVwbHkpLmluc2VydEFmdGVyKHRoaXMpOwogICAgICAgIH0pOwogICAgfQogICAgICAgICAgICAKICAgICQoIi5jb21tZW50cyIpLmVhY2gocHV0X3JlcGx5X2xpbmtzKTsKICAgIAogICAgZnVuY3Rpb24gZ29vZGlmeShzKSB7CiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvICsvZywgIiIpOwogICAgfSAgCiAgICAKfSk7"},{"name":"Stack Exchange like I like it","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["/^https?:\\/\\/(chat|blog|careers)\\..*/"],"orig_includes":[],"orig_matches":["*://stackexchange.com/*","*://*.stackexchange.com/*/*","*://stackoverflow.com/*/*","*://*.stackoverflow.com/*/*","*://stackapps.com/*/*","*://serverfault.com/*/*","*://superuser.com/*/*","*://askubuntu.com/*/*","*://mathoverflow.net/*/*"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1448203128217},"enabled":true,"position":3,"file_url":"https://github.com/calraith/gm_scripts/raw/master/se_like_I_like_it.user.js","uuid":"a490bb56-67fc-4b13-ba27-3ac98ef75e75","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFN0YWNrIEV4Y2hhbmdlIGxpa2UgSSBsaWtlIGl0Ci8vIEBuYW1lc3BhY2UgICBodHRwOi8vc3RhY2thcHBzLm9yZy8KLy8gQGRlc2NyaXB0aW9uIERvdWJsZS1jbGljayBhIGNvZGUgYmxvY2sgdG8gc2VsZWN0IGFsbCArIGVkaXQgYm94IGF1dG8gaW5kZW50IC8gdGFiIGtleSBiZWhhdmlvciBlbmhhbmNlbWVudHMKLy8gQG1hdGNoCQkqOi8vc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2gJCSo6Ly8qLnN0YWNrZXhjaGFuZ2UuY29tLyovKgovLyBAbWF0Y2gJCSo6Ly9zdGFja292ZXJmbG93LmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vKi5zdGFja292ZXJmbG93LmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vc3RhY2thcHBzLmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vc2VydmVyZmF1bHQuY29tLyovKgovLyBAbWF0Y2gJCSo6Ly9zdXBlcnVzZXIuY29tLyovKgovLyBAbWF0Y2gJCSo6Ly9hc2t1YnVudHUuY29tLyovKgovLyBAbWF0Y2gJCSo6Ly9tYXRob3ZlcmZsb3cubmV0LyovKgovLyBAZXhjbHVkZSAgICAgL15odHRwcz86XC9cLyhjaGF0fGJsb2d8Y2FyZWVycylcLi4qLwovLyBAdmVyc2lvbiAgICAgMS41LjEKLy8gQGRvd25sb2FkVVJMCWh0dHBzOi8vZ2l0aHViLmNvbS9jYWxyYWl0aC9nbV9zY3JpcHRzL3Jhdy9tYXN0ZXIvc2VfbGlrZV9JX2xpa2VfaXQudXNlci5qcwovLyBAZ3JhbnQgICAgICAgR01faW5mbwovLyA9PS9Vc2VyU2NyaXB0PT0KCi8vIFwvLisvCnZhciBrZXkgPSB7Cgl0YWI6IDksCgllbnRlcjogMTMsCgllbmQ6IDM1LAoJaG9tZTogMzYsCgljb2RlOiAwLAoJaGlzdG9yeTogWzAsMF0sCgljb250YWluczogZnVuY3Rpb24od2hhdCkgewoJCS8vIGZhc3Rlc3QgbG9vcCBtZXRob2QgZm9yIHRoaXMgYXBwbGljYXRpb24KCQkvLyBzZWUgaHR0cDovL2pzcGVyZi5jb20vb2JqZWN0LWl0ZXJhdGlvbi1saWtlLWEtYm9zcwoJCWZvciAodmFyIGkgaW4gdGhpcykgewoJCQlpZiAoaSA9PT0gJ2NvZGUnKSByZXR1cm4gZmFsc2U7CgkJCWlmICh0aGlzW2ldID09PSB3aGF0KSByZXR1cm4gdHJ1ZTsKCQl9Cgl9Cn07CgpmdW5jdGlvbiBmaXhUYWJzKGUpIHsKCWUgPSBlIHx8IGV2ZW50OwoJa2V5LmNvZGUgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTsKCgkvLyBjYXB0dXJlIHRoaXMgKyBwcmV2aW91cyBrZXkgY29kZSB0byBkZXRlY3QgZG91YmxlIGhvbWUgb3IgZW5kCglrZXkuaGlzdG9yeS5wdXNoKGtleS5jb2RlKTsKCWtleS5oaXN0b3J5LnNoaWZ0KCk7CgoJaWYgKCFrZXkuY29udGFpbnMoa2V5LmNvZGUpKSByZXR1cm47CS8vIG5vdCBhIGNoYXJhY3RlciB0aGlzIHNjcmlwdCBoYW5kbGVzCgoJdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDsKCWlmIChlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAndGV4dGFyZWEnKSByZXR1cm47CS8vIG5vdCBpbiBhIHRleHRhcmVhCglpZiAoZWwubmFtZSA9PSAnY29tbWVudCcpIHJldHVybjsJLy8gbm90IGFuIGVkaXQgZW50cnkgYm94CgoJLy8gQWxsIHN5c3RlbXMgZ28hCgl2YXIgc3RhcnQgPSBlbC5zZWxlY3Rpb25TdGFydCwKCQllbmQgPSBlbC5zZWxlY3Rpb25FbmQsCgkJc2hpZnRTdGFydCA9IHNoaWZ0RW5kID0gMCwKCQkvLyBpbmRlbnQgcmVnZXhwIHJlcGxhY2VtZW50IGZ1bmN0aW9uCgkJdGFiRmlsbCA9IGZ1bmN0aW9uKG1hdGNoLCAkMSwgb2Zmc2V0KSB7CgkJCWZvciAodmFyIGk9MCwgcmV0PScnLCBsZW49bWF0Y2gubGVuZ3RoLCBtPWxlbiAvIDQ7IGk8bTsgaSsrKSByZXQgKz0gJ1x0JzsKCQkJLy8gY29tcGVuc2F0ZSBmb3IgY3Vyc29yIGRyaWZ0CgkJCWlmIChvZmZzZXQgPCBzdGFydCkgewoJCQkJc2hpZnRTdGFydCAtPSAobGVuIC0gaSk7CgkJCQlpZiAob2Zmc2V0ICsgbGVuID4gc3RhcnQpIHNoaWZ0U3RhcnQgKz0gb2Zmc2V0ICsgbGVuIC0gc3RhcnQ7CgkJCX0KCQkJaWYgKG9mZnNldCA8IGVuZCkgewoJCQkJc2hpZnRFbmQgLT0gKGxlbiAtIGkpOwoJCQkJaWYgKG9mZnNldCArIGxlbiA+IGVuZCkgc2hpZnRFbmQgKz0gb2Zmc2V0ICsgbGVuIC0gZW5kOwoJCQl9CgkJCXJldHVybiByZXQ7CgkJfTsKCgkvLyBSZXBsYWNlIHNwYWNlIGluZGVudHMgd2l0aCB0YWJzLgoJZWwudmFsdWUgPSBlbC52YWx1ZS5yZXBsYWNlKC8oPzpeXHQqKSggezR9KSsvbWcsIHRhYkZpbGwpOwoJaWYgKHNoaWZ0U3RhcnQpIHsKCQlzdGFydCArPSBzaGlmdFN0YXJ0OyBlbmQgKz0gc2hpZnRFbmQ7CgkJZWwuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIGVuZCk7Cgl9CgoJc2VsZWN0ZWQgPSBlbC52YWx1ZS5zdWJzdHJpbmcoc3RhcnQsIGVuZCk7Cgl2YXIgaW5wdXRBcnIgPSBlbC52YWx1ZS5zcGxpdCgnXG4nKTsKCgkvLyBpbnB1dEFycltyb3ddIGNvbnRhaW5zIHN0YXJ0LCBhbmQgcG9zIGNvbnRhaW5zIHRoZSBpZHggb2YgdGhlIGxhc3QgY2hhciBvZiB0aGUgcHJldmlvdXMgbGluZQoJZm9yICh2YXIgcm93PXBvcz0wO3BvcytpbnB1dEFycltyb3ddLmxlbmd0aDxzdGFydDtyb3crKyl7cG9zKz1pbnB1dEFycltyb3ddLmxlbmd0aCsxfQoKCXN3aXRjaCAoa2V5LmNvZGUpIHsKCgkJY2FzZSBrZXkudGFiOgoKCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoKCQkJLy8gaWYgc2VsZWN0aW9uIHNwYW5zIG1vcmUgdGhhbiBvbmUgbGluZQoJCQlpZiAoc2VsZWN0ZWQuaW5kZXhPZignXG4nKSA+IC0xKSB7CgkJCQkvLyBjb3VudCBudW1iZXIgb2Ygcm93cyBpbmNsdWRlZCBpbiBzZWxlY3Rpb24KCQkJCXZhciByb3dzU2VsZWN0ZWQgPSBzZWxlY3RlZC5zcGxpdCgnXG4nKS5sZW5ndGg7CgoJCQkJLy8gZXhwYW5kIHNlbGVjdGlvbiB0byBjb3ZlciBiZWdpbm5pbmcgb2Ygc3RhcnQgcm93IHVudGlsIGVuZCBvZiBlbmQgcm93CgkJCQkvLyByZXBsYWNlIGFsbCA0LXNwYWNlIHNlcXVlbmNlcyB3aXRoIGEgdGFiIGFuZCB1cGRhdGUgcG9zaXRpb24gaW5kZXhlcwoJCQkJLy8gaWYgc2hpZnQga2V5LCByZW1vdmUgb25lIGxldmVsIG9mIGluZGVudCBwZXIgc2VsZWN0ZWQgcm93OyBvdGhlcndpc2UsIGFkZCBhIGxldmVsIG9mIGluZGVudC4KCQkJCWZvciAoc3RhcnQgPSBwb3MsIHN0b3AgPSByb3cgKyByb3dzU2VsZWN0ZWQ7IHJvdyA8IHN0b3A7IHJvdysrKSB7CgkJCQkJaW5wdXRBcnJbcm93XSA9IChlLnNoaWZ0S2V5KSA/IGlucHV0QXJyW3Jvd10ucmVwbGFjZSgvXiggezR9fFx0KS8sJycpIDogJ1x0JyArIGlucHV0QXJyW3Jvd107CgkJCQkJcG9zKz1pbnB1dEFycltyb3ddLmxlbmd0aCArIDE7CgkJCQl9CgkJCQllbmQgPSAtLXBvczsKCQkJCWVsLnZhbHVlID0gaW5wdXRBcnIuam9pbignXG4nKTsKCQkJCWVsLnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0LCBlbmQpOwoKCQkJLy8gZWxzZSBzZWxlY3Rpb24gZG9lcyBub3Qgc3BhbiBtdWx0aXBsZSBsaW5lcy4KCQkJLy8gSWYgbm90IHNoaWZ0IGtleSwgc2ltcGx5IGluc2VydCBhIHRhYiAob3ZlcndyaXRpbmcgYW55IGxlYWRpbmcgc3BhY2VzKSBhbmQgYWR2YW5jZSB0aGUgY3Vyc29yLgoJCQl9IGVsc2UgaWYgKCFlLnNoaWZ0S2V5KSB7CgoJCQkJZWwudmFsdWUgPSBlbC52YWx1ZS5zdWJzdHJpbmcoMCwgc3RhcnQpLnJlcGxhY2UoLyggKykkLywgZnVuY3Rpb24oJDEpIHsgc3RhcnQgLT0gJDEubGVuZ3RoOyByZXR1cm4gJyc7IH0pCgkJCQkJKyAnXHQnCgkJCQkJKyBlbC52YWx1ZS5zdWJzdHJpbmcoZW5kKS5yZXBsYWNlKC9eICsvLCAnJyk7CgkJCQllbC5zZXRTZWxlY3Rpb25SYW5nZSgrK3N0YXJ0LCBzdGFydCk7CgoJCQkvLyBvdGhlcndpc2UsIGhhbmRsZSBzaGlmdCt0YWIKCQkJfSBlbHNlIHsKCgkJCQkvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgkJCQlUaGUgZm9sbG93aW5nIGNvZGUgYmxvY2sgbWltaWNzIHRoZSBiZWhhdmlvciBvZiBOb3RlcGFkKysuCgkJCQlJZiBhIHVzZXIgZG9lcyBzaGlmdC10YWIsIE5QUCBkb2VzIG5vdCBjaGFuZ2UgdGhlCgkJCQlpbmRlbnRhdGlvbiBvZiB0aGUgbGluZSB1bmxlc3MgdGhlIGN1cnNvciBpcyBhdCB0aGUKCQkJCWJlZ2lubmluZyBvZiBhbGwgbm9uLXdoaXRlc3BhY2Ugb24gdGhlIGxpbmUuICBJbnN0ZWFkLAoJCQkJTlBQIG1vdmVzIHRoZSBjdXJzb3IgYmFjayBvbmUgdGFiIHN0b3AuCgkJCQk9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgkJCQl2YXIgY3Vyc29ySW5Qb3MgPSBzdGFydCAtIHBvcywgY3Vyc29yTW92ZWQsIHRhYlN0b3A7CgoJCQkJLy8gV2hpbGUgdGhlIGN1cnNvciBpcyBub3QgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZSBhbmQgdGhlcmUncwoJCQkJLy8gbm9uLXdoaXRlc3BhY2UgYmV0d2VlbiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5lIGFuZCB0aGUgY3Vyc29yLAoJCQkJLy8gYW5kIHN0YXJ0IGlzIG5vdCBhdCB0aGUgcHJldmlvdXMgdGFiIHN0b3AKCQkJCXdoaWxlIChjdXJzb3JJblBvcyAmJiAvXFMvLnRlc3QoaW5wdXRBcnJbcm93XS5zdWJzdHJpbmcoMCxjdXJzb3JJblBvcykpICYmICF0YWJTdG9wKSB7CgkJCQkJY3Vyc29yTW92ZWQgPSBzdGFydC0tOwoJCQkJCWN1cnNvckluUG9zLS07CgkJCQkJdmFyIGluZGVudExldmVsID0gKGlucHV0QXJyW3Jvd10ubWF0Y2goL15ccysvKSB8fCBbJyddKVswXS5sZW5ndGgsCgkJCQkJCXRlbXBDdXJzb3IgPSBjdXJzb3JJblBvcyAtIGluZGVudExldmVsLAoJCQkJCQl0YWJTdG9wID0gISh0ZW1wQ3Vyc29yICUgNCk7CgkJCQl9CgoJCQkJLy8gSWYgY3Vyc29yIHdhcyBub3QgbW92ZWQsIG91dGRlbnQuCgkJCQlpZiAoIWN1cnNvck1vdmVkKSB7CgkJCQkJaWYgKC9ccy8udGVzdChpbnB1dEFycltyb3ddLmNoYXJBdChjdXJzb3JJblBvcykpKSBzdGFydCsrOwoJCQkJCWlucHV0QXJyW3Jvd10gPSBpbnB1dEFycltyb3ddLnJlcGxhY2UoL14oICt8XHQpLywKCQkJCQkJZnVuY3Rpb24oJDEpIHsgaWYgKHN0YXJ0ID4gcG9zKSBzdGFydCAtPSAkMS5sZW5ndGg7IHJldHVybiAnJzsgfQoJCQkJCSk7CgkJCQkJZWwudmFsdWUgPSBpbnB1dEFyci5qb2luKCdcbicpOwoJCQkJfQoJCQkJZWwuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIHN0YXJ0KTsKCQkJfQoKCQlicmVhazsKCgkJY2FzZSBrZXkuZW50ZXI6CgoJCQllLnByZXZlbnREZWZhdWx0KCk7CgoJCQkvLyBjdHJsK0VudGVyIHRvIHN1Ym1pdAoJCQlpZiAoZS5jdHJsS2V5KSB7CgkJCQlkbyB7IGVsID0gZWwucGFyZW50Tm9kZSB8fCBudWxsOyB9IHdoaWxlIChlbCAmJiBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnZm9ybScpOwoJCQkJcmV0dXJuIGVsID8gZWwuc3VibWl0KCkgOiBmYWxzZTsKCQkJfQoKCQkJLy8gdW5pZnkgaW5kZW50YXRpb24gb2YgcHJldmlvdXMgbGluZSBhcyB0YWJzCgkJCXZhciBpbmRlbnQgPSAoaW5wdXRBcnJbcm93XS5tYXRjaCgvXlxzKy8pIHx8IFsnJ10pWzBdOwoKCQkJLy8gaW5zZXJ0IG5ld2xpbmUgKyBpbmRlbnQsIGRpc2NhcmRpbmcgY29udGVudHMgb2YgdXNlciBzZWxlY3Rpb24gaWYgYW55CgkJCWVsLnZhbHVlID0gZWwudmFsdWUuc3Vic3RyaW5nKDAsIHBvcykKCQkJCSsgaW5wdXRBcnJbcm93XS5zdWJzdHJpbmcoMCwgc3RhcnQgLSBwb3MpCgkJCQkrICdcbicgKyBpbmRlbnQKCQkJCSsgZWwudmFsdWUuc3Vic3RyaW5nKGVuZCk7CgkJCXN0YXJ0Kz1pbmRlbnQubGVuZ3RoKzE7CgkJCWVsLnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0LCBzdGFydCk7CgoJCWJyZWFrOwoKCQljYXNlIGtleS5ob21lOgoKCQkJdmFyIGN1cnNvckluUG9zID0gc3RhcnQgLSBwb3MsIG5ld1N0YXJ0ID0gc3RhcnQsIGN1cnNvck1vdmVkOwoKCQkJLy8gSWYgbm90IGRvdWJsZS1wcmVzc2VkIGFuZCBsaW5lIGlzIHdyYXBwZWQsIGFsbG93IGRlZmF1bHQgYmVoYXZpb3IKCQkJaWYgKGN1cnNvckluUG9zID4gZWwuY29scyAmJiBrZXkuaGlzdG9yeVswXSAhPT0ga2V5LmhvbWUpIHJldHVybjsKCQkJaWYgKGtleS5oaXN0b3J5WzBdID09IGtleS5oaXN0b3J5WzFdKSBrZXkuaGlzdG9yeVsxXSA9IDA7CgoJCQllLnByZXZlbnREZWZhdWx0KCk7CgoJCQkvLyBJZiBjdXJzb3IgaXMgaW4gdGhlIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZSwgYWR2YW5jZSB0byB0ZXh0CgkJCXdoaWxlIChjdXJzb3JJblBvcyA8IGlucHV0QXJyW3Jvd10ubGVuZ3RoICYmIC9ccy8udGVzdChpbnB1dEFycltyb3ddLmNoYXJBdChjdXJzb3JJblBvcykpKSB7CgkJCQljdXJzb3JNb3ZlZCA9IG5ld1N0YXJ0Kys7CgkJCQljdXJzb3JJblBvcysrOwoJCQl9CgoJCQkvLyBJZiBjdXJzb3IgaXMgYWZ0ZXIgbm9uLXdoaXRlc3BhY2UsIHJlZ3Jlc3MgdG8gYmVnaW5uaW5nIG9mIHRleHQKCQkJd2hpbGUgKGN1cnNvckluUG9zICYmIC9cUy8udGVzdChpbnB1dEFycltyb3ddLnN1YnN0cmluZygwLGN1cnNvckluUG9zKSkpIHsKCQkJCWN1cnNvck1vdmVkID0gbmV3U3RhcnQtLTsKCQkJCWN1cnNvckluUG9zLS07CgkJCX0KCgkJCS8vIElmIHRoZSBjdXJzb3Igd2Fzbid0IG1vdmVkLCBtb3ZlIGl0IHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpbmUuCgkJCWlmICghY3Vyc29yTW92ZWQpIG5ld1N0YXJ0IC09IGN1cnNvckluUG9zOwoKCQkJaWYgKGUuc2hpZnRLZXkpIHsKCQkJCWlmIChzdGFydCA+IG5ld1N0YXJ0KSBlbC5zZXRTZWxlY3Rpb25SYW5nZShuZXdTdGFydCwgZW5kLCAnYmFja3dhcmQnKTsKCQkJCWVsc2UgZWwuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIG5ld1N0YXJ0KTsKCQkJfQoJCQllbHNlIGVsLnNldFNlbGVjdGlvblJhbmdlKG5ld1N0YXJ0LCBuZXdTdGFydCk7CgoJCWJyZWFrOwoKCQljYXNlIGtleS5lbmQ6CgoJCQkvLyBpZiBub3QgZG91YmxlLXByZXNzZWQsIGFsbG93IGRlZmF1bHQgYmVoYXZpb3IuCgkJCWlmIChpbnB1dEFycltyb3ddLmxlbmd0aCA8PSBlbC5jb2xzIHx8IGtleS5oaXN0b3J5WzBdICE9PSBrZXkuZW5kKSByZXR1cm47CgkJCWlmIChrZXkuaGlzdG9yeVswXSA9PSBrZXkuaGlzdG9yeVsxXSkga2V5Lmhpc3RvcnlbMV0gPSAwOwoKCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoKCQkJdmFyIG5ld0VuZCA9IHBvcyArIGlucHV0QXJyW3Jvd10ubGVuZ3RoOwoKCQkJLy8gc2VsZWN0IHRvIG5leHQgXG4KCQkJaWYgKGUuc2hpZnRLZXkpIGVsLnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0LCBuZXdFbmQpOwoJCQllbHNlIGVsLnNldFNlbGVjdGlvblJhbmdlKG5ld0VuZCwgbmV3RW5kKTsKCgkJYnJlYWs7CgoJfQkvLyBlbmQgc3dpdGNoKGtleS5jb2RlKQp9CS8vIGVuZCBmaXhUYWJzKCkKCmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmaXhUYWJzLCB0cnVlKTsKCi8qIGVuZCBrZXlib2FyZCBiZWhhdmlvciBtb2RzICovCgpmdW5jdGlvbiBzZWxlY3RBbGwoKSB7Cgl2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpOwoJLy8gc2VsZWN0IHBhcmVudCBpZiBwYXJlbnQgPT09IDxwcmU+OyBlbHNlIHNlbGVjdCBzZWxmCglyYW5nZS5zZWxlY3ROb2RlQ29udGVudHModGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAncHJlJyA/IHRoaXMuY2hpbGROb2Rlc1swXSA6IHRoaXMpOwoJdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTsKCXNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTsKCXNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7Cn0KCmZ1bmN0aW9uIGFkZERibENsaWNrKCkgewoJdmFyIGNvZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnY29kZScpOwoJZm9yICh2YXIgaT0wOyBpPGNvZGUubGVuZ3RoOyBpKyspIHsKCQkvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoJCUlmIHBhcmVudCBub2RlIGlzIDxwcmU+LCBhZGQgbGlzdGVuZXIgdG8gcGFyZW50LiAgVGhpcyBhbGxvd3MgZG91YmxlLQoJCWNsaWNraW5nIGFueXdoZXJlIHdpdGhpbiBhIGNvZGUgYmxvY2sgdG8gc2VsZWN0IGFsbCwgYXMgd2VsbCBhcyBkb3VibGUtCgkJY2xpY2tpbmcgaW5saW5lIGNvZGUgc25pcHBldHMgdGhlIHBvc3RlciBlbmNsb3NlZCBpbiBiYWNrdGlja3MuCgkJPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi8KCQl2YXIgbm9kZSA9IChjb2RlW2ldLnBhcmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3ByZScgPyBjb2RlW2ldLnBhcmVudE5vZGUgOiBjb2RlW2ldKTsKCQlub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgc2VsZWN0QWxsLCB0cnVlKTsKCQlub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgc2VsZWN0QWxsLCB0cnVlKTsKCQlub2RlLnRpdGxlID0gJ2RvdWJsZS1jbGljayB0byBzZWxlY3QgYWxsJzsKCX0KfQphZGREYmxDbGljaygpOwoKLy8gbGlzdGVuIGZvciBzdHVmZiBsaWtlICJzaG93IDEgbW9yZSBjb21tZW50Igp2YXIgY3JlZXAgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihhZGREYmxDbGljayk7CmNyZWVwLm9ic2VydmUoZG9jdW1lbnQsIHtzdWJ0cmVlOiB0cnVlLCBjaGlsZExpc3Q6IHRydWV9KTsKCi8qIGVuZCBkb3VibGUtY2xpY2sgbW9kcyAqLwoKLy8gSWYgb24gaHR0cDovL3N0YWNrZXhjaGFuZ2UuY29tLywgY2hlY2sgZm9yIHNpdGVzIG5vdCBpbmNsdWRlZCBpbiBtZXRhZGF0YSBAbWF0Y2ggZGlyZWN0aXZlcwppZiAoL2h0dHBzPzpcL1wvc3RhY2tleGNoYW5nZVwuY29tL2kudGVzdChsb2NhdGlvbi5ocmVmKSAmJiBHTV9pbmZvKSB7Cgl2YXIgWEhSID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7Cgl3aXRoIChYSFIpIHsKCQlvcGVuKCJHRVQiLCAiaHR0cDovL3N0YWNrZXhjaGFuZ2UuY29tL3NpdGVzP3ZpZXc9bGlzdCIsIHRydWUpOwoJCW9uZXJyb3IgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9OwoJCW9ubG9hZCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfTsKCQlvbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHsKCQkJaWYgKFhIUi5yZWFkeVN0YXRlID09IDQpIHsKCQkJCXZhciBkb20gPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoKTsKCQkJCWRvbS5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gWEhSLnJlc3BvbnNlVGV4dDsKCQkJCXZhciBsaXN0ID0gZG9tLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2xpc3Qtdmlldy1jb250YWluZXInKVswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpOwoJCQkJdmFyIG1hdGNoZXMgPSBHTV9pbmZvLnNjcmlwdC5tYXRjaGVzOwoJCQkJZm9yICh2YXIgaT1mb3VuZD0wOyBpPGxpc3QubGVuZ3RoOyBpKyspIHsKCQkJCQlpZiAoLyh0d2l0dGVyfGJsb2cpL2kudGVzdChsaXN0W2ldLmhyZWYpKSBjb250aW51ZTsKCQkJCQlmb3IgKHZhciBqPTA7IGo8bWF0Y2hlcy5sZW5ndGg7IGorKykgewoJCQkJCQl2YXIgcnhwID0gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVzW2pdLnJlcGxhY2UoL1wvXCokLywnJykucmVwbGFjZSgvW1wuXC9cKl0vZywgZnVuY3Rpb24obSkgewoJCQkJCQkJcmV0dXJuIChtID09ICcqJykgPyAnLionIDogJ1xcJyArIG07CgkJCQkJCX0pICsgJyQnLCAnaScpOwoJCQkJCQlpZiAocnhwLnRlc3QobGlzdFtpXS5ocmVmKSkgeyBmb3VuZD0xOyBicmVhazsgfQoJCQkJCX0KCQkJCQlpZiAoIWZvdW5kKSBjb25zb2xlLmxvZygnTmV3IHN0YWNrZXhjaGFuZ2UgZG9tYWluOiAnICsgbGlzdFtpXS5ocmVmKTsKCQkJCQllbHNlIGZvdW5kPTA7CgkJCQl9CgkJCX0KCQl9OwoJCXNlbmQoJycpOwoJfQp9Cg=="},{"name":"Highlight linked users in comments on hover","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["http://stackoverflow.com/*","http://meta.stackoverflow.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1448364812349,"data":{}},"enabled":true,"position":4,"file_url":"https://raw.githubusercontent.com/WiredUK/SO-UserScripts/468443b1a0fa63037fb2a477d42c45f0830048cc/comment-threading.js","uuid":"c6f79fb9-d4aa-4464-afdf-2cef891ec89f","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBIaWdobGlnaHQgbGlua2VkIHVzZXJzIGluIGNvbW1lbnRzIG9uIGhvdmVyCi8vIEBuYW1lc3BhY2UgICAgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL1dpcmVkVUsvU08tVXNlclNjcmlwdHMvbWFzdGVyL2NvbW1lbnQtdGhyZWFkaW5nLmpzCi8vIEB2ZXJzaW9uICAgICAgMC4xCi8vIEBkZXNjcmlwdGlvbiAgSGlnaGxpZ2h0IGxpbmtlZCB1c2VycyBpbiBjb21tZW50cyBvbiBob3ZlcgovLyBAYXV0aG9yICAgICAgIFlvdQovLyBAbWF0Y2ggICAgICAgIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgaHR0cDovL21ldGEuc3RhY2tvdmVyZmxvdy5jb20vKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgokKGRvY3VtZW50KS5hamF4Q29tcGxldGUoZnVuY3Rpb24oKSB7CiAgLy9CaW5kIHRvIGNvbW1lbnRzIGFmdGVyIGV2ZXJ5IGFqYXggY2FsbCBhcyBjb21tZW50cyBnZXQgcmVidWlsdCBhbGwgdGhlIHRpbWUKICAgICQoJy5jb21tZW50LWNvcHknKS51bmJpbmQoJ2hvdmVyJyk7CiAgICAkKCcuY29tbWVudC1jb3B5JykuaG92ZXIoZnVuY3Rpb24oKSB7CiAgICAgICAgLy9HZXQgdGhlIGNvbW1lbnQKICAgICAgICB2YXIgdGhpc0NvbW1lbnQgPSAkKHRoaXMpLmh0bWwoKTsKCiAgICAgICAgLy9HZXQgYWxsIG1hdGNoZXMgKGp1c3QgaW4gY2FzZSBTTyBldmVyIGRlY2lkZSB0byBhbGx3byBtb3JlIHRoYW4gb25lIHVzZXIgcGluZyBwZXIgY29tbWVudAogICAgICAgIHZhciByZSA9IC8oPzpefFxXKUAoXHcrKSg/IVx3KS9nLCBtYXRjaCwgbWF0Y2hlcyA9IFtdOwogICAgICAgIHdoaWxlIChtYXRjaCA9IHJlLmV4ZWModGhpc0NvbW1lbnQpKSB7CiAgICAgICAgICAgIG1hdGNoZXMucHVzaChtYXRjaFsxXSk7CiAgICAgICAgfQoKICAgICAgICAvL0dldCBhbGwgY29tbWVudCB1c2VycwogICAgICAgICQoJy5jb21tZW50LXVzZXInKS5lYWNoKGZ1bmN0aW9uKCkgewogICAgICAgICAgICAvL1JlbW92ZSBtb2QgZGlhbW9uZCBhbmQgc3BhY2VzIC0gaXMgdGhpcyBlbm91Z2ggdG8gbWFrZSBhIG5hbWUgbWF0Y2g/IFByb2JhYmx5IG5vdCBidXQgZ29vZCBlbm91Z2ggZm9yIG5vdwogICAgICAgICAgICB2YXIgdXNlciA9ICQodGhpcyk7CiAgICAgICAgICAgIHZhciB1c2VyTmFtZSA9IHVzZXIudGV4dCgpLnJlcGxhY2UoJ+KZpicsICcnKS5yZXBsYWNlKC9ccy9nLCAnJyk7CiAgICAgICAgICAgIG1hdGNoZXMuZm9yRWFjaChmdW5jdGlvbihlbGVtZW50KSB7CiAgICAgICAgICAgICAgICBjaGVja0NvbW1lbnQoZWxlbWVudCwgdXNlck5hbWUsIHVzZXIpIAogICAgICAgICAgICB9KTsKICAgICAgICB9KTsKICAgIH0sIGZ1bmN0aW9uKCkgewogICAgICAgICQoJy5jb21tZW50LXVzZXInKS5wcmV2KCkucGFyZW50KCkucmVtb3ZlQ2xhc3MoJ293bmVyJyk7CiAgICB9KTsKfSk7CiAgICAKZnVuY3Rpb24gY2hlY2tDb21tZW50KHVzZXJuYW1lLCBtYXRjaGVkVXNlcm5hbWUsIHVzZXIpIHsKICAgIGlmKG1hdGNoZWRVc2VybmFtZSA9PSB1c2VybmFtZSkgewogICAgICAgICQodXNlcikucHJldigpLnBhcmVudCgpLmFkZENsYXNzKCdvd25lcicpOwogICAgfQp9"},{"name":"StackExchange obvious followed link color","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?\\:\\/\\/([a-z\\.]*\\.)?stackexchange\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?askubuntu\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?superuser\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?serverfault\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?stackoverflow\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?answers.onstartups\\.com\\/.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1448805992770,"data":{}},"enabled":true,"position":5,"file_url":"https://greasyfork.org/scripts/3362-stackexchange-obvious-followed-link-color/code/StackExchange%20obvious%20followed%20link%20color.user.js","uuid":"6ea166e0-79ab-4e14-9f4e-fe17128833fc","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgU3RhY2tFeGNoYW5nZSBvYnZpb3VzIGZvbGxvd2VkIGxpbmsgY29sb3IKLy8gQG5hbWVzcGFjZSBodHRwOi8vb3N0ZXJtaWxsZXIub3JnLwovLyBAdmVyc2lvbiAxLjAwCi8vIEBkZXNjcmlwdGlvbiBDaGFuZ2UgdGhlIGNvbG9yIG9mIGZvbGxvd2VkIGxpbmtzIG9uIGFsbCBTdGFja0V4Y2hhbmdlIHNpdGVzIHNvIHRoZXkgdGhleSBhcmUgZWFzaWx5IGRpc3Rpbmd1aXNoYWJsZS4KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9zdGFja2V4Y2hhbmdlXC5jb21cLy4qLwovLyBAaW5jbHVkZSAvaHR0cHM/XDpcL1wvKFthLXpcLl0qXC4pP2Fza3VidW50dVwuY29tXC8uKi8KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9zdXBlcnVzZXJcLmNvbVwvLiovCi8vIEBpbmNsdWRlIC9odHRwcz9cOlwvXC8oW2EtelwuXSpcLik/c2VydmVyZmF1bHRcLmNvbVwvLiovCi8vIEBpbmNsdWRlIC9odHRwcz9cOlwvXC8oW2EtelwuXSpcLik/c3RhY2tvdmVyZmxvd1wuY29tXC8uKi8KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9hbnN3ZXJzLm9uc3RhcnR1cHNcLmNvbVwvLiovCi8vIEBncmFudCBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gYWRkQ3NzKGNzc1N0cmluZykgewogICAgdmFyIG5ld0NzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CiAgICBuZXdDc3MudHlwZSA9ICJ0ZXh0L2NzcyI7CiAgICBuZXdDc3MuaW5uZXJIVE1MID0gY3NzU3RyaW5nOwogICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChuZXdDc3MpOwogICAgY29uc29sZS5sb2coImFwcGVuZGVkIGNzcyIpOwp9CgphZGRDc3MgKAogICAgJy5xdWVzdGlvbi1oeXBlcmxpbms6dmlzaXRlZCwgLnJlc3VsdC1saW5rIGE6dmlzaXRlZCB7Y29sb3I6ICMwMDAwOEIgISBpbXBvcnRhbnQ7fScKKTsg"},{"name":"Stack-Exchange-Editor-Toolkit","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"excludes":false,"includes":false,"matches":false,"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?://\\w*.?(stackoverflow|stackexchange|serverfault|superuser|askubuntu|stackapps)\\.com/(questions|posts|review)/(?!tagged|new).*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1449981782137,"data":{}},"enabled":true,"position":6,"file_url":"https://raw.githubusercontent.com/Tiny-Giant/Stack-Exchange-Editor-Toolkit/19c99c14f47a895a00bb8aa06e8db08a35f449fe/editor.user.js","uuid":"2dd88c52-f3d5-4183-b29e-f2bc03f42111","source":""},{"name":"@Closey command auto complete","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://chat.stackoverflow.com/rooms/41570/so-close-vote-reviewers"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1450312190475,"data":{}},"enabled":true,"position":7,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/BotCommands.user.js","uuid":"e2d25a62-85bf-4485-bab9-bf6e3d090aaa","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBAQ2xvc2V5IGNvbW1hbmQgYXV0byBjb21wbGV0ZQovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9TTy1DbG9zZS1Wb3RlLVJldmlld2Vycy9Vc2VyU2NyaXB0cwovLyBAdmVyc2lvbiAgICAgIDAuMgovLyBAZGVzY3JpcHRpb24gIGNvbW1hbmQgY29tcGxldGlvbiBmb3IgYm90IGNvbW1hbmRzCi8vIEBhdXRob3IgICAgICAgcmVuZQovLyBAbWF0Y2ggICAgICAgICo6Ly9jaGF0LnN0YWNrb3ZlcmZsb3cuY29tL3Jvb21zLzQxNTcwL3NvLWNsb3NlLXZvdGUtcmV2aWV3ZXJzCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCi8qZ2xvYmFsICQ6ZmFsc2UsIGRvY3VtZW50OmZhbHNlLCBjb25zb2xlOmZhbHNlICovCmZ1bmN0aW9uIHN0YXJ0QXV0b0NvbXBsZXRlKGpxdWVyeSkgewogICJ1c2Ugc3RyaWN0IjsKICAgIGlmICghU3RyaW5nLnByb3RvdHlwZS5zdGFydHNXaXRoKSB7CiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmluZy5wcm90b3R5cGUsICdzdGFydHNXaXRoJywgewogICAgICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSwKICAgICAgICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSwKICAgICAgICAgICAgd3JpdGFibGU6IGZhbHNlLCAgIAogICAgICAgICAgICB2YWx1ZTogZnVuY3Rpb24gKHNlYXJjaFN0cmluZywgcG9zaXRpb24pIHsKICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gcG9zaXRpb24gfHwgMDsKICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmxhc3RJbmRleE9mKHNlYXJjaFN0cmluZywgcG9zaXRpb24pID09PSBwb3NpdGlvbjsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIHZhciAkID0ganF1ZXJ5LAogICAgICAgIGlucCA9ICQoJyNpbnB1dCcpLCAgLy8gd2hlcmUgd2UgdHlwZSBtZXNzYWdlcwogICAgICAgIHBhcnNlID0gLyhAY2xvc2V5XHMrKShbXHd8XFddKykvaSwgLy8gLy9wYXJzZSBib3RuYW1lIGFuZCBjb21tYW5kcwogICAgICAgIGNtZHMgPSBbCiAgICAgICAgICAgICAvLyBwdWJsaWMKICAgICAgICAgICAgJ2FsaXZlJywKICAgICAgICAgICAgJ2NvbW1hbmRzJywKICAgICAgICAgICAgJ2hlbHAnLAogICAgICAgICAgICAncnVubmluZyBjb21tYW5kcycsCiAgICAgICAgICAgICdzdGF0dXMnLAogICAgICAgICAgICAgLy8gUmVnaXN0ZXJlZAogICAgICAgICAgICAnYXVkaXQgc3RhdHMnLCAvLyAtIFNob3dzIHN0YXRzIGFib3V0IHlvdXIgcmVjb3JkZWQgYXVkaXRzLgogICAgICAgICAgICAnY29tcGxldGVkIHRhZ3MnLCAvLyBbbWluIDwjPl0gLSBTaG93cyB0aGUgbGF0ZXN0IHRhZ3MgdGhhdCBoYXZlIGJlZW4gY29tcGxldGVkIGJ5IG11bHRpcGxlIHBlb3BsZS4KICAgICAgICAgICAgJ2N1cnJlbnQgc2Vzc2lvbicsIC8vIC0gVGVsbHMgaWYgdGhlIHVzZXIgaGFzIGFuIG9wZW4gc2Vzc2lvbiBvciBub3QsIGFuZCB3aGVuIGl0IHN0YXJ0ZWQuCiAgICAgICAgICAgICdjdXJyZW50IHRhZycsIC8vIC0gR2V0IHRoZSB0YWcgdGhhdCBoYXMgdGhlIG1vc3QgYW1vdW50IG9mIG1hbmFnZWFibGUgY2xvc2UgcXVldWUgaXRlbXMgZnJvbSB0aGUgU0VERSBxdWVyeS4KICAgICAgICAgICAgJ2VuZCBzZXNzaW9uJywgLy8gLSBJZiBhIHVzZXIgaGFzIGFuIG9wZW4gcmV2aWV3IHNlc3Npb24gdGhpcyBjb21tYW5kIHdpbGwgZm9yY2UgZW5kIHRoYXQgc2Vzc2lvbi4KICAgICAgICAgICAgJ2xhc3Qgc2Vzc2lvbiBzdGF0cycsIC8vIC0gU2hvd3Mgc3RhdHMgYWJvdXQgeW91ciBsYXN0IHJldmlldyBzZXNzaW9uLgogICAgICAgICAgICAnbGFzdCBzZXNzaW9uIGVkaXQgY291bnQnLCAvLyA8bmV3IGNvdW50PiAtIEVkaXRzIHRoZSBudW1iZXIgb2YgcmV2aWV3ZWQgaXRlbXMgaW4geW91ciBsYXN0IHJldmlldyBzZXNzaW9uLgogICAgICAgICAgICAnbmV4dCcsIC8vIDwjPiB0YWdzIC0gRGlzcGxheXMgdGhlIGZpcnN0IFggdGFncyBmcm9tIHRoZSBTRURFIHF1ZXJ5IHRvIGZvY3VzIG9uLgogICAgICAgICAgICAncmVmcmVzaCB0YWdzJywgLy8gLSBGb3JjZXMgYSByZWZyZXNoIG9mIHRoZSB0YWdzIG9idGFpbmVkIGZyb20gdGhlIFNFREUgcXVlcnkuCiAgICAgICAgICAgICdzdGFydCBldmVudCcsIC8vIC0gU2hvd3MgdGhlIGN1cnJlbnQgc3RhdHMgZnJvbSB0aGUgL3Jldmlldy9jbG9zZS9zdGF0cyBwYWdlIGFuZCB0aGUgbmV4dCAzIHRhZ3MgdG8gd29yayBvbi4KICAgICAgICAgICAgJ3N0YXJ0aW5nJywgLy8gLSBJbmZvcm1zIHRoZSBjaGF0Ym90IHRoYXQgeW91IGFyZSBzdGFydGluZyBhIG5ldyByZXZpZXcgc2Vzc2lvbi4KICAgICAgICAgICAgJ3N0YXRzJywgLy8gLSBTaG93cyB0aGUgc3RhdHMgYXQgdGhlIHRvcCBvZiB0aGUgL3Jldmlldy9jbG9zZS9zdGF0cyBwYWdlLgogICAgICAgICAgICAvLyBvd25lcgogICAgICAgICAgICAnYWRkIHVzZXInLAogICAgICAgICAgICAndHJhY2sgdXNlcicsIC8vIDxjaGF0IGlkPiAtIEFkZHMgdGhlIHVzZXIgdG8gdGhlIHJlZ2lzdGVyZWQgdXNlcnMgbGlzdC4KICAgICAgICAgICAgJ3N0b3AgYm90Jy8vIC0gVGhlIGJvdCB3aWxsIGxlYXZlIHRoZSBjaGF0IHJvb20gYW5kIHF1aXQgdGhlIHJ1bm5pbmcgYXBwbGljYXRpb24uCiAgICAgICAgXTsgLy8gYWxsIGtub3duIGNvbW1hbmRzCgogICAgLy8gY2xlYXIgYWxsIGhpbnRzIGFuZCByZW1vdmUgY2xpY2sgaGFuZGxlcnMKICAgIGZ1bmN0aW9uIGNsZWFySGludHMoKSB7CiAgICAgICAgJCgnI2Nsb3NleScpLmZpbmQoJ2xpJykuZWFjaChmdW5jdGlvbiAoKSB7ICQodGhpcykub2ZmKCdjbGljaycpOyB9KTsKICAgICAgICAkKCcjY2xvc2V5JykucmVtb3ZlKCk7CiAgICB9CgogICAgLy8gcHV0IHRoZSBjaG9vc2UgaGludCBpbiB0aGUgY2hhdCBtZXNzYWdlIHRleHQgYXJlYQogICAgZnVuY3Rpb24gY29tcGxldGUoYm90LCBjb21tYW5kKSB7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgaW5wLnZhbChib3QgKyBjb21tYW5kKTsKICAgICAgICAgICAgY2xlYXJIaW50cygpOwogICAgICAgIH07CiAgICB9CgogICAgLy8gYnVpbGQgb24gc2luZ2xlIGxlIHRoYXQgaG9sZHMgdGhlIGhpbnQKICAgIGZ1bmN0aW9uIGJ1aWxkSGludCh2YWx1ZSwgYm90KSB7CiAgICAgICAgdmFyIGxpID0gJCgnPGxpPjwvbGk+JykKICAgICAgICAgICAgLmNzcygnZGlzcGxheScsICdpbmxpbmUtYmxvY2snKQogICAgICAgICAgICAuY3NzKCdtYXJnaW4tbGVmdCcsICczcHgnKQogICAgICAgICAgICAuY3NzKCdtYXJnaW4tcmlnaHQnLCAnM3B4JykKICAgICAgICAgICAgLmNzcygncGFkZGluZycsICcycHgnKQogICAgICAgICAgICAuY3NzKCdib3JkZXInLCAnc29saWQgMXB4IGJsdWUnKQogICAgICAgICAgICAudGV4dCh2YWx1ZSk7CiAgICAgICAgbGkub24oJ2NsaWNrJywgY29tcGxldGUoYm90LCB2YWx1ZSkpOwogICAgICAgIHJldHVybiBsaTsKICAgIH0KCiAgICBmdW5jdGlvbiBoaWdobGlnaHQobGkpIHsKICAgICAgICBsaS5hZGRDbGFzcygndGFiJyk7CiAgICAgICAgbGkuY3NzKCdiYWNrZ3JvdW5kLWNvbG9yJywgJ3llbGxvdycpOwogICAgICAgIHJldHVybiBsaS50ZXh0KCk7CiAgICB9CiAgICBmdW5jdGlvbiBoaWdobGlnaHROZXh0SGludCgpIHsKICAgICAgICB2YXIgc2V0bmV4dCA9IGZhbHNlLAogICAgICAgICAgICBsaWYsCiAgICAgICAgICAgIHNlbGVjdGVkOwogICAgICAgICQoJyNjbG9zZXknKS5maW5kKCdsaScpLmVhY2goZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbGkgPSAkKHRoaXMpOwogICAgICAgICAgICBpZiAobGkuaGFzQ2xhc3MoJ3RhYicpKSB7CiAgICAgICAgICAgICAgICBzZXRuZXh0ID0gdHJ1ZTsKICAgICAgICAgICAgICAgIGxpLnJlbW92ZUNsYXNzKCd0YWInKTsKICAgICAgICAgICAgICAgIGxpLmNzcygnYmFja2dyb3VuZC1jb2xvcicsICd3aGl0ZScpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgaWYgKHNldG5leHQpIHsKICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9IGhpZ2hsaWdodChsaSk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfSk7CiAgICAgICAgaWYgKCFzZXRuZXh0KSB7CiAgICAgICAgICAgIGxpZiA9ICQoJyNjbG9zZXknKS5maW5kKCdsaScpOwogICAgICAgICAgICBpZiAobGlmLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgICAgIHNlbGVjdGVkID0gaGlnaGxpZ2h0KCQobGlmWzBdKSk7CiAgICAgICAgICAgICAgICBzZXRuZXh0ID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gc2VsZWN0ZWQ7CiAgICB9CgogICAgZnVuY3Rpb24gaGFuZGxlS2V5KGNtZCwgYm90KSB7CiAgICAgICAgdmFyIGJvdGNtZCwKICAgICAgICAgICAgYywKICAgICAgICAgICAgY29udGFpbmVyOwoKICAgICAgICBjbGVhckhpbnRzKCk7CiAgICAgICAgY29udGFpbmVyID0gJCgnPHVsIGlkPSJjbG9zZXkiPjwvdWw+JykuY3NzKCd0ZXh0LWFsaWduJywgJ2xlZnQnKTsKICAgICAgICBmb3IgKGMgPSAwOyBjIDwgY21kcy5sZW5ndGg7IGMgPSBjICsgMSkgewogICAgICAgICAgICBib3RjbWQgPSBjbWRzW2NdOwogICAgICAgICAgICBpZiAoYm90Y21kLnN0YXJ0c1dpdGgoY21kKSAmJiBib3RjbWQgIT09IGNtZCkgewogICAgICAgICAgICAgICAgY29udGFpbmVyLmFwcGVuZChidWlsZEhpbnQoYm90Y21kLCBib3QpKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICAkKCcjdGFiY29tcGxldGUtY29udGFpbmVyJykuYXBwZW5kKGNvbnRhaW5lcik7CiAgICB9CgogICAgJChkb2N1bWVudCkub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoaykgewogICAgICAgIHZhciBCT1QgPSAxLAogICAgICAgICAgICBDT01NQU5EID0gMiwKICAgICAgICAgICAgcmVzdWx0ID0gcGFyc2UuZXhlYyhpbnAudmFsKCkpLAogICAgICAgICAgICBzZWxlY3RlZDsKCiAgICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCAmJgogICAgICAgICAgICAgICAgcmVzdWx0Lmxlbmd0aCA+IENPTU1BTkQgJiYKICAgICAgICAgICAgICAgIGsua2V5Q29kZSA9PT0gOSkgewogICAgICAgICAgICBzZWxlY3RlZCA9IGhpZ2hsaWdodE5leHRIaW50KCk7CiAgICAgICAgICAgIGlmIChzZWxlY3RlZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgICAgICAgICBrLnByZXZlbnREZWZhdWx0KCk7CiAgICAgICAgICAgICAgICBrLnN0b3BQcm9wYWdhdGlvbigpOwogICAgICAgICAgICAgICAgaW5wLnZhbChyZXN1bHRbQk9UXSArIHNlbGVjdGVkKTsKICAgICAgICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgfSk7CgogICAgaW5wLm9uKCdrZXl1cCcsIGZ1bmN0aW9uIChlKSB7CiAgICAgICAgdmFyIEJPVCA9IDEsCiAgICAgICAgICAgIENPTU1BTkQgPSAyLAogICAgICAgICAgICByZXN1bHQgPSBwYXJzZS5leGVjKGUucmVzdWx0KTsKICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICBjb25zb2xlLmxvZyhyZXN1bHQpOwogICAgICAgIGlmIChlLmtleUNvZGUgIT09IDkpIHsKICAgICAgICAgICAgaWYgKHJlc3VsdCAhPT0gbnVsbCAmJgogICAgICAgICAgICAgICAgICAgIHJlc3VsdC5sZW5ndGggPiBDT01NQU5EKSB7CiAgICAgICAgICAgICAgICBoYW5kbGVLZXkocmVzdWx0W0NPTU1BTkRdLCByZXN1bHRbQk9UXSk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBjbGVhckhpbnRzKCk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9KTsKfQoKZnVuY3Rpb24gZ2V0SnF1ZXJ5KCkgewogICJ1c2Ugc3RyaWN0IjsKICAgIHJldHVybiAkIHx8IHVuc2FmZVdpbmRvdy5qUXVlcnk7Cn0KCndpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywKICAgIGZ1bmN0aW9uKCkgewogICAgICAgIHN0YXJ0QXV0b0NvbXBsZXRlKGdldEpxdWVyeSgpKTsKICAgIH0pOwo="},{"name":"Unclosed Request Review Script","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"user_agent":"","override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://chat.stackoverflow.com/rooms/41570/*","*://chat.stackoverflow.com/search?q=tagged%2Fcv-pls&Room=41570&page=*&pagesize=50&sort=newest"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"ts":1450746464288,"data":{}},"enabled":true,"position":8,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/UnclosedRequestReview.user.js","uuid":"ea33379b-d41e-4b0a-8231-2ab1c5a6b70f","source":""},{"name":"Spam Reporter","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"user_agent":"","override":{"use_includes":[],"orig_includes":["/^https?:\\/\\/\\w*.?(stackexchange.com|stackoverflow.com|serverfault.com|superuser.com|askubuntu.com|stackapps.com|mathoverflow.net)\\/q(uestions)?\\/\\d+/"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1450835843056,"data":{}},"enabled":true,"position":9,"file_url":"https://raw.githubusercontent.com/Tiny-Giant/myuserscripts/master/SpamReporter.user.js","uuid":"f5f2e031-067d-4fb2-a7d7-caa2c91a8956","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTcGFtIFJlcG9ydGVyCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL2dpdGh1Yi5jb20vVGlueS1HaWFudAovLyBAdmVyc2lvbiAgICAgIDEuMC4wLjAKLy8gQGRlc2NyaXB0aW9uICBBZGRzIGEgbGluayB0byB0aGUgcG9zdCBtZW51IGZvciBtb3N0IHBvc3RzLiAKLy8gQGF1dGhvciAgICAgICBAVGlueUdpYW50Ci8vIEBpbmNsdWRlICAgICAgL15odHRwcz86XC9cL1x3Ki4/KHN0YWNrZXhjaGFuZ2UuY29tfHN0YWNrb3ZlcmZsb3cuY29tfHNlcnZlcmZhdWx0LmNvbXxzdXBlcnVzZXIuY29tfGFza3VidW50dS5jb218c3RhY2thcHBzLmNvbXxtYXRob3ZlcmZsb3cubmV0KVwvcSh1ZXN0aW9ucyk/XC9cZCsvCi8vIEBncmFudCAgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gPT0vVXNlclNjcmlwdD09Ci8qIGpzaGludCAtVzA5NyAqLwoKKGZ1bmN0aW9uKCl7CiAgICAndXNlIHN0cmljdCc7CgogICAgdmFyIG5vdGlmeSA9IChmdW5jdGlvbigpewogICAgICAgIHZhciBjb3VudCA9IDAsIHRpbWVvdXQ7CiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG0sdCkgewogICAgICAgICAgICBjb25zb2xlLmxvZyhtLHQpOwogICAgICAgICAgICBpZigkKCcjbm90aWZ5LScgKyBjb3VudCkubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7CiAgICAgICAgICAgICAgICBTdGFja0V4Y2hhbmdlLm5vdGlmeS5jbG9zZShjb3VudCk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgU3RhY2tFeGNoYW5nZS5ub3RpZnkuc2hvdyhtLCsrY291bnQpOwogICAgICAgICAgICBpZih0KSB0aW1lb3V0ID0gc2V0VGltZW91dChTdGFja0V4Y2hhbmdlLm5vdGlmeS5jbG9zZS5iaW5kKG51bGwsY291bnQpLCB0KTsKICAgICAgICB9OwogICAgfSkoKTsKICAgIAogICAgdmFyIGVuZ2FnZSA9IGZ1bmN0aW9uKHNjb3BlKSB7CgogICAgICAgIGlmICghc2NvcGUpIHsKICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICB2YXIgcm9vbSA9IDQxNTcwOyAvLyB1c2UgNjg0MTQgZm9yIHRlc3RpbmcKICAgICAgICAKICAgICAgICB2YXIgcG9zdExpbmsgPSBzY29wZS5xdWVyeVNlbGVjdG9yKCcuc2hvcnQtbGluaycpLmhyZWY7CiAgICAgICAgCiAgICAgICAgdmFyIHJlcG9ydFNlbnQgPSBmdW5jdGlvbihyZXNwb25zZSkgewogICAgICAgICAgICBjb25zb2xlLmxvZyhyZXNwb25zZSk7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAocmVzcG9uc2Uuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgICAgIG5vdGlmeSgnRXJyb3Igc2VuZGluZyByZXF1ZXN0OiAnICsgcmVzcC5yZXNwb25zZVRleHQpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICBub3RpZnkoJ0Nsb3NlIHZvdGUgcmVxdWVzdCBzZW50LicsMTAwMCk7CiAgICAgICAgfTsKICAgICAgICAKICAgICAgICB2YXIgc2VuZFJlcG9ydCA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHJlc3BvbnNlKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChyZXNwb25zZS5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgICAgICAgbm90aWZ5KCdGYWlsZWQgc2VuZGluZyByZXBvcnQsIGNoZWNrIHRoZSBjb25zb2xlIGZvciBtb3JlIGluZm9ybWF0aW9uLicpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgZmtleSA9IHJlc3BvbnNlLnJlc3BvbnNlVGV4dC5tYXRjaCgvaGlkZGVuIiB2YWx1ZT0iKFtcZGFiY2RlZl17MzJ9KS8pWzFdOwogICAgICAgICAgICAKICAgICAgICAgICAgaWYgKCFma2V5KSB7CiAgICAgICAgICAgICAgICBub3RpZnkoJ0ZhaWxlZCByZXRyaWV2aW5nIGtleSwgaXMgdGhlIHJvb20gVVJMIHZhbGlkPycpOwogICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB9CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgcmVwb3J0U3RyID0gJyEhL3JlcG9ydCAnICsgcG9zdExpbms7CiAgICAgICAgICAgIAogICAgICAgICAgICB2YXIgb3B0aW9ucyA9IHsKICAgICAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICAgICAgdXJsOiAnaHR0cDovL2NoYXQuc3RhY2tvdmVyZmxvdy5jb20vY2hhdHMvJyArIHJvb20gKyAnL21lc3NhZ2VzL25ldycsCiAgICAgICAgICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyB9LAogICAgICAgICAgICAgICAgZGF0YTogJ3RleHQ9JyArIGVuY29kZVVSSUNvbXBvbmVudChyZXBvcnRTdHIpICsgJyZma2V5PScgKyBma2V5LAogICAgICAgICAgICAgICAgb25sb2FkOiByZXBvcnRTZW50CiAgICAgICAgICAgIH07CiAgICAgICAgICAgIAogICAgICAgICAgICBHTV94bWxodHRwUmVxdWVzdChvcHRpb25zKTsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIAogICAgICAgIHZhciByZXBvcnQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYoIWNvbmZpcm0oJ0RvIHlvdSByZWFsbHkgd2FudCB0byByZXBvcnQgdGhpcyBwb3N0PycpKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBvcHRpb25zID0gewogICAgICAgICAgICAgICAgbWV0aG9kOiAnR0VUJywgCiAgICAgICAgICAgICAgICB1cmw6ICdodHRwOi8vY2hhdC5zdGFja292ZXJmbG93LmNvbS9yb29tcy8nICsgcm9vbSwgCiAgICAgICAgICAgICAgICBvbmxvYWQ6IHNlbmRSZXBvcnQKICAgICAgICAgICAgfTsKICAgICAgICAgICAgCiAgICAgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0KG9wdGlvbnMpOwogICAgICAgIH07CgogICAgICAgIHZhciBzZXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzcGFuJyk7CiAgICAgICAgc2VwLmNsYXNzTmFtZSA9ICdsc2VwJzsKICAgICAgICBzZXAudGV4dENvbnRlbnQgPSAnfCc7CiAgICAgICAgc2NvcGUuYXBwZW5kQ2hpbGQoc2VwKTsKICAgICAgICAKICAgICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICBsaW5rLmhyZWYgPSAnIyc7CiAgICAgICAgbGluay50ZXh0Q29udGVudCA9ICdyZXBvcnQnOwogICAgICAgIGxpbmsuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCByZXBvcnQsIGZhbHNlKTsKICAgICAgICBzY29wZS5hcHBlbmRDaGlsZChsaW5rKTsKICAgIH07CiAgICAKICAgIHZhciBtZW51cyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5wb3N0LW1lbnUnKTsKICAgIAogICAgZm9yKHZhciBpIGluIE9iamVjdC5rZXlzKG1lbnVzKSkgZW5nYWdlKG1lbnVzW2ldKTsKICAgIAogICAgJChkb2N1bWVudCkuYWpheENvbXBsZXRlKGZ1bmN0aW9uKCl7CiAgICAgICAgdmFyIHVybCA9IGFyZ3VtZW50c1syXS51cmw7CiAgICAgICAgaWYgKC9eXC9wb3N0c1wvYWpheC1sb2FkLXJlYWx0aW1lXC8vLnRlc3QodXJsKSkgZW5nYWdlKC9cZCsvLmV4ZWModXJsKVswXSk7CiAgICB9KTsKfSkoKTsK"}]}