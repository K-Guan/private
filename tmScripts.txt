{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Stack Exchange CV Request Generator","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"user_agent":"","override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/\\w*.?(stackoverflow|stackexchange|serverfault|superuser|askubuntu|stackapps)\\.com\\/(questions|posts|review|tools)\\/(?!tagged\\/|new\\/).*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"data":{},"ts":1456451831270},"enabled":true,"position":1,"file_url":"https://rawgit.com/SO-Close-Vote-Reviewers/UserScripts/master/SECloseVoteRequestGenerator.user.js","uuid":"92eb7581-a2c9-462d-af44-7eb8c903f8cb","source":""},{"name":"stackoverflow-comment-reply","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://stackoverflow.com/*","*://serverfault.com/*","*://superuser.com/*","*://meta.stackoverflow.com/*","*://meta.serverfault.com/*","*://meta.superuser.com/*","*://stackapps.com/*","*://*.stackexchange.com/*","*://askubuntu.com/*","*://meta.askubuntu.com/*","*://answers.onstartups.com/*","*://meta.answers.onstartups.com/*","*://mathoverflow.net/*","*://area51.stackexchange.com/proposals/*"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831289},"enabled":true,"position":2,"file_url":"https://bitbucket.org/balpha/user-scripts/raw/tip/comment-reply-links/comment-reply-links.user.js","uuid":"b30320e8-9e48-4191-9a0a-15f6c81e1d21","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIHN0YWNrb3ZlcmZsb3ctY29tbWVudC1yZXBseQovLyBAbmFtZXNwYWNlICAgICAgc3RhY2tvdmVyZmxvdwovLyBAZGVzY3JpcHRpb24gICAgQWRkICJyZXBseSIgbGlua3MgdG8gY29tbWVudHMKLy8gQHZlcnNpb24gICAgICAgIDEuMQovLyBAbWF0Y2ggICAgICAgICAgKjovL3N0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9zZXJ2ZXJmYXVsdC5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL3N1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuc3RhY2tvdmVyZmxvdy5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuc2VydmVyZmF1bHQuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9tZXRhLnN1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL3N0YWNrYXBwcy5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL2Fza3VidW50dS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuYXNrdWJ1bnR1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAqOi8vYW5zd2Vycy5vbnN0YXJ0dXBzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAqOi8vbWV0YS5hbnN3ZXJzLm9uc3RhcnR1cHMuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9tYXRob3ZlcmZsb3cubmV0LyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9hcmVhNTEuc3RhY2tleGNoYW5nZS5jb20vcHJvcG9zYWxzLyoKLy8gQGF1dGhvciAgICAgICAgIEJlbmphbWluIER1bWtlLXZvbiBkZXIgRWhlCi8vID09L1VzZXJTY3JpcHQ9PQoKLy8gVGhhbmtzIHRvIFNob2c5IGZvciB0aGlzIGlkZWEgZm9yIG1ha2luZyB0aGUgc2NyaXB0IHdvcmsgaW4gYm90aAovLyBDaHJvbWUgYW5kIEZpcmVmb3g6Ci8vIGh0dHA6Ly9tZXRhLnN0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80NjU2MgpmdW5jdGlvbiB3aXRoX2pxdWVyeShmKSB7CiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogICAgc2NyaXB0LnRleHRDb250ZW50ID0gIigiICsgZi50b1N0cmluZygpICsgIikoalF1ZXJ5KSI7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7Cn07Cgp3aXRoX2pxdWVyeShmdW5jdGlvbigkKSB7CiAgICAgICAgCiAgICAkKGRvY3VtZW50KS5hamF4Q29tcGxldGUoZnVuY3Rpb24oKXsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiLmNvbW1lbnRzIikuZWFjaChwdXRfcmVwbHlfbGlua3MpOwogICAgICAgIH0sIDEwMCk7CiAgICB9KTsKICAgICAgICAKICAgIC8vIGV2ZW50IGhhbmRsZXIgZm9yIGEgY2xpY2sgb24gdGhlIHJlcGx5IGxpbmtzCiAgICBmdW5jdGlvbiByZXBseSgpIHsKICAgICAgICB2YXIgY29tbWVudGxpbmsgPSAkKHRoaXMpLmNsb3Nlc3QoIi5jb21tZW50cyIpLm5leHQoKS5jbGljaygpOwogICAgICAgIHZhciBjb21tZW50bGlua0lkID0gY29tbWVudGxpbmsuYXR0cigiaWQiKTsKICAgICAgICB2YXIgdXNlcm5hbWUgPSBnb29kaWZ5KCQodGhpcykucHJldigpLnRleHQoKS5yZXBsYWNlKC/imaYvLCAiIikpCiAgICAgICAgdmFyIGZvcm1pZCA9IGNvbW1lbnRsaW5rSWQucmVwbGFjZSgvXi4qLShcZCspJC8sICJhZGQtY29tbWVudC0kMSIpOwogICAgICAgIHZhciB0YSA9ICQoIiMiICsgZm9ybWlkICsgIiB0ZXh0YXJlYSIpWzBdOwogICAgICAgIHZhciBzdGFydCA9IHRhLnNlbGVjdGlvblN0YXJ0OwogICAgICAgIHZhciBlbmQgPSB0YS5zZWxlY3Rpb25FbmQ7CiAgICAgICAgdmFyIHNoaWZ0ID0gdXNlcm5hbWUubGVuZ3RoICsgMzsKICAgICAgICB0YS52YWx1ZSA9ICJAIiArIHVzZXJuYW1lICsgIjogIiArIHRhLnZhbHVlOwogICAgICAgIHRhLmZvY3VzKCk7CiAgICAgICAgdGEuc2VsZWN0aW9uU3RhcnQgPSBzdGFydCArIHNoaWZ0OwogICAgICAgIHRhLnNlbGVjdGlvbkVuZCA9IGVuZCArIHNoaWZ0OwogICAgfTsKCiAgICBmdW5jdGlvbiBwdXRfcmVwbHlfbGlua3MoKSB7CiAgICAgICAgJCh0aGlzKS5maW5kKCIuY29tbWVudDpub3QoOmhhcygucmVwbHktbGluaykpIC5jb21tZW50LXVzZXIiKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiPHNwYW4gY2xhc3M9J3JlcGx5LWxpbmsnIHN0eWxlPSdjdXJzb3I6cG9pbnRlcjsnIHRpdGxlPSdyZXBseSc+ICZjcmFycjs8L3NwYW4+IikuY2xpY2socmVwbHkpLmluc2VydEFmdGVyKHRoaXMpOwogICAgICAgIH0pOwogICAgfQogICAgICAgICAgICAKICAgICQoIi5jb21tZW50cyIpLmVhY2gocHV0X3JlcGx5X2xpbmtzKTsKICAgIAogICAgZnVuY3Rpb24gZ29vZGlmeShzKSB7CiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvICsvZywgIiIpOwogICAgfSAgCiAgICAKfSk7"},{"name":"Stack Exchange like I like it","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["/^https?:\\/\\/(chat|blog|careers)\\..*/"],"orig_includes":[],"orig_matches":["*://stackexchange.com/*","*://*.stackexchange.com/*/*","*://stackoverflow.com/*/*","*://*.stackoverflow.com/*/*","*://stackapps.com/*/*","*://serverfault.com/*/*","*://superuser.com/*/*","*://askubuntu.com/*/*","*://mathoverflow.net/*/*"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831303},"enabled":true,"position":3,"file_url":"https://github.com/calraith/gm_scripts/raw/master/se_like_I_like_it.user.js","uuid":"a490bb56-67fc-4b13-ba27-3ac98ef75e75","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFN0YWNrIEV4Y2hhbmdlIGxpa2UgSSBsaWtlIGl0Ci8vIEBuYW1lc3BhY2UgICBodHRwOi8vc3RhY2thcHBzLm9yZy8KLy8gQGRlc2NyaXB0aW9uIERvdWJsZS1jbGljayBhIGNvZGUgYmxvY2sgdG8gc2VsZWN0IGFsbCArIGVkaXQgYm94IGF1dG8gaW5kZW50IC8gdGFiIGtleSBiZWhhdmlvciBlbmhhbmNlbWVudHMKLy8gQG1hdGNoCQkqOi8vc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2gJCSo6Ly8qLnN0YWNrZXhjaGFuZ2UuY29tLyovKgovLyBAbWF0Y2gJCSo6Ly9zdGFja292ZXJmbG93LmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vKi5zdGFja292ZXJmbG93LmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vc3RhY2thcHBzLmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vc2VydmVyZmF1bHQuY29tLyovKgovLyBAbWF0Y2gJCSo6Ly9zdXBlcnVzZXIuY29tLyovKgovLyBAbWF0Y2gJCSo6Ly9hc2t1YnVudHUuY29tLyovKgovLyBAbWF0Y2gJCSo6Ly9tYXRob3ZlcmZsb3cubmV0LyovKgovLyBAZXhjbHVkZSAgICAgL15odHRwcz86XC9cLyhjaGF0fGJsb2d8Y2FyZWVycylcLi4qLwovLyBAdmVyc2lvbiAgICAgMS41LjEKLy8gQGRvd25sb2FkVVJMCWh0dHBzOi8vZ2l0aHViLmNvbS9jYWxyYWl0aC9nbV9zY3JpcHRzL3Jhdy9tYXN0ZXIvc2VfbGlrZV9JX2xpa2VfaXQudXNlci5qcwovLyBAZ3JhbnQgICAgICAgR01faW5mbwovLyA9PS9Vc2VyU2NyaXB0PT0KCi8vIFwvLisvCnZhciBrZXkgPSB7Cgl0YWI6IDksCgllbnRlcjogMTMsCgllbmQ6IDM1LAoJaG9tZTogMzYsCgljb2RlOiAwLAoJaGlzdG9yeTogWzAsMF0sCgljb250YWluczogZnVuY3Rpb24od2hhdCkgewoJCS8vIGZhc3Rlc3QgbG9vcCBtZXRob2QgZm9yIHRoaXMgYXBwbGljYXRpb24KCQkvLyBzZWUgaHR0cDovL2pzcGVyZi5jb20vb2JqZWN0LWl0ZXJhdGlvbi1saWtlLWEtYm9zcwoJCWZvciAodmFyIGkgaW4gdGhpcykgewoJCQlpZiAoaSA9PT0gJ2NvZGUnKSByZXR1cm4gZmFsc2U7CgkJCWlmICh0aGlzW2ldID09PSB3aGF0KSByZXR1cm4gdHJ1ZTsKCQl9Cgl9Cn07CgpmdW5jdGlvbiBmaXhUYWJzKGUpIHsKCWUgPSBlIHx8IGV2ZW50OwoJa2V5LmNvZGUgPSBlLmtleUNvZGUgfHwgZS5jaGFyQ29kZTsKCgkvLyBjYXB0dXJlIHRoaXMgKyBwcmV2aW91cyBrZXkgY29kZSB0byBkZXRlY3QgZG91YmxlIGhvbWUgb3IgZW5kCglrZXkuaGlzdG9yeS5wdXNoKGtleS5jb2RlKTsKCWtleS5oaXN0b3J5LnNoaWZ0KCk7CgoJaWYgKCFrZXkuY29udGFpbnMoa2V5LmNvZGUpKSByZXR1cm47CS8vIG5vdCBhIGNoYXJhY3RlciB0aGlzIHNjcmlwdCBoYW5kbGVzCgoJdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDsKCWlmIChlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAndGV4dGFyZWEnKSByZXR1cm47CS8vIG5vdCBpbiBhIHRleHRhcmVhCglpZiAoZWwubmFtZSA9PSAnY29tbWVudCcpIHJldHVybjsJLy8gbm90IGFuIGVkaXQgZW50cnkgYm94CgoJLy8gQWxsIHN5c3RlbXMgZ28hCgl2YXIgc3RhcnQgPSBlbC5zZWxlY3Rpb25TdGFydCwKCQllbmQgPSBlbC5zZWxlY3Rpb25FbmQsCgkJc2hpZnRTdGFydCA9IHNoaWZ0RW5kID0gMCwKCQkvLyBpbmRlbnQgcmVnZXhwIHJlcGxhY2VtZW50IGZ1bmN0aW9uCgkJdGFiRmlsbCA9IGZ1bmN0aW9uKG1hdGNoLCAkMSwgb2Zmc2V0KSB7CgkJCWZvciAodmFyIGk9MCwgcmV0PScnLCBsZW49bWF0Y2gubGVuZ3RoLCBtPWxlbiAvIDQ7IGk8bTsgaSsrKSByZXQgKz0gJ1x0JzsKCQkJLy8gY29tcGVuc2F0ZSBmb3IgY3Vyc29yIGRyaWZ0CgkJCWlmIChvZmZzZXQgPCBzdGFydCkgewoJCQkJc2hpZnRTdGFydCAtPSAobGVuIC0gaSk7CgkJCQlpZiAob2Zmc2V0ICsgbGVuID4gc3RhcnQpIHNoaWZ0U3RhcnQgKz0gb2Zmc2V0ICsgbGVuIC0gc3RhcnQ7CgkJCX0KCQkJaWYgKG9mZnNldCA8IGVuZCkgewoJCQkJc2hpZnRFbmQgLT0gKGxlbiAtIGkpOwoJCQkJaWYgKG9mZnNldCArIGxlbiA+IGVuZCkgc2hpZnRFbmQgKz0gb2Zmc2V0ICsgbGVuIC0gZW5kOwoJCQl9CgkJCXJldHVybiByZXQ7CgkJfTsKCgkvLyBSZXBsYWNlIHNwYWNlIGluZGVudHMgd2l0aCB0YWJzLgoJZWwudmFsdWUgPSBlbC52YWx1ZS5yZXBsYWNlKC8oPzpeXHQqKSggezR9KSsvbWcsIHRhYkZpbGwpOwoJaWYgKHNoaWZ0U3RhcnQpIHsKCQlzdGFydCArPSBzaGlmdFN0YXJ0OyBlbmQgKz0gc2hpZnRFbmQ7CgkJZWwuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIGVuZCk7Cgl9CgoJc2VsZWN0ZWQgPSBlbC52YWx1ZS5zdWJzdHJpbmcoc3RhcnQsIGVuZCk7Cgl2YXIgaW5wdXRBcnIgPSBlbC52YWx1ZS5zcGxpdCgnXG4nKTsKCgkvLyBpbnB1dEFycltyb3ddIGNvbnRhaW5zIHN0YXJ0LCBhbmQgcG9zIGNvbnRhaW5zIHRoZSBpZHggb2YgdGhlIGxhc3QgY2hhciBvZiB0aGUgcHJldmlvdXMgbGluZQoJZm9yICh2YXIgcm93PXBvcz0wO3BvcytpbnB1dEFycltyb3ddLmxlbmd0aDxzdGFydDtyb3crKyl7cG9zKz1pbnB1dEFycltyb3ddLmxlbmd0aCsxfQoKCXN3aXRjaCAoa2V5LmNvZGUpIHsKCgkJY2FzZSBrZXkudGFiOgoKCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoKCQkJLy8gaWYgc2VsZWN0aW9uIHNwYW5zIG1vcmUgdGhhbiBvbmUgbGluZQoJCQlpZiAoc2VsZWN0ZWQuaW5kZXhPZignXG4nKSA+IC0xKSB7CgkJCQkvLyBjb3VudCBudW1iZXIgb2Ygcm93cyBpbmNsdWRlZCBpbiBzZWxlY3Rpb24KCQkJCXZhciByb3dzU2VsZWN0ZWQgPSBzZWxlY3RlZC5zcGxpdCgnXG4nKS5sZW5ndGg7CgoJCQkJLy8gZXhwYW5kIHNlbGVjdGlvbiB0byBjb3ZlciBiZWdpbm5pbmcgb2Ygc3RhcnQgcm93IHVudGlsIGVuZCBvZiBlbmQgcm93CgkJCQkvLyByZXBsYWNlIGFsbCA0LXNwYWNlIHNlcXVlbmNlcyB3aXRoIGEgdGFiIGFuZCB1cGRhdGUgcG9zaXRpb24gaW5kZXhlcwoJCQkJLy8gaWYgc2hpZnQga2V5LCByZW1vdmUgb25lIGxldmVsIG9mIGluZGVudCBwZXIgc2VsZWN0ZWQgcm93OyBvdGhlcndpc2UsIGFkZCBhIGxldmVsIG9mIGluZGVudC4KCQkJCWZvciAoc3RhcnQgPSBwb3MsIHN0b3AgPSByb3cgKyByb3dzU2VsZWN0ZWQ7IHJvdyA8IHN0b3A7IHJvdysrKSB7CgkJCQkJaW5wdXRBcnJbcm93XSA9IChlLnNoaWZ0S2V5KSA/IGlucHV0QXJyW3Jvd10ucmVwbGFjZSgvXiggezR9fFx0KS8sJycpIDogJ1x0JyArIGlucHV0QXJyW3Jvd107CgkJCQkJcG9zKz1pbnB1dEFycltyb3ddLmxlbmd0aCArIDE7CgkJCQl9CgkJCQllbmQgPSAtLXBvczsKCQkJCWVsLnZhbHVlID0gaW5wdXRBcnIuam9pbignXG4nKTsKCQkJCWVsLnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0LCBlbmQpOwoKCQkJLy8gZWxzZSBzZWxlY3Rpb24gZG9lcyBub3Qgc3BhbiBtdWx0aXBsZSBsaW5lcy4KCQkJLy8gSWYgbm90IHNoaWZ0IGtleSwgc2ltcGx5IGluc2VydCBhIHRhYiAob3ZlcndyaXRpbmcgYW55IGxlYWRpbmcgc3BhY2VzKSBhbmQgYWR2YW5jZSB0aGUgY3Vyc29yLgoJCQl9IGVsc2UgaWYgKCFlLnNoaWZ0S2V5KSB7CgoJCQkJZWwudmFsdWUgPSBlbC52YWx1ZS5zdWJzdHJpbmcoMCwgc3RhcnQpLnJlcGxhY2UoLyggKykkLywgZnVuY3Rpb24oJDEpIHsgc3RhcnQgLT0gJDEubGVuZ3RoOyByZXR1cm4gJyc7IH0pCgkJCQkJKyAnXHQnCgkJCQkJKyBlbC52YWx1ZS5zdWJzdHJpbmcoZW5kKS5yZXBsYWNlKC9eICsvLCAnJyk7CgkJCQllbC5zZXRTZWxlY3Rpb25SYW5nZSgrK3N0YXJ0LCBzdGFydCk7CgoJCQkvLyBvdGhlcndpc2UsIGhhbmRsZSBzaGlmdCt0YWIKCQkJfSBlbHNlIHsKCgkJCQkvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgkJCQlUaGUgZm9sbG93aW5nIGNvZGUgYmxvY2sgbWltaWNzIHRoZSBiZWhhdmlvciBvZiBOb3RlcGFkKysuCgkJCQlJZiBhIHVzZXIgZG9lcyBzaGlmdC10YWIsIE5QUCBkb2VzIG5vdCBjaGFuZ2UgdGhlCgkJCQlpbmRlbnRhdGlvbiBvZiB0aGUgbGluZSB1bmxlc3MgdGhlIGN1cnNvciBpcyBhdCB0aGUKCQkJCWJlZ2lubmluZyBvZiBhbGwgbm9uLXdoaXRlc3BhY2Ugb24gdGhlIGxpbmUuICBJbnN0ZWFkLAoJCQkJTlBQIG1vdmVzIHRoZSBjdXJzb3IgYmFjayBvbmUgdGFiIHN0b3AuCgkJCQk9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09ICovCgkJCQl2YXIgY3Vyc29ySW5Qb3MgPSBzdGFydCAtIHBvcywgY3Vyc29yTW92ZWQsIHRhYlN0b3A7CgoJCQkJLy8gV2hpbGUgdGhlIGN1cnNvciBpcyBub3QgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZSBhbmQgdGhlcmUncwoJCQkJLy8gbm9uLXdoaXRlc3BhY2UgYmV0d2VlbiB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaW5lIGFuZCB0aGUgY3Vyc29yLAoJCQkJLy8gYW5kIHN0YXJ0IGlzIG5vdCBhdCB0aGUgcHJldmlvdXMgdGFiIHN0b3AKCQkJCXdoaWxlIChjdXJzb3JJblBvcyAmJiAvXFMvLnRlc3QoaW5wdXRBcnJbcm93XS5zdWJzdHJpbmcoMCxjdXJzb3JJblBvcykpICYmICF0YWJTdG9wKSB7CgkJCQkJY3Vyc29yTW92ZWQgPSBzdGFydC0tOwoJCQkJCWN1cnNvckluUG9zLS07CgkJCQkJdmFyIGluZGVudExldmVsID0gKGlucHV0QXJyW3Jvd10ubWF0Y2goL15ccysvKSB8fCBbJyddKVswXS5sZW5ndGgsCgkJCQkJCXRlbXBDdXJzb3IgPSBjdXJzb3JJblBvcyAtIGluZGVudExldmVsLAoJCQkJCQl0YWJTdG9wID0gISh0ZW1wQ3Vyc29yICUgNCk7CgkJCQl9CgoJCQkJLy8gSWYgY3Vyc29yIHdhcyBub3QgbW92ZWQsIG91dGRlbnQuCgkJCQlpZiAoIWN1cnNvck1vdmVkKSB7CgkJCQkJaWYgKC9ccy8udGVzdChpbnB1dEFycltyb3ddLmNoYXJBdChjdXJzb3JJblBvcykpKSBzdGFydCsrOwoJCQkJCWlucHV0QXJyW3Jvd10gPSBpbnB1dEFycltyb3ddLnJlcGxhY2UoL14oICt8XHQpLywKCQkJCQkJZnVuY3Rpb24oJDEpIHsgaWYgKHN0YXJ0ID4gcG9zKSBzdGFydCAtPSAkMS5sZW5ndGg7IHJldHVybiAnJzsgfQoJCQkJCSk7CgkJCQkJZWwudmFsdWUgPSBpbnB1dEFyci5qb2luKCdcbicpOwoJCQkJfQoJCQkJZWwuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIHN0YXJ0KTsKCQkJfQoKCQlicmVhazsKCgkJY2FzZSBrZXkuZW50ZXI6CgoJCQllLnByZXZlbnREZWZhdWx0KCk7CgoJCQkvLyBjdHJsK0VudGVyIHRvIHN1Ym1pdAoJCQlpZiAoZS5jdHJsS2V5KSB7CgkJCQlkbyB7IGVsID0gZWwucGFyZW50Tm9kZSB8fCBudWxsOyB9IHdoaWxlIChlbCAmJiBlbC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnZm9ybScpOwoJCQkJcmV0dXJuIGVsID8gZWwuc3VibWl0KCkgOiBmYWxzZTsKCQkJfQoKCQkJLy8gdW5pZnkgaW5kZW50YXRpb24gb2YgcHJldmlvdXMgbGluZSBhcyB0YWJzCgkJCXZhciBpbmRlbnQgPSAoaW5wdXRBcnJbcm93XS5tYXRjaCgvXlxzKy8pIHx8IFsnJ10pWzBdOwoKCQkJLy8gaW5zZXJ0IG5ld2xpbmUgKyBpbmRlbnQsIGRpc2NhcmRpbmcgY29udGVudHMgb2YgdXNlciBzZWxlY3Rpb24gaWYgYW55CgkJCWVsLnZhbHVlID0gZWwudmFsdWUuc3Vic3RyaW5nKDAsIHBvcykKCQkJCSsgaW5wdXRBcnJbcm93XS5zdWJzdHJpbmcoMCwgc3RhcnQgLSBwb3MpCgkJCQkrICdcbicgKyBpbmRlbnQKCQkJCSsgZWwudmFsdWUuc3Vic3RyaW5nKGVuZCk7CgkJCXN0YXJ0Kz1pbmRlbnQubGVuZ3RoKzE7CgkJCWVsLnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0LCBzdGFydCk7CgoJCWJyZWFrOwoKCQljYXNlIGtleS5ob21lOgoKCQkJdmFyIGN1cnNvckluUG9zID0gc3RhcnQgLSBwb3MsIG5ld1N0YXJ0ID0gc3RhcnQsIGN1cnNvck1vdmVkOwoKCQkJLy8gSWYgbm90IGRvdWJsZS1wcmVzc2VkIGFuZCBsaW5lIGlzIHdyYXBwZWQsIGFsbG93IGRlZmF1bHQgYmVoYXZpb3IKCQkJaWYgKGN1cnNvckluUG9zID4gZWwuY29scyAmJiBrZXkuaGlzdG9yeVswXSAhPT0ga2V5LmhvbWUpIHJldHVybjsKCQkJaWYgKGtleS5oaXN0b3J5WzBdID09IGtleS5oaXN0b3J5WzFdKSBrZXkuaGlzdG9yeVsxXSA9IDA7CgoJCQllLnByZXZlbnREZWZhdWx0KCk7CgoJCQkvLyBJZiBjdXJzb3IgaXMgaW4gdGhlIHdoaXRlc3BhY2UgYXQgdGhlIGJlZ2lubmluZyBvZiB0aGUgbGluZSwgYWR2YW5jZSB0byB0ZXh0CgkJCXdoaWxlIChjdXJzb3JJblBvcyA8IGlucHV0QXJyW3Jvd10ubGVuZ3RoICYmIC9ccy8udGVzdChpbnB1dEFycltyb3ddLmNoYXJBdChjdXJzb3JJblBvcykpKSB7CgkJCQljdXJzb3JNb3ZlZCA9IG5ld1N0YXJ0Kys7CgkJCQljdXJzb3JJblBvcysrOwoJCQl9CgoJCQkvLyBJZiBjdXJzb3IgaXMgYWZ0ZXIgbm9uLXdoaXRlc3BhY2UsIHJlZ3Jlc3MgdG8gYmVnaW5uaW5nIG9mIHRleHQKCQkJd2hpbGUgKGN1cnNvckluUG9zICYmIC9cUy8udGVzdChpbnB1dEFycltyb3ddLnN1YnN0cmluZygwLGN1cnNvckluUG9zKSkpIHsKCQkJCWN1cnNvck1vdmVkID0gbmV3U3RhcnQtLTsKCQkJCWN1cnNvckluUG9zLS07CgkJCX0KCgkJCS8vIElmIHRoZSBjdXJzb3Igd2Fzbid0IG1vdmVkLCBtb3ZlIGl0IHRvIHRoZSBiZWdpbm5pbmcgb2YgdGhlIGxpbmUuCgkJCWlmICghY3Vyc29yTW92ZWQpIG5ld1N0YXJ0IC09IGN1cnNvckluUG9zOwoKCQkJaWYgKGUuc2hpZnRLZXkpIHsKCQkJCWlmIChzdGFydCA+IG5ld1N0YXJ0KSBlbC5zZXRTZWxlY3Rpb25SYW5nZShuZXdTdGFydCwgZW5kLCAnYmFja3dhcmQnKTsKCQkJCWVsc2UgZWwuc2V0U2VsZWN0aW9uUmFuZ2Uoc3RhcnQsIG5ld1N0YXJ0KTsKCQkJfQoJCQllbHNlIGVsLnNldFNlbGVjdGlvblJhbmdlKG5ld1N0YXJ0LCBuZXdTdGFydCk7CgoJCWJyZWFrOwoKCQljYXNlIGtleS5lbmQ6CgoJCQkvLyBpZiBub3QgZG91YmxlLXByZXNzZWQsIGFsbG93IGRlZmF1bHQgYmVoYXZpb3IuCgkJCWlmIChpbnB1dEFycltyb3ddLmxlbmd0aCA8PSBlbC5jb2xzIHx8IGtleS5oaXN0b3J5WzBdICE9PSBrZXkuZW5kKSByZXR1cm47CgkJCWlmIChrZXkuaGlzdG9yeVswXSA9PSBrZXkuaGlzdG9yeVsxXSkga2V5Lmhpc3RvcnlbMV0gPSAwOwoKCQkJZS5wcmV2ZW50RGVmYXVsdCgpOwoKCQkJdmFyIG5ld0VuZCA9IHBvcyArIGlucHV0QXJyW3Jvd10ubGVuZ3RoOwoKCQkJLy8gc2VsZWN0IHRvIG5leHQgXG4KCQkJaWYgKGUuc2hpZnRLZXkpIGVsLnNldFNlbGVjdGlvblJhbmdlKHN0YXJ0LCBuZXdFbmQpOwoJCQllbHNlIGVsLnNldFNlbGVjdGlvblJhbmdlKG5ld0VuZCwgbmV3RW5kKTsKCgkJYnJlYWs7CgoJfQkvLyBlbmQgc3dpdGNoKGtleS5jb2RlKQp9CS8vIGVuZCBmaXhUYWJzKCkKCmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBmaXhUYWJzLCB0cnVlKTsKCi8qIGVuZCBrZXlib2FyZCBiZWhhdmlvciBtb2RzICovCgpmdW5jdGlvbiBzZWxlY3RBbGwoKSB7Cgl2YXIgcmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpOwoJLy8gc2VsZWN0IHBhcmVudCBpZiBwYXJlbnQgPT09IDxwcmU+OyBlbHNlIHNlbGVjdCBzZWxmCglyYW5nZS5zZWxlY3ROb2RlQ29udGVudHModGhpcy5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAncHJlJyA/IHRoaXMuY2hpbGROb2Rlc1swXSA6IHRoaXMpOwoJdmFyIHNlbGVjdGlvbiA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTsKCXNlbGVjdGlvbi5yZW1vdmVBbGxSYW5nZXMoKTsKCXNlbGVjdGlvbi5hZGRSYW5nZShyYW5nZSk7Cn0KCmZ1bmN0aW9uIGFkZERibENsaWNrKCkgewoJdmFyIGNvZGUgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgnY29kZScpOwoJZm9yICh2YXIgaT0wOyBpPGNvZGUubGVuZ3RoOyBpKyspIHsKCQkvKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoJCUlmIHBhcmVudCBub2RlIGlzIDxwcmU+LCBhZGQgbGlzdGVuZXIgdG8gcGFyZW50LiAgVGhpcyBhbGxvd3MgZG91YmxlLQoJCWNsaWNraW5nIGFueXdoZXJlIHdpdGhpbiBhIGNvZGUgYmxvY2sgdG8gc2VsZWN0IGFsbCwgYXMgd2VsbCBhcyBkb3VibGUtCgkJY2xpY2tpbmcgaW5saW5lIGNvZGUgc25pcHBldHMgdGhlIHBvc3RlciBlbmNsb3NlZCBpbiBiYWNrdGlja3MuCgkJPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0gKi8KCQl2YXIgbm9kZSA9IChjb2RlW2ldLnBhcmVudE5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ3ByZScgPyBjb2RlW2ldLnBhcmVudE5vZGUgOiBjb2RlW2ldKTsKCQlub2RlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgc2VsZWN0QWxsLCB0cnVlKTsKCQlub2RlLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgc2VsZWN0QWxsLCB0cnVlKTsKCQlub2RlLnRpdGxlID0gJ2RvdWJsZS1jbGljayB0byBzZWxlY3QgYWxsJzsKCX0KfQphZGREYmxDbGljaygpOwoKLy8gbGlzdGVuIGZvciBzdHVmZiBsaWtlICJzaG93IDEgbW9yZSBjb21tZW50Igp2YXIgY3JlZXAgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihhZGREYmxDbGljayk7CmNyZWVwLm9ic2VydmUoZG9jdW1lbnQsIHtzdWJ0cmVlOiB0cnVlLCBjaGlsZExpc3Q6IHRydWV9KTsKCi8qIGVuZCBkb3VibGUtY2xpY2sgbW9kcyAqLwoKLy8gSWYgb24gaHR0cDovL3N0YWNrZXhjaGFuZ2UuY29tLywgY2hlY2sgZm9yIHNpdGVzIG5vdCBpbmNsdWRlZCBpbiBtZXRhZGF0YSBAbWF0Y2ggZGlyZWN0aXZlcwppZiAoL2h0dHBzPzpcL1wvc3RhY2tleGNoYW5nZVwuY29tL2kudGVzdChsb2NhdGlvbi5ocmVmKSAmJiBHTV9pbmZvKSB7Cgl2YXIgWEhSID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7Cgl3aXRoIChYSFIpIHsKCQlvcGVuKCJHRVQiLCAiaHR0cDovL3N0YWNrZXhjaGFuZ2UuY29tL3NpdGVzP3ZpZXc9bGlzdCIsIHRydWUpOwoJCW9uZXJyb3IgPSBmdW5jdGlvbigpIHsgcmV0dXJuIGZhbHNlOyB9OwoJCW9ubG9hZCA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfTsKCQlvbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHsKCQkJaWYgKFhIUi5yZWFkeVN0YXRlID09IDQpIHsKCQkJCXZhciBkb20gPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoKTsKCQkJCWRvbS5kb2N1bWVudEVsZW1lbnQuaW5uZXJIVE1MID0gWEhSLnJlc3BvbnNlVGV4dDsKCQkJCXZhciBsaXN0ID0gZG9tLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2xpc3Qtdmlldy1jb250YWluZXInKVswXS5nZXRFbGVtZW50c0J5VGFnTmFtZSgnYScpOwoJCQkJdmFyIG1hdGNoZXMgPSBHTV9pbmZvLnNjcmlwdC5tYXRjaGVzOwoJCQkJZm9yICh2YXIgaT1mb3VuZD0wOyBpPGxpc3QubGVuZ3RoOyBpKyspIHsKCQkJCQlpZiAoLyh0d2l0dGVyfGJsb2cpL2kudGVzdChsaXN0W2ldLmhyZWYpKSBjb250aW51ZTsKCQkJCQlmb3IgKHZhciBqPTA7IGo8bWF0Y2hlcy5sZW5ndGg7IGorKykgewoJCQkJCQl2YXIgcnhwID0gbmV3IFJlZ0V4cCgnXicgKyBtYXRjaGVzW2pdLnJlcGxhY2UoL1wvXCokLywnJykucmVwbGFjZSgvW1wuXC9cKl0vZywgZnVuY3Rpb24obSkgewoJCQkJCQkJcmV0dXJuIChtID09ICcqJykgPyAnLionIDogJ1xcJyArIG07CgkJCQkJCX0pICsgJyQnLCAnaScpOwoJCQkJCQlpZiAocnhwLnRlc3QobGlzdFtpXS5ocmVmKSkgeyBmb3VuZD0xOyBicmVhazsgfQoJCQkJCX0KCQkJCQlpZiAoIWZvdW5kKSBjb25zb2xlLmxvZygnTmV3IHN0YWNrZXhjaGFuZ2UgZG9tYWluOiAnICsgbGlzdFtpXS5ocmVmKTsKCQkJCQllbHNlIGZvdW5kPTA7CgkJCQl9CgkJCX0KCQl9OwoJCXNlbmQoJycpOwoJfQp9Cg=="},{"name":"StackExchange obvious followed link color","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?\\:\\/\\/([a-z\\.]*\\.)?stackexchange\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?askubuntu\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?superuser\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?serverfault\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?stackoverflow\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?answers.onstartups\\.com\\/.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831318},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/3362-stackexchange-obvious-followed-link-color/code/StackExchange%20obvious%20followed%20link%20color.user.js","uuid":"6ea166e0-79ab-4e14-9f4e-fe17128833fc","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgU3RhY2tFeGNoYW5nZSBvYnZpb3VzIGZvbGxvd2VkIGxpbmsgY29sb3IKLy8gQG5hbWVzcGFjZSBodHRwOi8vb3N0ZXJtaWxsZXIub3JnLwovLyBAdmVyc2lvbiAxLjAwCi8vIEBkZXNjcmlwdGlvbiBDaGFuZ2UgdGhlIGNvbG9yIG9mIGZvbGxvd2VkIGxpbmtzIG9uIGFsbCBTdGFja0V4Y2hhbmdlIHNpdGVzIHNvIHRoZXkgdGhleSBhcmUgZWFzaWx5IGRpc3Rpbmd1aXNoYWJsZS4KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9zdGFja2V4Y2hhbmdlXC5jb21cLy4qLwovLyBAaW5jbHVkZSAvaHR0cHM/XDpcL1wvKFthLXpcLl0qXC4pP2Fza3VidW50dVwuY29tXC8uKi8KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9zdXBlcnVzZXJcLmNvbVwvLiovCi8vIEBpbmNsdWRlIC9odHRwcz9cOlwvXC8oW2EtelwuXSpcLik/c2VydmVyZmF1bHRcLmNvbVwvLiovCi8vIEBpbmNsdWRlIC9odHRwcz9cOlwvXC8oW2EtelwuXSpcLik/c3RhY2tvdmVyZmxvd1wuY29tXC8uKi8KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9hbnN3ZXJzLm9uc3RhcnR1cHNcLmNvbVwvLiovCi8vIEBncmFudCBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gYWRkQ3NzKGNzc1N0cmluZykgewogICAgdmFyIG5ld0NzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CiAgICBuZXdDc3MudHlwZSA9ICJ0ZXh0L2NzcyI7CiAgICBuZXdDc3MuaW5uZXJIVE1MID0gY3NzU3RyaW5nOwogICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChuZXdDc3MpOwogICAgY29uc29sZS5sb2coImFwcGVuZGVkIGNzcyIpOwp9CgphZGRDc3MgKAogICAgJy5xdWVzdGlvbi1oeXBlcmxpbms6dmlzaXRlZCwgLnJlc3VsdC1saW5rIGE6dmlzaXRlZCB7Y29sb3I6ICMwMDAwOEIgISBpbXBvcnRhbnQ7fScKKTsg"},{"name":"Unclosed Request Review Script","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://chat.stackoverflow.com/rooms/41570/*","*://chat.stackoverflow.com/search?q=tagged%2Fcv-pls&Room=41570&page=*&pagesize=50&sort=newest"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831340},"enabled":true,"position":5,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/UnclosedRequestReview.user.js","uuid":"ea33379b-d41e-4b0a-8231-2ab1c5a6b70f","source":""},{"name":"Stack Exchange: Add Timeline and Revisions links to posts","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/questions/*","*://*.mathoverflow.net/questions/*","*://*.serverfault.com/questions/*","*://*.stackapps.com/questions/*","*://*.stackexchange.com/questions/*","*://*.stackoverflow.com/questions/*","*://*.superuser.com/questions/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831358},"enabled":true,"position":6,"file_url":"https://gist.github.com/BrockA/5761948/raw/Add_Timeline_Button_to_Stack_Exchange_questions.user.js","uuid":"88d06f2f-ef9a-464b-85ee-432a3c718aa2","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFN0YWNrIEV4Y2hhbmdlOiBBZGQgVGltZWxpbmUgYW5kIFJldmlzaW9ucyBsaW5rcyB0byBwb3N0cwovLyBAZGVzY3JpcHRpb24gQWRkcyBsaW5rcyB0byBwb3N0cyB0byBhbHdheXMgc2hvdyBoaXN0b3J5IGFuZCBsaW5rcyB0byBxdWVzdGlvbnMgdG8gc2hvdyB0aGUgVGltZWxpbmUiLgovLyBAbmFtZXNwYWNlICAgU3RhY2tFeGNoYW5nZQovLyBAbWF0Y2ggICAgICAgKjovLyouYXNrdWJ1bnR1LmNvbS9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyoubWF0aG92ZXJmbG93Lm5ldC9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyouc2VydmVyZmF1bHQuY29tL3F1ZXN0aW9ucy8qCi8vIEBtYXRjaCAgICAgICAqOi8vKi5zdGFja2FwcHMuY29tL3F1ZXN0aW9ucy8qCi8vIEBtYXRjaCAgICAgICAqOi8vKi5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyouc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLyoKLy8gQG1hdGNoICAgICAgICo6Ly8qLnN1cGVydXNlci5jb20vcXVlc3Rpb25zLyoKLy8gQHZlcnNpb24gICAgIDEuMgovLyBAaGlzdG9yeSAgICAgMS4yIFVwZGF0ZWQgbWF0Y2ggbGlzdAovLyBAaGlzdG9yeSAgICAgMS4xIEFkZGVkIHJldmlzaW9ucyBsaW5rCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gYWRkVXRpbGl0eUxpbmtzICgkKSB7CgogICAgJCgiLnBvc3QtbWVudSIpLmVhY2ggKCBmdW5jdGlvbiAoSikgewogICAgICAgIHZhciBqVGhpcyAgID0gJCh0aGlzKTsKICAgICAgICB2YXIgaHJlZiAgICA9IGpUaGlzLmZpbmQgKCdhW2NsYXNzPSJzaG9ydC1saW5rIl0nKS5hdHRyICgiaHJlZiIpOwogICAgICAgIHZhciBpZE10Y2ggID0gaHJlZi5zcGxpdCAoL1txYV1cLyhcZCspLyk7CiAgICAgICAgaWYgKGlkTXRjaC5sZW5ndGggPiAyKSB7CiAgICAgICAgICAgIHZhciBpZCAgPSBpZE10Y2hbMV07CiAgICAgICAgICAgIGpUaGlzLmFwcGVuZCAoCiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9ImxzZXAiPnw8L3NwYW4+PGEgaHJlZj0iL3Bvc3RzLycgKyBpZCArICcvcmV2aXNpb25zIj5yZXZpc2lvbnM8L2E+JwogICAgICAgICAgICApOwoKICAgICAgICAgICAgaWYgKEogPT09IDApIHsgIC8vLS0gUXVlc3Rpb24gb25seQogICAgICAgICAgICAgICAgalRoaXMuYXBwZW5kICgKICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9ImxzZXAiPnw8L3NwYW4+PGEgaHJlZj0iL3Bvc3RzLycgKyBpZCArICcvdGltZWxpbmUiPnRpbWVsaW5lPC9hPicKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9ICk7CiAgICAkKCIucmV2Y2VsbDMudm0+ZGl2IikuZWFjaCAoZnVuY3Rpb24gKCkgewogICAgICAgIC8vLS0gTG9va3MgbGlrZSBhIHRpbWVib21iLi4uCiAgICAgICAgZ3VpZCA9ICQodGhpcykuZmluZCAoImEiKS5hdHRyICgiaHJlZiIpLm1hdGNoICgvXHd7OH0gKD86LVx3ezR9ICl7M30tXHd7MTJ9LylbMF07CiAgICAgICAgJCh0aGlzKS5wcmVwZW5kICgnPGEgaHJlZj0iI3JldicgKyBndWlkICsgJyI+bGluazwvYT48c3BhbiBjbGFzcz0ibHNlcCI+fDwvc3Bhbj4nKTsKICAgIH0gKTsKfQoKd2l0aFBhZ2VzX2pRdWVyeSAoYWRkVXRpbGl0eUxpbmtzKTsKCmZ1bmN0aW9uIHdpdGhQYWdlc19qUXVlcnkgKE5BTUVEX0Z1bmN0aW9uVG9SdW4pIHsKICAgIC8vLS0tIFVzZSBuYW1lZCBmdW5jdGlvbnMgZm9yIGNsYXJpdHkgYW5kIGRlYnVnZ2luZy4uLgogICAgdmFyIGZ1bmNUZXh0ICAgICAgICA9IE5BTUVEX0Z1bmN0aW9uVG9SdW4udG9TdHJpbmcgKCk7CiAgICB2YXIgZnVuY05hbWUgICAgICAgID0gZnVuY1RleHQucmVwbGFjZSAoL15mdW5jdGlvblxzKyhcdyspXHMqXCgoLnxcbnxccikrJC8sICIkMSIpOwogICAgdmFyIHNjcmlwdCAgICAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgKCJzY3JpcHQiKTsKICAgIHNjcmlwdC50ZXh0Q29udGVudCAgPSBmdW5jVGV4dCArICJcblxuIjsKICAgIHNjcmlwdC50ZXh0Q29udGVudCArPSAnalF1ZXJ5KGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24gKCkgeycgKyBmdW5jTmFtZSArICcoalF1ZXJ5KTt9ICk7JzsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgKHNjcmlwdCk7Cn07Cg=="},{"name":"Chat Reply Helper for Stack Exchange sites","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/chat\\.stackexchange\\.com/.*$/","/^https?:\\/\\/chat\\.stackoverflow\\.com/.*$/","/^https?:\\/\\/chat\\.meta\\.stackexchange\\.com/.*$/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831374},"enabled":true,"position":7,"file_url":"https://raw.githubusercontent.com/oliversalzburg/se-chat-reply-highlight/master/dist/se-chat-replyhelper.user.js","uuid":"4d7672e8-fd1e-4a91-a55f-fbe9bc041877","source":""},{"name":"Helpful Flag Percentage","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.stackexchange.com/users/flag-summary/*","*://*.stackoverflow.com/users/flag-summary/*","*://*.stackapps.com/users/flag-summary/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831385},"enabled":true,"position":8,"uuid":"a0dec57b-c225-47bc-8e4a-4677037b017f","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBIZWxwZnVsIEZsYWcgUGVyY2VudGFnZQovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTQ1NDUzOC8KLy8gQGF1dGhvciAgICAgICBlbmtpCi8vIEBtYXRjaCAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vdXNlcnMvZmxhZy1zdW1tYXJ5LyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5zdGFja292ZXJmbG93LmNvbS91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnN0YWNrYXBwcy5jb20vdXNlcnMvZmxhZy1zdW1tYXJ5LyoKLy8gPT0vVXNlclNjcmlwdD09Ci8qanNsaW50IGJyb3dzZXI6IHRydWUsIHdoaXRlOiB0cnVlKi8KLypqc2xpbnQgdGhpcyAqLwovKmdsb2JhbCAkLCBqUXVlcnkqLwokKGZ1bmN0aW9uICgpIHsKJ3VzZSBzdHJpY3QnOwoKICAgIHZhciBoZWxwZnVsRmxhZ3MgPSAwOwogICAgJCgidGQgPiBhOmNvbnRhaW5zKCdoZWxwZnVsJykiKS5wYXJlbnQoKS5wcmV2KCkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgaGVscGZ1bEZsYWdzICs9IHBhcnNlSW50KCQodGhpcykudGV4dCgpLnJlcGxhY2UoIiwiLCIiKSk7CiAgICB9KTsKCiAgICB2YXIgZGVjbGluZWRGbGFncyA9IDA7CiAgICAkKCJ0ZCA+IGE6Y29udGFpbnMoJ2RlY2xpbmVkJykiKS5wYXJlbnQoKS5wcmV2KCkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgZGVjbGluZWRGbGFncyArPSBwYXJzZUludCgkKHRoaXMpLnRleHQoKS5yZXBsYWNlKCIsIiwiIikpOwogICAgfSk7CgogICAgaWYgKGhlbHBmdWxGbGFncyA+IDApIHsKCiAgICAgICAgdmFyIHBlcmNlbnRIZWxwZnVsID0gTnVtYmVyKE1hdGgucm91bmQoKGhlbHBmdWxGbGFncyAvIChoZWxwZnVsRmxhZ3MgKyBkZWNsaW5lZEZsYWdzKSkgKiAxMDAgKyAnZTInKSArICdlLTInKTsKCiAgICAgICAgaWYgKHBlcmNlbnRIZWxwZnVsID4gMTAwICkgewogICAgICAgICAgICBwZXJjZW50SGVscGZ1bCA9IDEwMDsKICAgICAgICB9CgogICAgICAgIHZhciBwZXJjZW50Q29sb3I7CiAgICAgICAgaWYgKHBlcmNlbnRIZWxwZnVsID49IDkwKSB7CiAgICAgICAgICAgIHBlcmNlbnRDb2xvciA9ICJsaW1lZ3JlZW4iOwogICAgICAgIH0gZWxzZSBpZiAocGVyY2VudEhlbHBmdWwgPj0gODApIHsKICAgICAgICAgICAgcGVyY2VudENvbG9yID0gImRhcmtvcmFuZ2UiOwogICAgICAgIH0gZWxzZSBpZiAocGVyY2VudEhlbHBmdWwgPCA4MCkgewogICAgICAgICAgICBwZXJjZW50Q29sb3IgPSAicmVkIjsKICAgICAgICB9IAoKICAgICAgICB2YXIgY3NzID0gIjxzdHlsZT5cCiAgICAgICAgICAgICAgICAgICAgI3Byb2dyZXNzIHtcCiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNjY2M7XAogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwcHg7XAogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjIwcHg7XAogICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDZweCAxMHB4IDEwcHggMDtcCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDtcCiAgICAgICAgICAgICAgICAgICB9XAogICAgICAgICAgICAgICAgICAgICNwcm9ncmVzczphZnRlciB7XAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnJztcCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1wKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIiArIHBlcmNlbnRDb2xvciArICI7XAogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIiArIHBlcmNlbnRIZWxwZnVsICsgIiU7XAogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XAogICAgICAgICAgICAgICAgICAgIH1cCiAgICAgICAgICAgICAgICAgICAgI3BlcmNlbnRIZWxwZnVsIHtcCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcCiAgICAgICAgICAgICAgICAgICAgfVwKICAgICAgICAgICAgICAgICAgICA8L3N0eWxlPiI7CgogICAgICAgICQoJ2hlYWQnKS5hcHBlbmQoY3NzKTsKCiAgICAgICAgJCgiI2ZsYWctc3RhdC1pbmZvLXRhYmxlIikuYmVmb3JlKCI8aDMgaWQ9J3BlcmNlbnRIZWxwZnVsJyB0aXRsZT0ncGVuZGluZywgYWdlZCBhd2F5IGFuZCBkaXNwdXRlZCBmbGFncyBhcmUgbm90IGNvdW50ZWQnPjxzcGFuIGlkPSdwZXJjZW50Jz4iICsgcGVyY2VudEhlbHBmdWwgKyAiJTwvc3Bhbj4gaGVscGZ1bDwvaDM+Iik7CiAgICAgICAgJCgic3BhbiNwZXJjZW50IikuY3NzKCJjb2xvciIsIHBlcmNlbnRDb2xvcik7CgogICAgICAgICQoIiNwZXJjZW50SGVscGZ1bCIpLmFmdGVyKCI8ZGl2IGlkPSdwcm9ncmVzcyc+PC9kaXY+Iik7CiAgICB9Cn0pOw=="},{"name":"StackUnderflow","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["https://stackoverflow.com/*","http://stackoverflow.com/*","https://www.stackoverflow.com/*","http://www.stackoverflow.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{"blacklisted_5813490":"bfalse","favourite_5813490":"bfalse"},"ts":1456451831401},"enabled":true,"position":9,"file_url":"https://github.com/MarcinOrlowski/StackUnderflow/raw/master/stackunderflow.user.js","uuid":"a11df221-cb98-410d-b25a-c9ddfd9f05bd","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTdGFja1VuZGVyZmxvdwovLyBAbmFtZXNwYWNlICAgIG1hcmNpbm9ybG93c2tpLmNvbS90YW1wZXJtb25rZXkvc3RhY2t1bmRlcmZsb3cKLy8gQHZlcnNpb24gICAgICAxLjAuMAovLyBAZGVzY3JpcHRpb24gIEJyaW5ncyB1c2VyIGJsYWNrbGlzdGluZywgZmF2b3VyaWVzIGFuZCBvdGhlciBnb29kaWVzIHRvIFN0YWNrT3ZlcmZsb3cuY29tCi8vIEBhdXRob3IgICAgICAgTWFyY2luIE9ybG93c2tpCi8vIEBkb3dubG9hZFVSTCAgaHR0cHM6Ly9naXRodWIuY29tL01hcmNpbk9ybG93c2tpL1N0YWNrVW5kZXJmbG93L3Jhdy9tYXN0ZXIvc3RhY2t1bmRlcmZsb3cudXNlci5qcwovLyBAbWF0Y2ggICAgICAgIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgaHR0cHM6Ly93d3cuc3RhY2tvdmVyZmxvdy5jb20vKgovLyBAbWF0Y2ggICAgICAgIGh0dHA6Ly93d3cuc3RhY2tvdmVyZmxvdy5jb20vKgovLyBAcmVxdWlyZSAgICAgIGh0dHBzOi8vY29kZS5qcXVlcnkuY29tL2pxdWVyeS1sYXRlc3QuanMKLy8gQHJlcXVpcmUgICAgICBodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vcm1tNXQvanF1ZXJ5LXRpbWVhZ28vbWFzdGVyL2pxdWVyeS50aW1lYWdvLmpzCi8vIEBncmFudCAgICAgICAgR01fYWRkU3R5bGUKLy8gQGdyYW50ICAgICAgICBHTV9nZXRWYWx1ZQovLyBAZ3JhbnQgICAgICAgIEdNX3NldFZhbHVlCi8vIEBncmFudCAgICAgICAgR01fZGVsZXRlVmFsdWUKLy8gPT0vVXNlclNjcmlwdD09Ci8vIFRoZSBAZ3JhbnQgR01fYWRkU3R5bGUgZGlyZWN0aXZlIGlzIG5lZWRlZCB0byB3b3JrIGFyb3VuZCBhIG1ham9yIGRlc2lnbiBjaGFuZ2UgaW50cm9kdWNlZCBpbiBHTSAxLjAsIHJlc3RvcmVzIHRoZSBzYW5kYm94LgoKLy8tLVsgVEhJUyBJUyBDT05GSUcuIENIQU5HRSBBUyBZT1UgV0FOVCBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgovLyB0cnVlL2ZhbHNlOiB3aGVuIHRydWUgKGRlZmF1bHQpIHlvdSB3aWxsIHNlZSBiYW5uZXIgb24gdG9wIG9mIHRoZSBzY3JlZW4gd2hlbiBxdWVzdGlvbiB5b3UgYXJlIHJlYWRpbmcgaXMgYWxyZWFkeSBhbnN3ZXJlZCBhbmQgYW5zd2VyIGlzIGFjY2VwdGVkIGJ5IE9QCnZhciBjZmdfZW5hYmxlQWNjZXB0ZWRBbnN3ZXJXYXJuaW5nID0gdHJ1ZTsKCi8vIHRydWUvZmFsc2U6IHdoZW4gdHJ1ZSAoZGVmYXVsdCkgYWNjZXB0ZWQgYW5zd2VyIChpZiBhbnkpIHdpbGwgYmUgYWRkaXRpb25hbGx5IGhpZ2hsaWdodGVkCnZhciBjZmdfaGlnaGxpZ2h0QWNjZXB0ZWRBbnN3ZXIgPSB0cnVlOwoKLy8gdHJ1ZS9mYWxzZTogd2hlbiB0cnVlIChkZWZhdWx0KSB5b3Ugd2lsbCBzZWVsIHdhcm5pbmcgaWYgcXVlc3Rpb24geW91IGFyZSByZWFkaW5nIGlzIGFza2VkIGJ5IHVzZXIgd2l0aCByZXB1dGF0aW9uIGxvd2VyIHRoYW4gY2ZnX3F1ZXN0aW9uUG9zdGVyUmVwdXRhdGlvblRocmVzaG9sZCB2YWx1ZQp2YXIgY2ZnX2VuYWJsZUxvd1JlcHV0YXRpb25XYXJuaW5nID0gdHJ1ZTsKCi8vIGRvIHlvdSB3YW50IHRoaXMgd2FybmluZyBhYm92ZSB0aGUgcXVlc3Rpb24gKHRydWUpLCBvciBqdXN0IGFib3ZlIHJlc3BvbnNlIGZvcm0gKGZhbHNlLCBkZWZhdWx0KQp2YXIgY2ZnX2VuYWJsZUxvd1JlcHV0YXRpb25XYXJuaW5nQWJvdmVRdWVzdGlvbiA9IGZhbHNlOwp2YXIgY2ZnX3F1ZXN0aW9uUG9zdGVyUmVwdXRhdGlvblRocmVzaG9sZCA9IDI1MDsKCi8vIHRydWUvZmFsc2U6IHdoZW4gdHJ1ZSAoZGVmYXVsdCkgeW91IHdpbGwgc2VlIHdhcm5pbmcgd2hlbiB5b3UgYXJlIHJlYWRpbmcgYSBxdWVzdGlvbiBhc2tlZCBieSB1c2VyIHlvdSBhbHJlYWR5IGJsYWNrbGlzdGVkCnZhciBjZmdfZW5hYmxlUG9zdGVkQnlCbGFja2xpc3RlZFVzZXJXYXJuaW5nID0gZmFsc2U7CgovLyB0cnVlL2ZhbHNlOiB3aGVuIHRydWUgKGRlZmF1bHQpIHlvdSB3aWxsIHNlZSBpbmZvcm1hdGlvbiB3aGVuIHlvdSBhcmUgcmVhZGluZyBxdWVzdGlvbiBhc2tlZCBieSB1c2VyIHlvdSBnb3Qgb24geW91ciBmYXZvdXJpdGUgdXNlciBsaXN0CnZhciBjZmdfZW5hYmxlUG9zdGVkQnlGYXZvdXJpdGVVc2VyV2FybmluZyA9IGZhbHNlOwoKLy8gdHJ1ZS9mYWxzZTogd2hlbiB0cnVlIChkZWZhdXQpIHlvdSB3aWxsIHNlZSBub3RpY2Ugd2hlbiBxdWVzdGlvbiB5b3UgYXJlIHJlYWRpbmcgd2FzIGFza2VkIG1vcmUgdGhhbiBjZmdfb2xkUXVlc3Rpb25EYXlUaHJlc2hvbGQgZGF5cyBhZ28KdmFyIGNmZ19lbmFibGVPbGRRdWVzdGlvbldhcm5pbmcgPSB0cnVlOwp2YXIgY2ZnX29sZFF1ZXN0aW9uRGF5VGhyZXNob2xkID0gMzA7CgovLyB0cnVlL2ZhbHNlOiB3aGVuIHRydWUgKGRlZmF1bHQpIHBhZ2VzIHdpbGwgYmUgYXVnbWVudGVkIHdpdGggYmxhY2tsaXN0L2Zhdm91cml0ZSBhY3Rpb24gYnV0dG9ucwp2YXIgY2ZnX2VuYWJsZUJsYWNrQW5kRmF2b3VyaXRlTGlzdHMgPSBmYWxzZTsKCi8vIElmIHlvdSB3YW50IHRvIGNoYW5nZSBpbWFnZXMgZm9yIGJsYWNrbGlzdC9mYXZsaXN0IGFjdGlvbiBidXR0b25zLCBoZXJlJ3MgdGhlIHBsYWNlLiBNaW5kIHRoZSBpbWFnZSBzaXplIHRvIG5vdCBibG9hdCB0aGUgcGFnZS4KdmFyIGNmZ191c2VyQmxhY2tsaXN0ZWRPblVybCA9ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vTWFyY2luT3Jsb3dza2kvU3RhY2tVbmRlcmZsb3cvbWFzdGVyL2ltZy91c2VyLWJsYWNrbGlzdGVkLW9uLnBuZyI7CnZhciBjZmdfdXNlckJsYWNrbGlzdGVkT2ZmVXJsID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NYXJjaW5Pcmxvd3NraS9TdGFja1VuZGVyZmxvdy9tYXN0ZXIvaW1nL3VzZXItYmxhY2tsaXN0ZWQtb2ZmLnBuZyI7CnZhciBjZmdfdXNlckZhdm91cml0ZU9uVXJsID0gImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9NYXJjaW5Pcmxvd3NraS9TdGFja1VuZGVyZmxvdy9tYXN0ZXIvaW1nL3VzZXItZmF2b3VyaXRlLW9uLnBuZyI7CnZhciBjZmdfdXNlckZhdm91cml0ZU9mZlVybCA9ICJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vTWFyY2luT3Jsb3dza2kvU3RhY2tVbmRlcmZsb3cvbWFzdGVyL2ltZy91c2VyLWZhdm91cml0ZS1vZmYucG5nIjsKCi8vLS1bIERPIE5PVCBBTFRFUiBBTllUSElORyBCRUxPVyBdLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgp2YXIgbXlJZCA9IDA7CnZhciBpc1NpZ25lZEluID0gKCQoIi50b3BiYXItbGlua3MgPiBhLnByb2ZpbGUtbWUiKS5sZW5ndGggPiAwKTsKCmlmIChpc1NpZ25lZEluKSB7CiAgICBteUlkID0gJCgiLnRvcGJhci1saW5rcyA+IGEucHJvZmlsZS1tZSIpLmF0dHIoImhyZWYiKS5zcGxpdCgiLyIpWzJdOwp9Cgp2YXIgd2JuX2Jhbm5lcnNTZXQgPSBmYWxzZTsKdmFyIHdibl9wb3N0ZWRCeUJsYWNrbGlzdGVkVXNlckJhbm5lclNldCA9IGZhbHNlOwp2YXIgd2JuX3F1ZXN0aW9uSGFzQWNjZXB0ZWRBbnN3ZXJCYW5uZXJTZXQgPSBmYWxzZTsKdmFyIHdibl9sb3dSZXB1dGF0aW9uV2FybmluZ0Jhbm5lclNldCA9IGZhbHNlOwp2YXIgd2JuX3Bvc3RlZEJ5RmF2b3VyaXRlVXNlckJhbm5lclNldCA9IGZhbHNlOwp2YXIgd2JuX29sZFF1ZXN0aW9uQmFubmVyU2V0ID0gZmFsc2U7Cgp2YXIgd2JuX2JsYWNrbGlzdGVkRW50cnlQcmVmaXggPSAiYmxhY2tsaXN0ZWRfIjsKdmFyIHdibl9mYXZvdXJpdGVFbnRyeVByZWZpeCA9ICJmYXZvdXJpdGVfIjsKCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCmFkZFN0eWxlcygpOwoKdmFyIHBhZ2VVcmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZi5zcGxpdCgiLyIpOwppZiAocGFnZVVybC5sZW5ndGggPiA0KSB7CiAgICAvLyBxdWVzdGlvbiBkZXRhaWxzOiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy9JRC9ERVNDCiAgICBpZiAocGFnZVVybFszXSA9PSAncXVlc3Rpb25zJykgewogICAgICAgIGF1Z21lbnRRdWVzdGlvbigpOwogICAgfSBlbHNlIHsKICAgICAgICAvLyB1c2VyIHByb2ZpbGU6IGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvSUQvQUxJQVMKICAgICAgICBpZiAocGFnZVVybFszXSA9PSAndXNlcnMnKSB7CiAgICAgICAgICAgIGF1Z21lbnRVc2VyUHJvZmlsZShwYWdlVXJsWzRdKTsKICAgICAgICB9CiAgICB9Cn0gZWxzZSB7CiAgICBhdWdtZW50UXVlc3Rpb25JbmRleCgpOwp9CgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpmdW5jdGlvbiBhdWdtZW50VXNlclByb2ZpbGUodXNlcklkKSB7CiAgICAvLyBkbyBub3QgYXVnbWVudCBvdXQgb3duIHByb2ZpbGUgcGFnZQogICAgaWYgKHVzZXJJZCA9PSBteUlkKSB7CiAgICAgICAgcmV0dXJuOwogICAgfQogICAgCiAgICB1cGRhdGVVc2VyUHJvZmlsZUF1Z21lbnRhdGlvbih1c2VySWQpOwp9CgpmdW5jdGlvbiB1cGRhdGVVc2VyUHJvZmlsZUF1Z21lbnRhdGlvbih1c2VySWQpIHsKCiAgICB2YXIgaXNVc2VyRmF2b3VyaXRlID0gaXNGYXZvdXJpdGUodXNlcklkKTsKICAgIHZhciBpc1VzZXJCbGFja2xpc3RlZCA9IGlzQmxhY2tsaXN0ZWQodXNlcklkKTsKICAgIAogICAgaWYgKCF3Ym5fYmFubmVyc1NldCkgewogICAgICAgIHZhciBiYW5uZXIgPSAnPGRpdiBjbGFzcz0id2JuX2Jhbm5lcnMiPicKICAgICAgICAgICAgICAgICAgICAgKyAnPGRpdiBjbGFzcz0id2JuX3Bvc3RlZEJ5QmxhY2tsaXN0ZWRVc2VyQmFubmVyIHdibl9iYW5uZXIgd2JuX2JsYWNrbGlzdGVkQmFubmVyIHdibl9oaWRkZW4iPjxpbWcgY2xhc3M9Indibl91c2VyUHJvZmlsZUFjdGlvbkljb24iIHNyYz0iJyArIGNmZ191c2VyQmxhY2tsaXN0ZWRPblVybCArICciPiBVc2VyIGlzIG9uIHlvdXIgYmxhY2tsaXN0PC9kaXY+JwogICAgICAgICAgICAgICAgICAgICArICc8ZGl2IGNsYXNzPSJ3Ym5fcG9zdGVkQnlGYXZvdXJpdGVVc2VyQmFubmVyIHdibl9iYW5uZXIgd2JuX2Zhdm91cml0ZUJhbm5lciB3Ym5faGlkZGVuIj48aW1nIGNsYXNzPSJ3Ym5fdXNlclByb2ZpbGVBY3Rpb25JY29uIiBzcmM9IicgKyBjZmdfdXNlckZhdm91cml0ZU9uVXJsICsgJyI+IFlvdXIgc3RhcnJlZCB1c2VyPC9kaXY+JwogICAgICAgICAgICAgICAgICAgICArICc8L2Rpdj4nOwogICAgICAgICQoYmFubmVyKS5pbnNlcnRCZWZvcmUoIiNtYWluLWNvbnRlbnQgPiAjdXNlci1jYXJkID4gLnJvdyIpOwoKICAgICAgICB3Ym5fYmFubmVyc1NldCA9IHRydWU7CiAgICB9CiAgICAKICAgIC8vIHNob3cvaGlkZSBiYW5uZXJzCiAgICBpZiAoY2ZnX2VuYWJsZVBvc3RlZEJ5QmxhY2tsaXN0ZWRVc2VyV2FybmluZykgewogICAgICAgIHZhciBibEJhbm5lciA9ICQoIi53Ym5fcG9zdGVkQnlCbGFja2xpc3RlZFVzZXJCYW5uZXIiKTsKICAgICAgICBpZiAoaXNVc2VyQmxhY2tsaXN0ZWQpIHsKICAgICAgICAgICAgYmxCYW5uZXIuZmFkZUluKDUwMCk7Ci8vICAgICAgICAgICAgJCgiI2F2YXRhci1jYXJkIikuYWRkQ2xhc3MoIndibl9ibGFja2xpc3RlZFVzZXJDYXJkIik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgYmxCYW5uZXIuaGlkZSgpOwovLyAgICAgICAgICAgICQoIiNhdmF0YXItY2FyZCIpLnJlbW92ZUNsYXNzKCJ3Ym5fYmxhY2tsaXN0ZWRVc2VyQ2FyZCIpOwogICAgICAgIH0KICAgIH0KICAgIAogICAgaWYgKGNmZ19lbmFibGVQb3N0ZWRCeUZhdm91cml0ZVVzZXJXYXJuaW5nKSB7CiAgICAgICAgdmFyIGZhdkJhbm5lciA9ICQoIi53Ym5fcG9zdGVkQnlGYXZvdXJpdGVVc2VyQmFubmVyIik7CiAgICAgICAgaWYgKGlzVXNlckZhdm91cml0ZSkgewogICAgICAgICAgICBmYXZCYW5uZXIuZmFkZUluKDUwMCk7Ci8vICAgICAgICAgICAgJCgiI2F2YXRhci1jYXJkIikuYWRkQ2xhc3MoIndibl9mYXZvdXJpdGVVc2VyQ2FyZCIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZhdkJhbm5lci5oaWRlKCk7CiAvLyAgICAgICAgICAgJCgiI2F2YXRhci1jYXJkIikucmVtb3ZlQ2xhc3MoIndibl9mYXZvdXJpdGVVc2VyQ2FyZCIpOwogICAgICAgIH0KICAgIH0KCiAgICAKICAgIC8vIGFjdGlvbiBidXR0b25zIChGSVhNRSByZWZhY3RvciEpCiAgICBpZiAoY2ZnX2VuYWJsZUJsYWNrQW5kRmF2b3VyaXRlTGlzdHMpIHsKICAgICAgICB2YXIgaW5kZXggPSAwOwogICAgICAgIHZhciBlbGVtZW50ID0gJCgiI2F2YXRhci1jYXJkID4gLmJhZGdlcyIpWzBdOwoKICAgICAgICB2YXIgYWN0aW9uSWQgPSAid2JuX2FjdGlvbl91c2VyXyIgKyB1c2VySWQgKyAiXyIgKyBpbmRleDsKICAgICAgICAkKCIjYXZhdGFyLWNhcmQiKS5hcHBlbmQoJzxkaXYgaWQ9IicgKyBhY3Rpb25JZCArICciPjwvZGl2PicpOwogICAgCiAgICAgICAgLy8gYmxhY2tsaXN0CiAgICAgICAgdmFyIGJsYWNrbGlzdElkID0gIndibl9ibGFja2xpc3RfIiArIHVzZXJJZCArICJfIiArIGluZGV4OwogICAgICAgIHZhciBibExhYmVsID0gaXNVc2VyQmxhY2tsaXN0ZWQgPyAiQ2xpY2sgdG8gcmVtb3ZlIHRoaXMgdXNlciBmcm9tIGJsYWNrbGlzdCIgOiAiQ2xpY2sgdG8gYmxhY2tsaXN0IHRoaXMgdXNlciI7CiAgICAgICAgdmFyIGJsSWNvblVybCA9IGlzVXNlckJsYWNrbGlzdGVkID8gY2ZnX3VzZXJCbGFja2xpc3RlZE9uVXJsIDogY2ZnX3VzZXJCbGFja2xpc3RlZE9mZlVybDsKICAgIAogICAgCiAgICAgICAgaWYgKCQoIiMiICsgYmxhY2tsaXN0SWQpLmxlbmd0aCkgewogICAgICAgICAgICB2YXIgYmxJY29uID0gJCgiIyIgKyBibGFja2xpc3RJZCArICIgPiBpbWciKTsKICAgICAgICAgICAgYmxJY29uLmF0dHIoInNyYyIsIGJsSWNvblVybCk7CiAgICAgICAgICAgIGJsSWNvbi5hdHRyKCJhbHQiLCBibExhYmVsKTsKICAgICAgICAgICAgYmxJY29uLmF0dHIoInRpdGxlIiwgYmxMYWJlbCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJCgiIyIgKyBhY3Rpb25JZCkuYXBwZW5kKCc8YSBpZD0iJyArIGJsYWNrbGlzdElkICsgJyI+PGltZyBjbGFzcz0id2JuX3VzZXJQcm9maWxlQWN0aW9uSWNvbiIgdGl0bGU9IicgKyBibExhYmVsICsgJyIgYWx0PSInICsgYmxMYWJlbCArICciIHNyYz0iJyArIGJsSWNvblVybCArICciPjwvYT4nKTsKICAgICAgICAgICAgJCgiIyIgKyBibGFja2xpc3RJZCkuY2xpY2soe3VzZXJJZDogdXNlcklkfSwgY2xpY2tVc2VyUHJvZmlsZVRvZ2dsZUJsYWNrbGlzdCk7CiAgICAgICAgfQoKICAgICAgICB2YXIgYmxDb250YWluZXIgPSAkKCIjIiArIGJsYWNrbGlzdElkKTsKICAgICAgICBpZiAoIWlzVXNlckZhdm91cml0ZSkgewogICAgICAgICAgICBibENvbnRhaW5lci5jc3MoInZpc2liaWxpdHkiLCAidmlzaWJsZSIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGJsQ29udGFpbmVyLmNzcygidmlzaWJpbGl0eSIsICJoaWRkZW4iKTsKICAgICAgICB9CgogICAgICAgIC8vIGZhdm91cml0ZQogICAgICAgIHZhciBmYXZJZCA9ICJ3Ym5fZmF2b3VyaXRlXyIgKyB1c2VySWQgKyAiXyIgKyBpbmRleDsKICAgICAgICB2YXIgZmF2TGFiZWwgPSBpc1VzZXJGYXZvdXJpdGUgPyAiQ2xpY2sgdG8gcmVtb3ZlIGZyb20gZmF2b3VyaXRlcyIgOiAiQ2xpY2sgdG8gbWFyayB1c2VyIGFzIHlvdXIgZmF2b3VyaXRlIjsKICAgICAgICB2YXIgZmF2SWNvblVybCA9IGlzVXNlckZhdm91cml0ZSA/IGNmZ191c2VyRmF2b3VyaXRlT25VcmwgOiBjZmdfdXNlckZhdm91cml0ZU9mZlVybDsKICAgICAgICBpZiAoJCgiIyIgKyBmYXZJZCkubGVuZ3RoKSB7CiAgICAgICAgICAgIHZhciBmYXZJY29uID0gJCgiIyIgKyBmYXZJZCArICIgPiBpbWciKTsKICAgICAgICAgICAgZmF2SWNvbi5hdHRyKCJzcmMiLCBmYXZJY29uVXJsKTsKICAgICAgICAgICAgZmF2SWNvbi5hdHRyKCJhbHQiLCBmYXZMYWJlbCk7CiAgICAgICAgICAgIGZhdkljb24uYXR0cigidGl0bGUiLCBmYXZMYWJlbCk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgJCgiIyIgKyBhY3Rpb25JZCkuYXBwZW5kKCc8YSBpZD0iJyArIGZhdklkICsgJyI+PGltZyBjbGFzcz0id2JuX3VzZXJQcm9maWxlQWN0aW9uSWNvbiIgdGl0bGU9IicgKyBmYXZMYWJlbCArICciIGFsdD0iJyArIGZhdkxhYmVsICsgJyIgc3JjPSInICsgZmF2SWNvblVybCArICciPjwvYT4nKTsKICAgICAgICAgICAgJCgiIyIgKyBmYXZJZCkuY2xpY2soe3VzZXJJZDogdXNlcklkfSwgY2xpY2tVc2VyUHJvZmlsZVRvZ2dsZUZhdm91cml0ZSk7CiAgICAgICAgfQogICAgCiAgICAgICAgdmFyIGZhdkNvbnRhaW5lciA9ICQoIiMiICsgZmF2SWQpOwogICAgICAgIGlmICghaXNVc2VyQmxhY2tsaXN0ZWQpIHsKICAgICAgICAgICAgZmF2Q29udGFpbmVyLmNzcygidmlzaWJpbGl0eSIsICJ2aXNpYmxlIik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZmF2Q29udGFpbmVyLmNzcygidmlzaWJpbGl0eSIsICJoaWRkZW4iKTsKICAgICAgICB9CiAgICB9Cn0KCmZ1bmN0aW9uIGNsaWNrVXNlclByb2ZpbGVUb2dnbGVCbGFja2xpc3QoZXZlbnQpIHsKICAgIGJsYWNrbGlzdFRvZ2dsZShldmVudC5kYXRhLnVzZXJJZCk7CiAgICB1cGRhdGVVc2VyUHJvZmlsZUF1Z21lbnRhdGlvbihldmVudC5kYXRhLnVzZXJJZCk7Cn0KCmZ1bmN0aW9uIGNsaWNrVXNlclByb2ZpbGVUb2dnbGVGYXZvdXJpdGUoZXZlbnQpIHsKICAgIGZhdm91cml0ZVRvZ2dsZShldmVudC5kYXRhLnVzZXJJZCk7CiAgICB1cGRhdGVVc2VyUHJvZmlsZUF1Z21lbnRhdGlvbihldmVudC5kYXRhLnVzZXJJZCk7Cn0KCgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpmdW5jdGlvbiBhdWdtZW50UXVlc3Rpb25JbmRleCgpIHsKICAgICQoImRpdi5zdGFydGVkIikuZWFjaChmdW5jdGlvbihpbmRleCl7dXBkYXRlUXVlc3Rpb25Vc2VySW5kZXhMaW5rc1JhdyhpbmRleCwkKHRoaXMpKTt9KTsKfQoKZnVuY3Rpb24gdXBkYXRlUXVlc3Rpb25Vc2VySW5kZXhMaW5rc1JhdyhpbmRleCwgZWxlbWVudCkgewogICAgdmFyIHVzZXJJZCA9IChlbGVtZW50LmZpbmQoImEiKVsxXSArICIiKS5zcGxpdCgiLyIpWzRdOwogICAgaWYgKHVzZXJJZCAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgaWYgKGlzQmxhY2tsaXN0ZWQodXNlcklkKSkgewogICAgICAgICAgICBlbGVtZW50LmZpbmQoImEuc3RhcnRlZC1saW5rIikuYWZ0ZXIoJzxpbWcgY2xhc3M9Indibl91c2VyQWN0aW9uSWNvblNtYWxsIiB3aWR0aD0iMTQiIGhlaWdodD0iMTQiIHNyYz0iJyArIGNmZ191c2VyQmxhY2tsaXN0ZWRPblVybCArICciPicpOwogICAgICAgIH0gZWxzZSBpZiAoaXNGYXZvdXJpdGUodXNlcklkKSkgewogICAgICAgICAgICBlbGVtZW50LmZpbmQoImEuc3RhcnRlZC1saW5rIikuYWZ0ZXIoJzxpbWcgY2xhc3M9Indibl91c2VyQWN0aW9uSWNvblNtYWxsIiB3aWR0aD0iMTQiIGhlaWdodD0iMTQiIHNyYz0iJyArIGNmZ191c2VyRmF2b3VyaXRlT25VcmwgKyAnIj4nKTsKICAgICAgICB9CiAgICB9Cn0KCi8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0KCnZhciBwb3N0ZXJSb290Owp2YXIgcG9zdGVyTmFtZTsKdmFyIHBvc3RlcklkOwp2YXIgcG9zdGVkRGF0ZU1pbGxpczsKdmFyIHBvc3RlclJlcHV0YXRpb247CgpmdW5jdGlvbiBhdWdtZW50UXVlc3Rpb24oKSB7CiAgICBwb3N0ZXJSb290ID0gJCgiLnBvc3Qtc2lnbmF0dXJlLm93bmVyIik7CiAgICBwb3N0ZXJOYW1lID0gcG9zdGVyUm9vdC5maW5kKCIudXNlci1kZXRhaWxzID4gYSIpLnRleHQoKTsKICAgIHBvc3RlcklkID0gcG9zdGVyUm9vdC5maW5kKCIudXNlci1kZXRhaWxzID4gYSIpLmF0dHIoImhyZWYiKS5zcGxpdCgiLyIpWzJdOwogICAgcG9zdGVkRGF0ZU1pbGxpcyA9IERhdGUucGFyc2UocG9zdGVyUm9vdC5maW5kKCIudXNlci1pbmZvID4gLnVzZXItYWN0aW9uLXRpbWUgPiAucmVsYXRpdmV0aW1lIikuYXR0cigidGl0bGUiKSk7CgogICAgcG9zdGVyUmVwdXRhdGlvbiA9IHBvc3RlclJvb3QuZmluZCgiLnJlcHV0YXRpb24tc2NvcmUiKS5hdHRyKCJ0aXRsZSIpLnNwbGl0KCIgIilbMl07CiAgICAvLyBwb3N0ZXIgcmVwdXRhdGlvbiBtaXNzaW5nIGluIHRpdGxlIG9mIGZvciBzb21lIHF1ZXN0aW9ucyAobW9zdCBsaWtlbHkgU08gYnVnKToKICAgIC8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzMxOTAyODEyLyAgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvNTkzNzEyMS8KICAgIGlmIChwb3N0ZXJSZXB1dGF0aW9uID09PSAiIikgewogICAgICAgIHBvc3RlclJlcHV0YXRpb24gPSBwb3N0ZXJSb290LmZpbmQoIi5yZXB1dGF0aW9uLXNjb3JlIikudGV4dCgpLnJlcGxhY2UoIiAiLCIiKS5yZXBsYWNlKCIsIiwgIiIpOwogICAgICAgIC8vIGNoZWNrIGlmIHdlIGdvdCBvbmx5IGRpZ2l0cyBoZXJlLiBJZiBub3QsIHdlIHdlIGFzc3VtZSB3ZSBoYXZlICJrIiBzdWZmaXgKICAgICAgICB2YXIgcmVnID0gbmV3IFJlZ0V4cCgiWzAtOV0iKTsKICAgICAgICBpZiAoIXJlZy50ZXN0KHBvc3RlclJlcHV0YXRpb24pKSB7CiAgICAgICAgICAgIHBvc3RlclJlcHV0YXRpb24gPSBwb3N0ZXJSZXB1dGF0aW9uLnJlcGxhY2UoImsiLCIiKSAqIDEwMDA7CiAgICAgICAgfQogICAgfQoKICAgICQoIiNzaWRlYmFyIikucHJlcGVuZCgnPGRpdj48dGFibGU+PHRyPjx0ZD48cCBjbGFzcz0ibGFiZWwta2V5Ij5lbmNoYW5jZWQgYnk8L3A+PC90ZD48dGQgc3R5bGU9InBhZGRpbmctbGVmdDogMTBweDsgdmVydGljYWwtYWxpZ246IHRvcDsiPjxiPjxhIHRhcmdldD0iX2JsYW5rIiBocmVmPSJodHRwczovL2dpdGh1Yi5jb20vTWFyY2luT3Jsb3dza2kvU3RhY2tVbmRlcmZsb3ciPlN0YWNrVW5kZXJmbG93PC9hPjwvYj48L3RkPjwvdHI+PC90YWJsZT48L2Rpdj4nKTsKCiAgICB1cGRhdGVRdWVzdGlvbkF1Z21lbnRhdGlvbigpOwp9CgovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgoKCmZ1bmN0aW9uIGNsaWNrVG9nZ2xlQmxhY2tsaXN0KGV2ZW50KSB7CiAgICBibGFja2xpc3RUb2dnbGUoZXZlbnQuZGF0YS51c2VySWQpOwogICAgdXBkYXRlUXVlc3Rpb25BdWdtZW50YXRpb24oKTsKfQoKZnVuY3Rpb24gY2xpY2tUb2dnbGVGYXZvdXJpdGUoZXZlbnQpIHsKICAgIGZhdm91cml0ZVRvZ2dsZShldmVudC5kYXRhLnVzZXJJZCk7CiAgICB1cGRhdGVRdWVzdGlvbkF1Z21lbnRhdGlvbigpOwp9CgpmdW5jdGlvbiB1cGRhdGVRdWVzdGlvbkF1Z21lbnRhdGlvbigpIHsKCiAgICB2YXIgaXNQb3N0ZXJGYXZvdXJpdGUgPSBpc0Zhdm91cml0ZShwb3N0ZXJJZCk7CiAgICB2YXIgaXNQb3N0ZXJCbGFja2xpc3RlZCA9IGlzQmxhY2tsaXN0ZWQocG9zdGVySWQpOwogICAgCiAgICAvLyB1cGRhdGUgYmFubmVycwogICAgdmFyIGhhc0FjY2VwdGVkQW5zd2VyID0gKCQoIiNhbnN3ZXJzIC5hbnN3ZXIuYWNjZXB0ZWQtYW5zd2VyIikubGVuZ3RoID4gMCk7CiAgICAKICAgIC8vIHBsYW50IGJhbm5lcnMKICAgIGlmICghd2JuX29sZFF1ZXN0aW9uQmFubmVyU2V0KSB7CiAgICAgICAgdmFyIGRheXNPbGQgPSBNYXRoLnJvdW5kKChuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHBvc3RlZERhdGVNaWxsaXMpIC8gODY0MDAwMDApOwogICAgICAgIGlmIChkYXlzT2xkID4gY2ZnX29sZFF1ZXN0aW9uRGF5VGhyZXNob2xkKSB7CiAgICAgICAgICAgIHZhciBvbGRBbnN3ZXJCYW5uZXIgPSAnPGRpdiBpZD0id2JuX29sZEFuc3dlciIgY2xhc3M9Indibl9iYW5uZXIgd2JuX3Rvb09sZEJhbm5lciI+UXVlc3Rpb24gd2FzIGFza2VkICcgKyBqUXVlcnkudGltZWFnbyhwb3N0ZWREYXRlTWlsbGlzKSArICc8L2Rpdj4nOwogICAgICAgICAgICBpZiAoIWhhc0FjY2VwdGVkQW5zd2VyKSB7CiAgICAgICAgICAgICAgICAkKG9sZEFuc3dlckJhbm5lcikuaW5zZXJ0QmVmb3JlKCIjcXVlc3Rpb24taGVhZGVyIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgJChvbGRBbnN3ZXJCYW5uZXIpLmluc2VydEJlZm9yZSgiI3Bvc3QtZWRpdG9yIik7IAogICAgICAgIH0KICAgICAgICAKICAgICAgICB3Ym5fb2xkUXVlc3Rpb25CYW5uZXJTZXQgPSB0cnVlOwogICAgfQoKICAgIGlmICghd2JuX3F1ZXN0aW9uSGFzQWNjZXB0ZWRBbnN3ZXJCYW5uZXJTZXQpIHsgICAgICAgIAogICAgICAgIGlmIChoYXNBY2NlcHRlZEFuc3dlcikgewogICAgICAgICAgICB2YXIgaGFzQW5zd2VyQmFubmVyID0gJzxkaXYgaWQ9Indibl9xdWVzdGlvbkhhc0FjY2VwdGVkQW5zd2VyIiBjbGFzcz0id2JuX2Jhbm5lciB3Ym5fb2tCYW5uZXIiPlF1ZXN0aW9uIGhhcyBhY2NlcHRlZCBhbnN3ZXI8L2Rpdj4nOwogICAgICAgICAgICAkKGhhc0Fuc3dlckJhbm5lcikuaW5zZXJ0QmVmb3JlKCIjcXVlc3Rpb24taGVhZGVyIik7CiAgICAgICAgICAgICQoaGFzQW5zd2VyQmFubmVyKS5pbnNlcnRCZWZvcmUoIiNwb3N0LWVkaXRvciIpOyAKICAgICAgICAKICAgICAgICAgICAgaWYgKGNmZ19oaWdobGlnaHRBY2NlcHRlZEFuc3dlcikgewogICAgICAgICAgICAgICAgJCgiI2Fuc3dlcnMgLmFuc3dlci5hY2NlcHRlZC1hbnN3ZXIiKS5hZGRDbGFzcygid2JuX2FjY2VwdGVkQW5zd2VySGlnaGxpZ2h0Iik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHdibl9xdWVzdGlvbkhhc0FjY2VwdGVkQW5zd2VyQmFubmVyU2V0ID0gdHJ1ZTsKICAgICAgICB9CiAgICB9CiAgICAKICAgIGlmICghd2JuX3Bvc3RlZEJ5QmxhY2tsaXN0ZWRVc2VyQmFubmVyU2V0KSB7CiAgICAgICAgdmFyIGJsYWNrbGlzdGVkVXNlclBvc3RCYW5uZXIgPSAnPGRpdiBjbGFzcz0id2JuX3Bvc3RlZEJ5QmxhY2tsaXN0ZWRVc2VyQmFubmVyIHdibl9iYW5uZXIgd2JuX2JsYWNrbGlzdGVkQmFubmVyIHdibl9oaWRkZW4iPjxpbWcgY2xhc3M9Indibl91c2VyQWN0aW9uSWNvbiIgc3JjPSInICsgY2ZnX3VzZXJCbGFja2xpc3RlZE9uVXJsICsgJyI+IFF1ZXN0aW9uIGFza2VkIGJ5IGJsYWNrbGlzdGVkIHVzZXI8L2Rpdj4nOwogICAgICAgICQoYmxhY2tsaXN0ZWRVc2VyUG9zdEJhbm5lcikuaW5zZXJ0QmVmb3JlKCIjcXVlc3Rpb24taGVhZGVyIik7CiAgICAgICAgJChibGFja2xpc3RlZFVzZXJQb3N0QmFubmVyKS5pbnNlcnRCZWZvcmUoIiNwb3N0LWVkaXRvciIpOyAKCiAgICAgICAgd2JuX3Bvc3RlZEJ5QmxhY2tsaXN0ZWRVc2VyQmFubmVyU2V0ID0gdHJ1ZTsKICAgIH0KCiAgICBpZiAoIXdibl9wb3N0ZWRCeUZhdm91cml0ZVVzZXJCYW5uZXJTZXQpIHsKICAgICAgICB2YXIgZmF2b3VyaXRlVXNlclBvc3RCYW5uZXIgPSAnPGRpdiBjbGFzcz0id2JuX3Bvc3RlZEJ5RmF2b3VyaXRlVXNlckJhbm5lciB3Ym5fYmFubmVyIHdibl9mYXZvdXJpdGVCYW5uZXIgd2JuX2hpZGRlbiI+PGltZyBjbGFzcz0id2JuX3VzZXJBY3Rpb25JY29uIiBzcmM9IicgKyBjZmdfdXNlckZhdm91cml0ZU9uVXJsICsgJyI+IFF1ZXN0aW9uIGFza2VkIGJ5IHN0YXJyZWQgdXNlcjwvZGl2Pic7CiAgICAgICAgJChmYXZvdXJpdGVVc2VyUG9zdEJhbm5lcikuaW5zZXJ0QmVmb3JlKCIjcXVlc3Rpb24taGVhZGVyIik7CgogICAgICAgIHdibl9wb3N0ZWRCeUZhdm91cml0ZVVzZXJCYW5uZXJTZXQgPSB0cnVlOwogICAgfQoKICAgIGlmICghd2JuX2xvd1JlcHV0YXRpb25XYXJuaW5nQmFubmVyU2V0KSB7CiAgICAgICAgdmFyIHBvc3RlclJlcHV0YXRpb25Mb3cgPSAnPGRpdiBjbGFzcz0id2JuX2xvd1JlcHV0YXRpb25CYW5uZXIgd2JuX2Jhbm5lciB3Ym5fd2FybmluZ0Jhbm5lciB3Ym5faGlkZGVuIj5Qb3N0ZXIgcmVwdXRhdGlvbiBzY29yZSBpcyBiZWxvdyAnICsgY2ZnX3F1ZXN0aW9uUG9zdGVyUmVwdXRhdGlvblRocmVzaG9sZCArICcgcG9pbnRzPC9kaXY+JzsKICAgICAgICBpZiAoY2ZnX2VuYWJsZUxvd1JlcHV0YXRpb25XYXJuaW5nQWJvdmVRdWVzdGlvbikgewogICAgICAgICAgICAkKHBvc3RlclJlcHV0YXRpb25Mb3cpLmluc2VydEJlZm9yZSgiI3F1ZXN0aW9uLWhlYWRlciIpOwogICAgICAgIH0KICAgICAgICAkKHBvc3RlclJlcHV0YXRpb25Mb3cpLmluc2VydEJlZm9yZSgiI3Bvc3QtZWRpdG9yIik7IAogICAgICAgIAogICAgICAgIHdibl9sb3dSZXB1dGF0aW9uV2FybmluZ0Jhbm5lclNldCA9IHRydWU7CiAgICB9CiAgICAKICAgIC8vIHNob3cvaGlkZSBiYW5uZXJzCiAgICBpZiAoY2ZnX2VuYWJsZVBvc3RlZEJ5QmxhY2tsaXN0ZWRVc2VyV2FybmluZykgewogICAgICAgIHZhciBibEJhbm5lciA9ICQoIi53Ym5fcG9zdGVkQnlCbGFja2xpc3RlZFVzZXJCYW5uZXIiKTsKICAgICAgICBpZiAoaXNQb3N0ZXJCbGFja2xpc3RlZCkgewogICAgICAgICAgICBibEJhbm5lci5mYWRlSW4oNTAwKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBibEJhbm5lci5oaWRlKCk7CiAgICAgICAgfQogICAgfQogICAgCiAgICBpZiAoY2ZnX2VuYWJsZVBvc3RlZEJ5RmF2b3VyaXRlVXNlcldhcm5pbmcpIHsKICAgICAgICB2YXIgZmF2QmFubmVyID0gJCgiLndibl9wb3N0ZWRCeUZhdm91cml0ZVVzZXJCYW5uZXIiKTsKICAgICAgICBpZiAoaXNQb3N0ZXJGYXZvdXJpdGUpIHsKICAgICAgICAgICAgZmF2QmFubmVyLmZhZGVJbig1MDApOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIGZhdkJhbm5lci5oaWRlKCk7CiAgICAgICAgfQogICAgfQoKICAgIGlmICgoIWlzUG9zdGVyRmF2b3VyaXRlKSAmJiAoIWlzUG9zdGVyQmxhY2tsaXN0ZWQpKSB7CiAgICAgICAgaWYgKCghaGFzQWNjZXB0ZWRBbnN3ZXIpICYmIChjZmdfZW5hYmxlTG93UmVwdXRhdGlvbldhcm5pbmcpICYmIChwb3N0ZXJSZXB1dGF0aW9uIDwgY2ZnX3F1ZXN0aW9uUG9zdGVyUmVwdXRhdGlvblRocmVzaG9sZCkpIHsKICAgICAgICAgICAgJCgiLndibl9sb3dSZXB1dGF0aW9uQmFubmVyIikuZmFkZUluKDUwMCk7CiAgICAgICAgfQogICAgfSBlbHNlIHsKICAgICAgICAkKCIud2JuX2xvd1JlcHV0YXRpb25CYW5uZXIiKS5oaWRlKCk7CiAgICB9CgogICAgLy8gdXBkYXRlIGxpbmtzCiAgICBpZiAoY2ZnX2VuYWJsZUJsYWNrQW5kRmF2b3VyaXRlTGlzdHMpIHsKICAgICAgICAkKCJ0ZC5wb3N0LXNpZ25hdHVyZSA+IC51c2VyLWluZm8iKS5lYWNoKGZ1bmN0aW9uKGluZGV4KXt1cGRhdGVVc2VyTGlua3NSYXcoaW5kZXgsJCh0aGlzKSk7fSk7CiAgICB9Cgp9CgpmdW5jdGlvbiB1cGRhdGVVc2VyTGlua3NSYXcoaW5kZXgsIGVsZW1lbnQpIHsKICAgIHZhciB1c2VySWQgPSBlbGVtZW50LmZpbmQoIi51c2VyLWRldGFpbHMgPiBhIikuYXR0cigiaHJlZiIpOy8vLnNwbGl0KCIvIilbMl07CiAgICBpZiAodXNlcklkICE9PSB1bmRlZmluZWQpIHsKICAgICAgICB1c2VySWQgPSB1c2VySWQuc3BsaXQoIi8iKVsyXTsKICAgICAgICBpZiAodXNlcklkICE9IG15SWQgKSB7CiAgICAgICAgICAgIHZhciBpc0ZhdiA9IGlzRmF2b3VyaXRlKHVzZXJJZCk7CiAgICAgICAgICAgIHZhciBpc0JsID0gaXNCbGFja2xpc3RlZCh1c2VySWQpOwogICAgICAgICAgICAKICAgICAgICAgICAgdmFyIGFjdGlvbklkID0gIndibl9hY3Rpb25fdXNlcl8iICsgdXNlcklkICsgIl8iICsgaW5kZXg7CiAgICAgICAgICAgIGVsZW1lbnQuYWZ0ZXIoJzxkaXYgaWQ9IicgKyBhY3Rpb25JZCArICciPjwvZGl2PicpOwoKICAgICAgICAgICAgLy8gYmxhY2tsaXN0CiAgICAgICAgICAgIHZhciBibGFja2xpc3RJZCA9ICJ3Ym5fYmxhY2tsaXN0XyIgKyB1c2VySWQgKyAiXyIgKyBpbmRleDsKICAgICAgICAgICAgdmFyIGJsTGFiZWwgPSBpc0JsID8gIkNsaWNrIHRvIHJlbW92ZSB0aGlzIHVzZXIgZnJvbSBibGFja2xpc3QiIDogIkNsaWNrIHRvIGJsYWNrbGlzdCB0aGlzIHVzZXIiOwogICAgICAgICAgICB2YXIgYmxJY29uVXJsID0gaXNCbCA/IGNmZ191c2VyQmxhY2tsaXN0ZWRPblVybCA6IGNmZ191c2VyQmxhY2tsaXN0ZWRPZmZVcmw7CiAgICAgICAgICAgIGlmICgkKCIjIiArIGJsYWNrbGlzdElkKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIHZhciBibEljb24gPSAkKCIjIiArIGJsYWNrbGlzdElkICsgIiA+IGltZyIpOwogICAgICAgICAgICAgICAgYmxJY29uLmF0dHIoInNyYyIsIGJsSWNvblVybCk7CiAgICAgICAgICAgICAgICBibEljb24uYXR0cigiYWx0IiwgYmxMYWJlbCk7CiAgICAgICAgICAgICAgICBibEljb24uYXR0cigidGl0bGUiLCBibExhYmVsKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICQoIiMiICsgYWN0aW9uSWQpLmFwcGVuZCgnPGEgaWQ9IicgKyBibGFja2xpc3RJZCArICciPjxpbWcgY2xhc3M9Indibl91c2VyQWN0aW9uSWNvbiIgdGl0bGU9IicgKyBibExhYmVsICsgJyIgYWx0PSInICsgYmxMYWJlbCArICciIHNyYz0iJyArIGJsSWNvblVybCArICciPjwvYT4nKTsKICAgICAgICAgICAgICAgICQoIiMiICsgYmxhY2tsaXN0SWQpLmNsaWNrKHt1c2VySWQ6IHVzZXJJZH0sIGNsaWNrVG9nZ2xlQmxhY2tsaXN0KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgdmFyIGJsQ29udGFpbmVyID0gJCgiIyIgKyBibGFja2xpc3RJZCk7CiAgICAgICAgICAgIGlmICghaXNGYXYpIHsKICAgICAgICAgICAgICAgIGJsQ29udGFpbmVyLmNzcygidmlzaWJpbGl0eSIsICJ2aXNpYmxlIik7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBibENvbnRhaW5lci5jc3MoInZpc2liaWxpdHkiLCAiaGlkZGVuIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIC8vIGZhdm91cml0ZQogICAgICAgICAgICB2YXIgZmF2SWQgPSAid2JuX2Zhdm91cml0ZV8iICsgdXNlcklkICsgIl8iICsgaW5kZXg7CiAgICAgICAgICAgIHZhciBmYXZMYWJlbCA9IGlzRmF2ID8gIkNsaWNrIHRvIHJlbW92ZSBmcm9tIGZhdm91cml0ZXMiIDogIkNsaWNrIHRvIG1hcmsgdXNlciBhcyB5b3VyIGZhdm91cml0ZSI7CiAgICAgICAgICAgIHZhciBmYXZJY29uVXJsID0gaXNGYXYgPyBjZmdfdXNlckZhdm91cml0ZU9uVXJsIDogY2ZnX3VzZXJGYXZvdXJpdGVPZmZVcmw7CiAgICAgICAgICAgIGlmICgkKCIjIiArIGZhdklkKS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIHZhciBmYXZJY29uID0gJCgiIyIgKyBmYXZJZCArICIgPiBpbWciKTsKICAgICAgICAgICAgICAgIGZhdkljb24uYXR0cigic3JjIiwgZmF2SWNvblVybCk7CiAgICAgICAgICAgICAgICBmYXZJY29uLmF0dHIoImFsdCIsIGZhdkxhYmVsKTsKICAgICAgICAgICAgICAgIGZhdkljb24uYXR0cigidGl0bGUiLCBmYXZMYWJlbCk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAkKCIjIiArIGFjdGlvbklkKS5hcHBlbmQoJzxhIGlkPSInICsgZmF2SWQgKyAnIj48aW1nIGNsYXNzPSJ3Ym5fdXNlckFjdGlvbkljb24iIHRpdGxlPSInICsgZmF2TGFiZWwgKyAnIiBhbHQ9IicgKyBmYXZMYWJlbCArICciIHNyYz0iJyArIGZhdkljb25VcmwgKyAnIj48L2E+Jyk7CiAgICAgICAgICAgICAgICAkKCIjIiArIGZhdklkKS5jbGljayh7dXNlcklkOiB1c2VySWR9LCBjbGlja1RvZ2dsZUZhdm91cml0ZSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIHZhciBmYXZDb250YWluZXIgPSAkKCIjIiArIGZhdklkKTsKICAgICAgICAgICAgaWYgKCFpc0JsKSB7CiAgICAgICAgICAgICAgICBmYXZDb250YWluZXIuY3NzKCJ2aXNpYmlsaXR5IiwgInZpc2libGUiKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIGZhdkNvbnRhaW5lci5jc3MoInZpc2liaWxpdHkiLCAiaGlkZGVuIik7CiAgICAgICAgICAgIH0KCiAgICAgICAgfQogICAgfQp9CgovLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tCgpmdW5jdGlvbiBpc0JsYWNrbGlzdGVkKHVzZXJJZCkgewogICAgcmV0dXJuIEdNX2dldFZhbHVlKHdibl9ibGFja2xpc3RlZEVudHJ5UHJlZml4ICsgdXNlcklkLCBmYWxzZSk7Cn0KZnVuY3Rpb24gYmxhY2tsaXN0VG9nZ2xlKHVzZXJJZCkgewogICAgdG9nZ2xlVXNlckZsYWcod2JuX2JsYWNrbGlzdGVkRW50cnlQcmVmaXggKyB1c2VySWQpOwp9CgpmdW5jdGlvbiBpc0Zhdm91cml0ZSh1c2VySWQpIHsKICAgIHJldHVybiBHTV9nZXRWYWx1ZSh3Ym5fZmF2b3VyaXRlRW50cnlQcmVmaXggKyB1c2VySWQsIGZhbHNlKTsKfQpmdW5jdGlvbiBmYXZvdXJpdGVUb2dnbGUodXNlcklkKSB7CiAgICB0b2dnbGVVc2VyRmxhZyh3Ym5fZmF2b3VyaXRlRW50cnlQcmVmaXggKyB1c2VySWQpOwp9CgpmdW5jdGlvbiB0b2dnbGVVc2VyRmxhZyhrZXkpIHsKICAgIHZhciBjdXJyZW50ID0gR01fZ2V0VmFsdWUoa2V5LCBmYWxzZSk7CiAgICBHTV9kZWxldGVWYWx1ZShrZXkpOwogICAgR01fc2V0VmFsdWUoa2V5LCAoIWN1cnJlbnQpKTsKfQoKZnVuY3Rpb24gbXVsdGlsaW5lU3RyIChkdW1teUZ1bmMpIHsKICAgIHZhciBzdHIgPSBkdW1teUZ1bmMudG9TdHJpbmcgKCk7CiAgICBzdHIgICAgID0gc3RyLnJlcGxhY2UgKC9eW15cL10rXC9cKiE/LywgJycpIC8vIFN0cmlwIGZ1bmN0aW9uICgpIHsgLyohCiAgICAgICAgICAgIC5yZXBsYWNlICgvXHMqXCpcL1xzKlx9XHMqJC8sICcnKSAgIC8vIFN0cmlwICovIH0KICAgICAgICAgICAgLnJlcGxhY2UgKC9cL1wvLiskL2dtLCAnJykgLy8gRG91YmxlLXNsYXNoIGNvbW1lbnRzIHdyZWNrIENTUy4gU3RyaXAgdGhlbS4KICAgICAgICAgICAgOwogICAgcmV0dXJuIHN0cjsKfQoKLy8tLS0gU3R5bGUgb3VyIG5ld2x5IGFkZGVkIGVsZW1lbnRzIHVzaW5nIENTUy4KZnVuY3Rpb24gYWRkU3R5bGVzKCkgewpHTV9hZGRTdHlsZSAoIG11bHRpbGluZVN0ciAoIGZ1bmN0aW9uICgpIHsvKiEKICAgIC53Ym5faGlkZGVuIHsKICAgICAgICBkaXNwbGF5OiBub25lOwogICAgfQogICAgCiAgICAud2JuX2Jhbm5lciB7CiAgICAgICAgcGFkZGluZzogMTBweDsKICAgICAgICB0ZXh0LWFsaWduOiBjZW50ZXI7CiAgICAgICAgZm9udC1zaXplOiAxNnB4OwogICAgfQoKICAgIC53Ym5fb2tCYW5uZXIgewogICAgICAgIGJhY2tncm91bmQ6ICNFOUZDRjY7CiAgICAgICAgY29sb3I6IGJsYWNrOwogICAgfQogICAgCiAgICAud2JuX3dhcm5pbmdCYW5uZXIgewogICAgICAgIGJhY2tncm91bmQ6ICNDQjU1NTU7CiAgICAgICAgY29sb3I6IHdoaXRlOwogICAgfQoKICAgIC53Ym5fdG9vT2xkQmFubmVyIHsKICAgICAgICBiYWNrZ3JvdW5kOiAjRkZBMzk0OwogICAgICAgIGNvbG9yOiBibGFjazsKICAgIH0KCiAgICAud2JuX2Zhdm91cml0ZUJhbm5lciB7CiAgICAgICAgYmFja2dyb3VuZDogI0ZGREQwMDsKICAgICAgICBjb2xvcjogYmxhY2s7CiAgICB9CgogICAgLndibl9ibGFja2xpc3RlZEJhbm5lciB7CiAgICAgICAgYmFja2dyb3VuZDogIzMzMzMzMzsKICAgICAgICBjb2xvcjogd2hpdGU7CiAgICB9CgogICAgLndibl9hY2NlcHRlZEFuc3dlckhpZ2hsaWdodCB7CiAgICAgICAgYmFja2dyb3VuZDogI0U5RkNGNjsKICAgIH0KICAgIAogICAgLndibl9ibGFja2xpc3RMaW5rIHsKICAgICAgICBiYWNrZ3JvdW5kOiAjMDAwMDAwOwogICAgICAgIGNvbG9yOiB3aGl0ZTsKICAgIH0KICAgIAogICAgLndibl9mYXZvdXJpdGVMaW5rIHsKICAgICAgICBiYWNrZ3JvdW5kOiAjRkZERDAwOwogICAgICAgIGNvbG9yOiBibGFjazsKICAgIH0KICAgIAogICAgLndibl91c2VyQWN0aW9uSWNvbiB7CiAgICAgICAgd2lkdGg6IDE4cHg7CiAgICAgICAgaGVpZ2h0OiAxOHB4OwogICAgICAgIGJvcmRlcjogMDsKICAgICAgICBwYWRkaW5nOiAycHg7CiAgICAgICAgdmVydGljYWwtYWxpZ246IG1pZGRsZTsKICAgIH0KCiAgICAud2JuX3VzZXJQcm9maWxlQWN0aW9uSWNvbiB7CiAgICAgICAgYm9yZGVyOiAwOwogICAgICAgIHBhZGRpbmc6IDJweDsKICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwogICAgfQoKICAgIC53Ym5fdXNlckFjdGlvbkljb25TbWFsbCB7CiAgICAgICAgYm9yZGVyOiAwOwogICAgICAgIHBhZGRpbmc6IDBweDsKICAgICAgICB2ZXJ0aWNhbC1hbGlnbjogbWlkZGxlOwogICAgfQogICAgCiAgICAud2JuX2Jhbm5lcnMgewogICAgICAgIG1hcmdpbjogMHB4IDBweCAxMHB4IDBweDsKICAgIH0KICAgIAogICAgLndibl9mYXZvdXJpdGVVc2VyQ2FyZCB7CiAgICAgICAgYmFja2dyb3VuZDogI0ZGREQwMDsKICAgIH0KICAgIAogICAgLndibl9ibGFja2xpc3RlZFVzZXJDYXJkIHsKICAgICAgICBiYWNrZ3JvdW5kOiAjMzMzMzMzOwogICAgfQoKKi99ICkgKTsKfQo="},{"name":"Interesting Questions alternate highlighting","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.stackexchange.com/*","*://*.stackoverflow.com/*","*://*.superuser.com/*","*://*.serverfault.com/*","*://*.askubuntu.com/*","*://*.stackapps.com/*","*://*.mathoverflow.net/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831417},"enabled":true,"position":10,"file_url":"https://gist.github.com/shu8/415cd905568ad9667f46/raw/ffbc35151fbecce5436aa819bf282336c42b59fb/favoriteQuestions.user.js","uuid":"2a77d2d9-e7cf-4487-9acd-ecbcb7d8e4e3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBJbnRlcmVzdGluZyBRdWVzdGlvbnMgYWx0ZXJuYXRlIGhpZ2hsaWdodGluZwovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly9zdGFja2V4Y2hhbmdlLmNvbS91c2Vycy80MzM3ODEwLyVFMSVCOSVBNyVEMCVCRCVDQSU4QSVDMyU5RgovLyBAdmVyc2lvbiAgICAgIDAuMgovLyBAZGVzY3JpcHRpb24gIENoYW5nZXMgU3RhY2sgRXhjaGFuZ2Ugd2Vic2l0ZXMgJ2Zhdm9yaXRlIHRhZ3MnIGhpZ2hsaWdodGluZyB0byBqdXN0IHRoZSB0YWcuCi8vIEBhdXRob3IgICAgICAg4bmn0L3KisOfCi8vIEBtYXRjaAkJICo6Ly8qLnN0YWNrZXhjaGFuZ2UuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLnN0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLnN1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggCQkgKjovLyouc2VydmVyZmF1bHQuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLmFza3VidW50dS5jb20vKgovLyBAbWF0Y2gJCSAqOi8vKi5zdGFja2FwcHMuY29tLyoKLy8gQG1hdGNoCQkgKjovLyoubWF0aG92ZXJmbG93Lm5ldC8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KdmFyIHVzZXJzY3JpcHQgPSBmdW5jdGlvbigkKSB7CiAgICAkKHdpbmRvdykuYmluZCgibG9hZCIsIGZ1bmN0aW9uKCkgewogICAgICAgIAogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdzdXBlcnVzZXInKSA+IC0xKSB7IC8vc3VwZXJ1c2VyCiAgICAgICAgICAgIHZhciBiZXR0ZXJDU1MgPSB7CiAgICAgICAgICAgIAliYWNrZ3JvdW5kQ29sb3I6ICcjYTFlYWZmJywKICAgICAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snICAgICAgICAgICAgICAgIAogICAgICAgIAl9OwogICAgICAgIH0KICAgICAgICBlbHNlIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdzdGFja292ZXJmbG93JykgPiAtMSkgeyAvL3N0YWNrb3ZlcmZsb3cKICAgICAgICAJdmFyIGJldHRlckNTUyA9IHsKICAgICAgICAgICAgCWJhY2tncm91bmRDb2xvcjogJyNmZmVmYzYnLAogICAgICAgICAgICAJYm9yZGVyV2lkdGg6ICcwJyAgICAgICAgICAgICAgICAKICAgICAgICAJfTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignLnN0YWNrZXhjaGFuZ2UuY29tJykgPiAtMSkgewogICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignbWV0YScpID09PSAtMSkgeyAvL2JldGEgc2l0ZXMKICAgICAgICAgICAgICAgIHZhciBiZXR0ZXJDU1MgPSB7CiAgICAgICAgICAgIAliYWNrZ3JvdW5kQ29sb3I6ICcjYzNkYWZhJywKICAgICAgICAgICAgCWJvcmRlcldpZHRoOiAnMCcgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB9OyAKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHggPSAkKCIjaW50ZXJlc3RpbmdUYWdzIikudGV4dCgpOwogICAgICAgIHZhciBpbnRlcmVzdGluZyA9IHguc3BsaXQoJyAnKTsKICAgICAgICBpbnRlcmVzdGluZy5wb3AoKTsgLy9CZWNhdXNlIHRoZXJlJ3Mgb25lIGV4dHJhIHZhbHVlIGF0IHRoZSBlbmQKCiAgICAgICAgCgogICAgICAgICQoIi50YWdnZWQtaW50ZXJlc3RpbmcgPiAuc3VtbWFyeSA+IC50YWdzID4gLnBvc3QtdGFnIikuZmlsdGVyKGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgICAgIHJldHVybiBpbnRlcmVzdGluZy5pbmRleE9mKCQodGhpcykudGV4dCgpKSA+IC0xOwogICAgICAgIH0pLmNzcyhiZXR0ZXJDU1MpOwoKICAgICAgICAvLyAkKCIudGFnZ2VkLWludGVyZXN0aW5nIikucmVtb3ZlQ2xhc3MoInRhZ2dlZC1pbnRlcmVzdGluZyIpOwogICAgfSk7Cn07Cgp2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKZWwudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwplbC50ZXh0ID0gJygnICsgdXNlcnNjcmlwdCArICcpKGpRdWVyeSk7JzsKZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlbCk7"},{"name":"Trainwreck","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?:\\/\\/chat.stackoverflow.com\\/rooms\\/.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831428},"enabled":true,"position":11,"file_url":"https://raw.githubusercontent.com/Tiny-Giant/myuserscripts/master/Trainwreck.user.js","uuid":"5c178b91-f9ac-47b9-b718-16a2fa840aeb","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBUcmFpbndyZWNrCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL2dpdGh1Yi5jb20vVGlueS1HaWFudAovLyBAdmVyc2lvbiAgICAgIDEuMC4wLjEKLy8gQGRlc2NyaXB0aW9uICBQb3N0cyBhIGxpbmsgdG8gYSByYW5kb20gdHJhaW53cmVjayBpbWFnZSB3aXRoIHRoZSB0ZXh0ICIjUmVrZFRyYWluIgovLyBAYXV0aG9yICAgICAgIEBUaW55R2lhbnQKLy8gQGluY2x1ZGUgICAgICAvaHR0cHM/OlwvXC9jaGF0LnN0YWNrb3ZlcmZsb3cuY29tXC9yb29tc1wvLiovCi8vIEBncmFudCAgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gPT0vVXNlclNjcmlwdD09Ci8qIGpzaGludCAtVzA5NyAqLwondXNlIHN0cmljdCc7CgpsZXQgaW1hZ2VzID0gWwogICAgJ2h0dHBzOi8vdXBsb2FkLndpa2ltZWRpYS5vcmcvd2lraXBlZGlhL2NvbW1vbnMvMS8xOS9UcmFpbl93cmVja19hdF9Nb250cGFybmFzc2VfMTg5NS5qcGcnLAogICAgJ2h0dHBzOi8vczMuYW1hem9uYXdzLmNvbS9pbWcudWx0cmFzaWdudXAuY29tL2V2ZW50cy9yYXcvNmE3NmY0YTMtNGFkMi00YWUyLThhM2ItYzA5MmU4NTU4NmFmLmpwZycsCiAgICAnaHR0cHM6Ly9rYXNzb250cmFpbndyZWNrLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wMy9jcm9wcGVkLXRyYWlud3JlY2suanBnJywKICAgICdodHRwOi8vd3d3Lm5jYmFtLm9yZy9pbWFnZXMvcGhvdG9zL3RyYWluLXdyZWNrLmpwZycsCiAgICAnaHR0cDovL29yYWxmaXhhdGlvbnNob3cuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE0LzA5L3RyYWluLXdyZWNrLmpwZycsCiAgICAnaHR0cDovL2V4cGVyaWVuY2VkeW5hbWljcy5ibG9ncy5jb20vLmEvNmEwMGQ4MzQ1YTY2YmY2OWUyMDE5MDFlZDQxOWE0OTcwYi1waScsCiAgICAnaHR0cHM6Ly90aW1lZG90Y29tLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNS8xNTA1MTMtMTk0My10cmFpbi13cmVjay0wMi5qcGc/cXVhbGl0eT03NSZzdHJpcD1jb2xvciZ3PTU3MycsCiAgICAnaHR0cDovL3N0YXRpYzYuYnVzaW5lc3NpbnNpZGVyLmNvbS9pbWFnZS81NTU0ZTkyMzY5YmVkZDhmMzNjNDVhMGQvaGVyZXMtZXZlcnl0aGluZy13ZS1rbm93LWFib3V0LXRoZS1hbXRyYWstdHJhaW4td3JlY2staW4tcGhpbGFkZWxwaGlhLmpwZycsCiAgICAnaHR0cDovL2dvbGRzaWx2ZXJ3b3JsZHMuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE1LzA3L3RyYWlud3JlY2suanBnJywKICAgICdodHRwOi8vYWxsdGhpbmdzZC5jb20vZmlsZXMvMjAxMi8wNi90cmFpbndyZWNrLmpwZycsCiAgICAnaHR0cDovL3NhaWxpbmdhbmFyY2h5LmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxNS8wOS90cmFpbndyZWNrLmpwZycsCiAgICAnaHR0cDovL2lhbXBoaWxkb2RkLmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxMy8xMi90cmFpbndyZWNrMS5qcGcnLAogICAgJ2h0dHA6Ly9jZG4udGhlYXRsYW50aWMuY29tL2Fzc2V0cy9tZWRpYS9pbWcvcG9zdHMvMjAxMy8xMS83NThweF9UcmFpbl9XcmVja18xOTIyLzU2YWU5YzlmYy5qcGcnLAogICAgJ2h0dHA6Ly9zdGF0aWMubWVzc3luZXNzeWNoaWMuY29tL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDEyLzEwL3RyYWlud3JlY2suanBnJywKICAgICdodHRwOi8vd3d3LmJheWNvbG9ueXJhaWx0cmFpbC5vcmcvZ2FsbGVyeTIvZC8xMjgyLTMvdHJhaW53cmVjay5qcGcnLAogICAgJ2h0dHA6Ly90cmFpbndyZWNrd2luZXJ5LmNvbS93cC1jb250ZW50L3VwbG9hZHMvMjAxMi8wNS90cmFpbndyZWNrVEhFTi5qcGcnLAogICAgJ2h0dHA6Ly93d3cuc2t2YXJjaC5jb20vaW1hZ2VzL3RyYWlucy90cmFpbndyZWNrLmpwZycsCiAgICAnaHR0cDovL2NvbnNlbGl1bS5jb20vd3AtY29udGVudC91cGxvYWRzL3RyYWluLXdyZWNrLmpwZycsCiAgICAnaHR0cDovL2ltZ3Muc2ZnYXRlLmNvbS9ibG9ncy9pbWFnZXMvc2ZnYXRlL2JtYW5nYW4vMjAxMC8xMC8xOC90cmFpbndyZWNrLmpwZycsCiAgICAnaHR0cHM6Ly9pbWcxLmV0c3lzdGF0aWMuY29tLzA0My8wLzc3MjQ5MzUvaWxfZnVsbHhmdWxsLjYxMzgzMzQzN18zN2E1LmpwZycsCiAgICAnaHR0cDovL25jcGVkaWEub3JnL3NpdGVzL2RlZmF1bHQvZmlsZXMvL2Jvc3RpYW5fd3JlY2suanBnJywKICAgICdodHRwczovL3VwbG9hZC53aWtpbWVkaWEub3JnL3dpa2lwZWRpYS9jb21tb25zLzkvOWYvTmV3TWFya2V0VHJhaW5XcmVjay5qcGcnLAogICAgJ2h0dHBzOi8vZXRoaWNzYWxhcm1zLmZpbGVzLndvcmRwcmVzcy5jb20vMjAxNS8wNC90cmFpbi13cmVja3MtYWNjaWRlbnRzLmpwZycsCiAgICAnaHR0cDovL29mZmJlYXRvcmVnb24uY29tL0ltYWdlcy9IMTAwMmJfR2VuZXJhbC9CcmlkZ2VXcmVjazE4MDAuanBnJywKICAgICdodHRwOi8vd3d3My5nZW5kaXNhc3RlcnMuY29tL2ZpbGVzL25ld3Bob3Rvcy9OYXBlcnZpbGxlJTIwSUwlMjBUcmFpbiUyMFdyZWNrJTIwNC0yNi0xOTQ2LkpQRycsCiAgICAnaHR0cDovL3N0YXRpYzAxLm55dC5jb20vaW1hZ2VzLzIwMTEvMDcvMjUvd29ybGQvMjVjaGluYS1zcGFuLzI1Y2hpbmEtc3Bhbi1hcnRpY2xlTGFyZ2UuanBnJywKICAgICdodHRwOi8vc2hvcmVzcGVhay5jb20vYmxvZy93cC1jb250ZW50L3VwbG9hZHMvMjAxMS8wMS90cmFpbl93cmVja18yLmpwZycsCiAgICAnaHR0cDovL3d3dy5jZm0tZm1oLm9yZy9maWxlcy9RdWlja1NpdGVJbWFnZXMvTXVzZXVtUGhvdG9zL1RyYWluX1dyZWNrLmpwZycsCiAgICAnaHR0cDovL3d3dy5jaXJjdXNlc2FuZHNpZGVzaG93cy5jb20vaW1hZ2VzL2FsZ2Jhcm5lc3RyYWlud3JlY2tsYXJnZS5qcGcnLAogICAgJ2h0dHA6Ly93d3cuc2NpdGVjaGFudGlxdWVzLmNvbS90cmFpbndyZWNrL3RyYWlud3JlY2suanBnJywKICAgICdodHRwOi8vd3d3My5nZW5kaXNhc3RlcnMuY29tL2ZpbGVzL25ld3Bob3Rvcy9uai13b29kYnJpZGdlLXRyYWlud3JlY2szci5qcGcnLAogICAgJ2h0dHA6Ly90cmF2ZWwuZ3VuYXhpbi5jb20vd3AtY29udGVudC91cGxvYWRzLzIwMTAvMDcvRXA5X1RyYWluV3JlY2suanBnJwpdOwoKbGV0IHJvb20gPSAoL1xkKy8uZXhlYyh3aW5kb3cubG9jYXRpb24uaHJlZil8fFtmYWxzZV0pWzBdOwoKaWYgKCFyb29tKSByZXR1cm47CgpsZXQgZmtleSA9IChkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZmtleScpfHx7dmFsdWU6IGZhbHNlfSkudmFsdWU7CgppZiAoIWZrZXkpIHJldHVybjsKCmxldCBub2RlcyA9IHt9OwoKbm9kZXMuc2NvcGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2hhdC1idXR0b25zJyk7Cgpub2Rlcy5yZWtkYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7Cm5vZGVzLnJla2RidG4uY2xhc3NOYW1lID0gJ2J1dHRvbiByZWtkYnRuJzsKbm9kZXMucmVrZGJ0bi50ZXh0Q29udGVudCA9ICd3cmVjayB0cmFpbic7Cm5vZGVzLnNjb3BlLmFwcGVuZENoaWxkKG5vZGVzLnJla2RidG4pOwoKbGV0IGdldFJhbmRvbVdyZWNrID0gKCkgPT4gewogICAgcmV0dXJuIGltYWdlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoKGltYWdlcy5sZW5ndGggLSAxKSAtICArIDEpKV07Cn0KCm5vZGVzLnJla2RidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7CiAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgdXJsOiAnL2NoYXRzLycgKyByb29tICsgJy9tZXNzYWdlcy9uZXcnLAogICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCd9LAogICAgICAgIGRhdGE6ICd0ZXh0PScgKyBlbmNvZGVVUklDb21wb25lbnQoJ1sjUmVrZFRyYWluXSgnICsgZ2V0UmFuZG9tV3JlY2soKSArICcpJykgKyAnJmZrZXk9JyArIGZrZXksCiAgICAgICAgb25sb2FkOiBmdW5jdGlvbihyZXNwKSB7CiAgICAgICAgICAgIGlmKHJlc3Auc3RhdHVzICE9PSAyMDApIGNvbnNvbGUubG9nKHJlc3ApOwogICAgICAgIH0KICAgIH0pOwp9LCBmYWxzZSk7Cg=="},{"name":"Hide chat room description and tags","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://chat.stackexchange.com/*","*://chat.stackoverflow.com/*","*://chat.meta.stackexchange.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831440},"enabled":true,"position":12,"uuid":"513379ad-9b2c-4614-9efe-231a67d367a5","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIEhpZGUgY2hhdCByb29tIGRlc2NyaXB0aW9uIGFuZCB0YWdzCi8vIEBuYW1lc3BhY2UgICBtYWlkY2FmZQovLyBAbWF0Y2ggICAgICAgICo6Ly9jaGF0LnN0YWNrZXhjaGFuZ2UuY29tLyoKLy8gQG1hdGNoICAgICAgICAqOi8vY2hhdC5zdGFja292ZXJmbG93LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgKjovL2NoYXQubWV0YS5zdGFja2V4Y2hhbmdlLmNvbS8qCi8vIEB2ZXJzaW9uICAgICAxLjAuNAovLyBAZ3JhbnQgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCmZ1bmN0aW9uIGFkZEdsb2JhbFN0eWxlKGNzcykgewogIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICBzdHlsZS5pbm5lckhUTUwgPSBjc3M7CiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7Cn0KCmFkZEdsb2JhbFN0eWxlKCcjcm9vbWRlc2MsICNyb29tLXRhZ3Mge2Rpc3BsYXk6IG5vbmU7fScpOw=="},{"name":"character limits restriction","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/*","*://*.serverfault.com/*","*://*.stackapps.com/*","*://*.stackexchange.com/*","*://*.stackoverflow.com/*","*://*.superuser.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831454},"enabled":true,"position":13,"uuid":"0945c427-cc2b-481c-9195-8dfb244f8b4c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICBjaGFyYWN0ZXIgbGltaXRzIHJlc3RyaWN0aW9uCi8vIEBuYW1lc3BhY2UgICAgICAgU3RhY2tFeGNoYW5nZQovLyBAZGVzY3JpcHRpb24gICAgIEJ5cGFzcyBjaGFyYWN0ZXIgbGltaXRzIHJlc3RyaWN0aW9uIGZvciBjb21tZW50cwovLyBAdmVyc2lvbiAgICAgICAgIDEuMAovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLmFza3VidW50dS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLnNlcnZlcmZhdWx0LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAgKjovLyouc3RhY2thcHBzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLnN0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICAqOi8vKi5zdXBlcnVzZXIuY29tLyoKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgc2NyaXB0ID0gZnVuY3Rpb24oJCkgewogICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJ3RleHRhcmVhW25hbWU9Y29tbWVudF0nICwgImZvY3VzIiwgZnVuY3Rpb24oKXsKICAgICAgICAgbSA9ICQodGhpcykudmFsKCkubGVuZ3RoCiAgICAgICAgIGZvcih2YXIgaT0wOyBpPCAoMTUgLSBtKTsgaSsrKXsKICAgICAgICAgJCh0aGlzKS52YWwoJCh0aGlzKS52YWwoKSArICJcdTIwMGIiKQogICAgICAgIH0KICAgIH0pCn07Cgp2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKZWwudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwplbC50ZXh0ID0gJygnICsgc2NyaXB0ICsgJykoalF1ZXJ5KTsnOwpkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGVsKTs="},{"name":"Magic™Editor","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"user_agent":"","override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/\\w*.?(stackoverflow|stackexchange|serverfault|superuser|askubuntu|stackapps)\\.com\\/(questions|posts|review|tools)\\/(?!tagged\\/|new\\/).*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"data":{},"ts":1456451831467},"enabled":true,"position":14,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/Magic%E2%84%A2Editor.user.js","uuid":"c8fdd2ca-2370-4737-bb6b-437ca517e31b","source":""},{"name":"Current Completed Reviews in Queue","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["http://stackoverflow.com/review/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831477},"enabled":true,"position":15,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/CurrentQueueReviewsDone.user.js","uuid":"1ae23fcb-e8b9-43e0-bacc-14e8c3ed4798","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBDdXJyZW50IENvbXBsZXRlZCBSZXZpZXdzIGluIFF1ZXVlCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzU3ODQxMS9yZW5lCi8vIEB2ZXJzaW9uICAgICAgMC4yCi8vIEBkZXNjcmlwdGlvbiAgQWRkcyB0aGUgY3VycmVudCBudW1iZXIgb2YgcmV2aWV3cyB5b3UgaGF2ZSBjb21wbGV0ZWQgaW4gdGhlIHF1ZXVlIGluIGZyb250IG9mIHlvdXIgdG90YWwgcmV2aWV3cyBvbiB0aGUgcmV2aWV3IHRhYgovLyBAYXV0aG9yICAgICAgIFJlbmUsIFNPQ1ZSCi8vIEBtYXRjaCAgICAgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3Jldmlldy8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCi8vIHRoaXMgc2NyaXB0IGNvbWVzIGZyb20gdGhlIHJlcXVlc3QgaGVyZTogaHR0cDovL21ldGEuc3RhY2tleGNoYW5nZS5jb20vcS8yNTA1ODAvMjEzNjcxCi8vIHJlbmUgb3JpZ2luYWxseSBtYWRlIHRoaXM6IGh0dHA6Ly9tZXRhLnN0YWNrZXhjaGFuZ2UuY29tL2EvMjUwNjIyLzIxMzY3MQoKKGZ1bmN0aW9uKCQsIHdpbmRvdykgewoKICAgIHZhciBwYXJ0cywKICAgICAgICBzdGF0c3VybCwKICAgICAgICBjdXJyZW50aHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLAogICAgICAgIC8vIGhlcmUgd2UgcHV0IG91ciBzdGF0CiAgICAgICAgc3RhdCA9ICQoJzxkaXY+PC9kaXY+JykKICAgICAgICAuaHRtbCgnLi4uJm5ic3A7LyZuYnNwOycpCiAgICAgICAgLmNzcygnZmxvYXQnLCdsZWZ0JykKICAgICAgICAuY3NzKCdwYWRkaW5nLXRvcCcsJzEzcHgnKTsKCiAgICBmdW5jdGlvbiBidWlsZFVybCgpIHsKICAgICAgICAvLyBidWlsZCB0aGUgc3RhdHMgdXJsCiAgICAgICAgcGFydHMgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKTsKICAgICAgICBpZiAocGFydHMubGVuZ3RoPjMpIHsKICAgICAgICAgICBwYXJ0c1twYXJ0cy5sZW5ndGgtMV0gPSAnc3RhdHMnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBhcnRzLnB1c2goJ3N0YXRzJyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcvJyk7CiAgICB9CgogICAgc3RhdHN1cmwgPSBidWlsZFVybCgpOwoKICAgIC8vIGludGVnYXRlIGluIHRoZSByZXZpZXcgcGFnZQogICAgJCgnI2JhZGdlLXByb2dyZXNzJykucHJlcGVuZChzdGF0KTsKCiAgICAvLyBnZXQgdGhlIChmdWxsYmxvd24pIHN0YXRzIHBhZ2UgYW5kIGZpbmQgeW91ciBvd24gc3RhdAogICAgZnVuY3Rpb24gcmVmcmVzaHN0YXQoKSB7CiAgICAgICAgJC5nZXQoc3RhdHN1cmwsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgIHZhciBodG1sID0gJChkYXRhKSwKICAgICAgICAgICAgICAgIHRkID0gaHRtbC5maW5kKCd0ZC5yZXZpZXctc3RhdHMtY291bnQtY3VycmVudC11c2VyOmZpcnN0Jyk7CiAgICAgICAgICAgIC8vIHJlcGxhY2Ugb3VyIGN1cnJlbnQgc3RhdCB3aXRoIHRoZSBqdXN0IGxvYWRlZCBvbmUKICAgICAgICAgICAgc3RhdC5odG1sKHRkLnRleHQoKSArICcmbmJzcDsvJm5ic3A7Jyk7ICAgIAogICAgICAgIH0pLmZhaWwoZnVuY3Rpb24ocHJvbSwgZXJyb3IsIG1zZykgewogICAgICAgICAgICBkZWJ1Z2dlcjsKICAgICAgICAgICAgaWYgKG1zZyA9PT0gJ05vdCBGb3VuZCcpIHsKICAgICAgICAgICAgICAgIC8vIHRoZSB1cmwgaXMgbm90IGNvcnJlY3QsIHRyeSBhIG5ldyBvbmUKICAgICAgICAgICAgICAgIHN0YXRzdXJsID0gYnVpbGRVcmwoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIC8vIGNoZWNrIHJlZ3VsYXJseSAoZXZlcnkgNSBzZWNvbmRzKSBpZiB3ZSBkb25lIGEgcmV2aWV3IHlldAogICAgd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBpZiB0aGUgdXJsIGNoYW5nZWQsIGxldHMgZ2V0IHRoZSBuZXcgc3RhdAogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZiAhPT0gY3VycmVudGhyZWYpIHsKICAgICAgICAgICAgY3VycmVudGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgcmVmcmVzaHN0YXQoKTsKICAgICAgICB9CiAgICB9LCA1MDAwKTsgLy8gbm93IDUgc2Vjb25kcyBiZWNhdXNlIHdlIGhhcmRseSBldmVyIHJldmlldyBxdWlja2VyIHRoYW4gdGhhdAogICAgcmVmcmVzaHN0YXQoKTsgLy8gcnVuIG9uY2UgZm9yIGFuIGluaXRpYWwgdmFsdWUKCn0oJCB8fCB1bnNhZmVXaW5kb3cuJCwgd2luZG93IHx8IHVuc2FmZVdpbmRvdykpOwo="},{"name":"(SE) Customize help menu","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"user_agent":"","override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/*","*://*.mathoverflow.net/*","*://*.serverfault.com/*","*://*.stackapps.com/*","*://*.stackexchange.com/*","*://*.stackoverflow.com/*","*://*.superuser.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]}},"storage":{"data":{"helpSE_v1":"s{\"help_blank\":false,\"remove_help\":false,\"menu\":[{\"name\":\"Moderation Tools\",\"url\":\"/tools\"},{\"name\":\"NATO\",\"url\":\"/tools/new-answers-old-questions\"}]}"},"ts":1456720105784},"enabled":true,"position":16,"file_url":"https://gist.github.com/raw/a539c1905608b253fcb6/CustomizeHelpMenu.user.js","uuid":"098ebad5-b95b-472e-be23-361868277072","source":""},{"name":"AutoReviewComments","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/(.*\\.)?stackoverflow\\.com/.*$/","/^https?:\\/\\/(.*\\.)?serverfault\\.com/.*$/","/^https?:\\/\\/(.*\\.)?superuser\\.com/.*$/","/^https?:\\/\\/(.*\\.)?stackexchange\\.com/.*$/","/^https?:\\/\\/(.*\\.)?askubuntu\\.com/.*$/","/^https?:\\/\\/(.*\\.)?mathoverflow\\.com/.*$/","/^https?:\\/\\/discuss\\.area51\\.stackexchange\\.com/.*$/","/^https?:\\/\\/stackapps\\.com/.*$/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831506},"enabled":true,"position":17,"file_url":"https://raw.github.com/Benjol/SE-AutoReviewComments/master/dist/autoreviewcomments.user.js","uuid":"8b302a20-45b6-48df-aa1f-ba2a8c340e57","source":""},{"name":"NATO Enhancements","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?:\\/\\/(meta\\.)?stackoverflow.com\\/tools\\/new-answers-old-questions.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1456466373761,"data":{}},"enabled":true,"position":18,"file_url":"https://raw.githubusercontent.com/Tiny-Giant/myuserscripts/master/NATOEnhancements.user.js","uuid":"6dad8b6e-1a2a-42b0-901e-67831ea0cf8f","source":""},{"name":"Auto-acknowledge Negative Rep","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/.*?(stackoverflow.com|stackexchange.com|superuser.com|serverfault.com|askubuntu.com|stackapps.com|mathoverflow.net)/.*$/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1457340600772,"data":{}},"enabled":true,"position":19,"file_url":"https://raw.githubusercontent.com/Tiny-Giant/myuserscripts/master/Auto-acknowledgeNegativeRep.user.js","uuid":"a20ebceb-cfad-462d-be96-4f96b3a06c2c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBBdXRvLWFja25vd2xlZGdlIE5lZ2F0aXZlIFJlcAovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly9naXRodWIuY29tL1RpbnktR2lhbnQKLy8gQHZlcnNpb24gICAgICAxLjAuMC4wCi8vIEBkZXNjcmlwdGlvbiAgQXV0b21hdGljYWxseSBtYXJrcyBuZWdhdGl2ZSByZXB1dGF0aW9uIGNoYW5nZXMgYXMgcmVhZC4KLy8gQGF1dGhvciAgICAgICBAVGlueUdpYW50Ci8vIEBpbmNsdWRlICAgICAgL15odHRwcz86XC9cLy4qPyhzdGFja292ZXJmbG93LmNvbXxzdGFja2V4Y2hhbmdlLmNvbXxzdXBlcnVzZXIuY29tfHNlcnZlcmZhdWx0LmNvbXxhc2t1YnVudHUuY29tfHN0YWNrYXBwcy5jb218bWF0aG92ZXJmbG93Lm5ldCkvLiokLwovLyBAZ3JhbnQgICAgICAgIEdNX3htbGh0dHBSZXF1ZXN0Ci8vID09L1VzZXJTY3JpcHQ9PQovKiBqc2hpbnQgLVcwOTcgKi8KJ3VzZSBzdHJpY3QnOwoKbGV0IGdldFVucmVhZENvdW50cywgdHJpZ2dlclVwZGF0ZTsKCnRyaWdnZXJVcGRhdGUgPSAoKSA9PiB7CiAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgbWV0aG9kOiAnR0VUJywKICAgICAgICB1cmw6ICcvdG9wYmFyL2FjaGlldmVtZW50cycsCiAgICAgICAgb25sb2FkOiB4aHIgPT4gewogICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gMjAwKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh4aHIuc3RhdHVzLCB4aHIuc3RhdHVzVGV4dCwgeGhyLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdNYXJrZWQgbmVnYXRpdmUgcmVwdXRhdGlvbiBjaGFuZ2VzIGFzIHJlYWQuJyk7CiAgICAgICAgfQogICAgfSk7Cn0KCmdldFVucmVhZENvdW50cyA9ICgpID0+IHsKICAgIEdNX3htbGh0dHBSZXF1ZXN0KHsKICAgICAgICBtZXRob2Q6ICdHRVQnLAogICAgICAgIHVybDogJ2h0dHA6Ly9jaGF0LnN0YWNrb3ZlcmZsb3cuY29tL3RvcGJhci9nZXQtdW5yZWFkLWNvdW50cycsCiAgICAgICAgb25sb2FkOiB4aHIgPT4gewogICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gMjAwKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyh4aHIuc3RhdHVzLCB4aHIuc3RhdHVzVGV4dCwgeGhyLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGlmICgrSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KS5VbnJlYWRSZXBDb3VudCA8IDApIHRyaWdnZXJVcGRhdGUoKTsKICAgICAgICB9CiAgICB9KTsKfQoKZ2V0VW5yZWFkQ291bnRzKCk7Cg=="},{"name":"Review Enhancements","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?:\\/\\/(meta\\.|www\\.)?stackoverflow.com\\/review\\/(?!custom).*"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1457340636677,"data":{}},"enabled":true,"position":20,"file_url":"https://raw.githubusercontent.com/Tiny-Giant/myuserscripts/master/ReviewEnhancements.user.js","uuid":"791fbf59-1324-49cf-baee-ada71987a22d","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBSZXZpZXcgRW5oYW5jZW1lbnRzCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL2dpdGh1Yi5jb20vVGlueS1HaWFudAovLyBAdmVyc2lvbiAgICAgIDEuMC4wLjQKLy8gQGRlc2NyaXB0aW9uICBUaGUgcmV2aWV3IHF1ZXVlcyBhcmUgYWJzdHJhY3Rpb25zIHdpdGggc29tZSBsaW1pdGF0aW9ucy4gVGhpcyBzY3JpcHQgcmVtb3ZlcyB0aG9zZSBsaW1pdGF0aW9ucyBvbiBxdWVzdGlvbnMKLy8gQGF1dGhvciAgICAgICBAVGlueUdpYW50Ci8vIEBpbmNsdWRlICAgICAgL2h0dHBzPzpcL1wvKG1ldGFcLnx3d3dcLik/c3RhY2tvdmVyZmxvdy5jb21cL3Jldmlld1wvKD8hY3VzdG9tKS4qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KLyoganNoaW50IC1XMDk3ICovCid1c2Ugc3RyaWN0JzsKClN0YWNrRXhjaGFuZ2UudXNpbmcoImlubGluZUVkaXRpbmciLCBmdW5jdGlvbiAoKSB7CiAgICBTdGFja0V4Y2hhbmdlLmlubGluZUVkaXRpbmcuaW5pdCgpOwp9KTsKCmxldCBpbml0UXVlc3Rpb24gPSAocG9zdCkgPT4gewogICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwoKICAgIHhoci5hZGRFdmVudExpc3RlbmVyKCdsb2FkJywgZXZlbnQgPT4gewogICAgICAgIGlmKHhoci5zdGF0dXMgIT09IDIwMCkgewogICAgICAgICAgICBjb25zb2xlLmxvZyh4aHIuc3RhdHVzLCB4aHIuc3RhdHVzVGV4dCwgeGhyLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgIHJldHVybjsKICAgICAgICB9CgogICAgICAgIFN0YWNrRXhjaGFuZ2UucXVlc3Rpb24uaW5pdCh7CiAgICAgICAgICAgIHZvdGVzQ2FzdDogSlNPTi5wYXJzZSh4aHIucmVzcG9uc2VUZXh0KSwKICAgICAgICAgICAgY2FuVmlld1ZvdGVDb3VudHM6IHRydWUsCiAgICAgICAgICAgIHF1ZXN0aW9uSWQ6IHBvc3QKICAgICAgICB9KTsKCiAgICAgICAgbGV0IGNvbW1lbnRMaW5rcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5qcy1zaG93LWxpbmsuY29tbWVudHMtbGluaycpOwoKICAgICAgICBmb3IobGV0IGkgaW4gT2JqZWN0LmtleXMoY29tbWVudExpbmtzKSkgY29tbWVudExpbmtzW2ldLmNsaWNrKCk7CiAgICB9LCBmYWxzZSk7CgogICAgeGhyLm9wZW4oJ0dFVCcsICcvcG9zdHMvJyArIHBvc3QuZGF0YXNldC5xdWVzdGlvbmlkICsgJy92b3RlcycpOwoKICAgIHhoci5zZW5kKCk7Cn0KCmxldCBwb3N0UXVldWUgPSBbXSwgZmV0Y2hpbmcgPSBmYWxzZTsKCmxldCBmZXRjaFBvc3QgPSAoKSA9PiB7CiAgICBmZXRjaGluZyA9IHRydWU7CgogICAgbGV0IHBvc3QgPSBwb3N0UXVldWUuc2hpZnQoKTsKCiAgICBsZXQgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CgogICAgeGhyLmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBldmVudCA9PiB7CiAgICAgICAgaWYoeGhyLnN0YXR1cyAhPT0gMjAwKSB7CiAgICAgICAgICAgIGNvbnNvbGUubG9nKHhoci5zdGF0dXMsIHhoci5zdGF0dXNUZXh0LCB4aHIucmVzcG9uc2VUZXh0KTsKICAgICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KCiAgICAgICAgbGV0IHBhcmVudCA9IHBvc3QucGFyZW50Tm9kZTsKICAgICAgICAKICAgICAgICBsZXQgb3NuaXBwZXRzID0gcG9zdC5xdWVyeVNlbGVjdG9yQWxsKCcuc25pcHBldCcpOwoKICAgICAgICBwb3N0Lm91dGVySFRNTCA9IHhoci5yZXNwb25zZVRleHQ7CgogICAgICAgIHBvc3QgPSBwYXJlbnQucXVlcnlTZWxlY3RvcignLnF1ZXN0aW9uLCAuYW5zd2VyJyk7CiAgICAgICAgCiAgICAgICAgbGV0IG5zbmlwcGV0cyA9IHBvc3QucXVlcnlTZWxlY3RvckFsbCgnLnNuaXBwZXQnKTsKICAgICAgICAKICAgICAgICBmb3IobGV0IGkgaW4gT2JqZWN0LmtleXMobnNuaXBwZXRzKSkgewogICAgICAgICAgICBuc25pcHBldHNbaV0ucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUob3NuaXBwZXRzW2ldLCBuc25pcHBldHNbaV0pOwogICAgICAgICAgICBuc25pcHBldHNbaV0ucmVtb3ZlKCk7CiAgICAgICAgfQoKICAgICAgICBpZigvZG93bnZvdGVkLWFuc3dlci8udGVzdChwb3N0LmNsYXNzTmFtZSkpIHBvc3QuY2xhc3NMaXN0LnJlbW92ZSgnZG93bnZvdGVkLWFuc3dlcicpOwoKICAgICAgICAvKmxldCBoaWRkZW4gPSBwb3N0LnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbmlwcGV0Jyk7CgogICAgICAgIGZvcihsZXQgaSBpbiBPYmplY3Qua2V5cyhoaWRkZW4pKSB7CiAgICAgICAgICAgIGhpZGRlbltpXS5kYXRhc2V0LmhpZGUgPSAndHJ1ZSc7CiAgICAgICAgfSovCgogICAgICAgIGlmICgvcXVlc3Rpb24vLnRlc3QocG9zdC5jbGFzc05hbWUpKSBpbml0UXVlc3Rpb24ocG9zdCk7CgogICAgICAgIGZldGNoaW5nID0gZmFsc2U7CiAgICB9LCBmYWxzZSk7CgogICAgeGhyLm9wZW4oJ0dFVCcsICcvcG9zdHMvYWpheC1sb2FkLXJlYWx0aW1lLycgKyAocG9zdC5kYXRhc2V0LnF1ZXN0aW9uaWQgfHwgcG9zdC5kYXRhc2V0LmFuc3dlcmlkKSk7CgogICAgeGhyLnNlbmQoKTsKfQoKbGV0IHF1ZXVlUG9zdCA9IChwb3N0KSA9PiB7CiAgICBpZiAoIXBvc3QpIHJldHVybjsKCiAgICBwb3N0UXVldWUucHVzaChwb3N0KTsKCiAgICBpZihmZXRjaGluZykgewogICAgICAgIGxldCBmZXRjaFdhaXQgPSBzZXRJbnRlcnZhbCgoKSA9PiB7CiAgICAgICAgICAgIGlmKGZldGNoaW5nKSByZXR1cm47CgogICAgICAgICAgICBjbGVhckludGVydmFsKGZldGNoV2FpdCk7CgogICAgICAgICAgICBmZXRjaFBvc3QoKTsKICAgICAgICB9LCAxMDApOwogICAgfSBlbHNlIGZldGNoUG9zdCgpOwp9CgokKGRvY3VtZW50KS5hamF4Q29tcGxldGUoKG9uZSwgdHdvLCB0aHJlZSkgPT4geyAKICAgIGlmKCEvbmV4dFwtdGFza3x0YXNrXC1yZXZpZXdlZC8udGVzdCh0aHJlZS51cmwpKSByZXR1cm47CgogICAgbGV0IHRhc2sgPSBKU09OLnBhcnNlKHR3by5yZXNwb25zZVRleHQpOwoKICAgIGNvbnNvbGUubG9nKCdUQVNLJywgdGFzayk7CgogICAgaWYoIXRhc2sgfHwgdGFzay5pc0F1ZGl0KSByZXR1cm47CgogICAgbGV0IHF1ZXN0aW9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnF1ZXN0aW9uJyk7CgogICAgaWYgKCFxdWVzdGlvbikgcmV0dXJuOwoKICAgIGxldCBhbnN3ZXJzICA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5hbnN3ZXInKTsKCiAgICBmb3IobGV0IGkgaW4gT2JqZWN0LmtleXMoYW5zd2VycykpIHF1ZXVlUG9zdChhbnN3ZXJzW2ldKTsKCiAgICBxdWV1ZVBvc3QocXVlc3Rpb24pOwoKICAgIGxldCByZXZpZXdhYmxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLnJldmlld2FibGUtcG9zdCcpOwoKICAgIGZvcihsZXQgaSBpbiBPYmplY3Qua2V5cyhyZXZpZXdhYmxlKSkgcmV2aWV3YWJsZVtpXS5wYXJlbnROb2RlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnJyk7Cn0pOwo="},{"name":"Votes Page Enhancer","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?:\\/\\/(meta\\.|www\\.)?stackoverflow\\.com/users/.*?tab\\=votes.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1457442038376,"data":{}},"enabled":true,"position":21,"uuid":"ad9135a7-2e9a-423b-baf5-6bc59f6598cf","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBWb3RlcyBQYWdlIEVuaGFuY2VyCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMS4wLjAuMgovLyBAZGVzY3JpcHRpb24gIExvYWRzIHBvc3RzIGluIHRoZWlyIG5hdHVyYWwgZm9ybSBvbiB0aGUgdm90ZXMgcGFnZXMgZm9yIHVzZXJzLgovLyBAYXV0aG9yICAgICAgIEBUaW55LUdpYW50Ci8vIEBpbmNsdWRlICAgICAgL2h0dHBzPzpcL1wvKG1ldGFcLnx3d3dcLik/c3RhY2tvdmVyZmxvd1wuY29tL3VzZXJzLy4qP3RhYlw9dm90ZXMuKi8KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQovKiBqc2hpbnQgLVcwOTcgKi8KJ3VzZSBzdHJpY3QnOwoKbGV0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKc3R5bGUudGV4dENvbnRlbnQgPSAnLmFjdHVhbC1lZGl0LW92ZXJsYXkgeyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH0nOwpkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN0eWxlKTsKClN0YWNrRXhjaGFuZ2UudXNpbmcoImlubGluZUVkaXRpbmciLCBmdW5jdGlvbiAoKSB7CiAgICBTdGFja0V4Y2hhbmdlLmlubGluZUVkaXRpbmcuaW5pdCgpOwp9KTsKCmxldCBjc3MgPSBbCiAgICAnLnF1ZXN0aW9uLCAuYW5zd2VyIHsnLAogICAgJyAgICB3aWR0aDogNzMwcHggIWltcG9ydGFudCcsCiAgICAnfScsCiAgICAnLnZvdGVjZWxsIHsnLAogICAgJyAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wICFpbXBvcnRhbnQ7JywKICAgICd9JywKICAgICdoMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHsnLAogICAgJyAgICBmb250LXdlaWdodDogbm9ybWFsJywKICAgICd9JwpdLmpvaW4oJ1xuJyk7CgppZiAoZmFsc2UpOwplbHNlIGlmICgidW5kZWZpbmVkIiAhPSB0eXBlb2YgR01fYWRkU3R5bGUpICBHTV9hZGRTdHlsZShjc3MpOwplbHNlIGlmICgidW5kZWZpbmVkIiAhPSB0eXBlb2YgUFJPX2FkZFN0eWxlKSBQUk9fYWRkU3R5bGUoY3NzKTsKZWxzZSBpZiAoInVuZGVmaW5lZCIgIT0gdHlwZW9mIGFkZFN0eWxlKSAgICAgYWRkU3R5bGUoY3NzKTsKZWxzZSAoZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpLnBhcmVudE5vZGUpOwoKbGV0IGluaXRQb3N0ID0gKHBvc3QsIGh0bWwsIGNvbnRhaW5lciwgbG9hZGVyLCBwYXJlbnQpID0+IHsKICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGV2ZW50ID0+IHsKICAgICAgICBpZih4aHIuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgY29uc29sZS5sb2coeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQsIHhoci5yZXNwb25zZVRleHQpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGxldCBxdWVzdGlvbiA9ICgvXGQrLy5leGVjKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlbmFibGUtbG9hZC1ib2R5LScgKyBwb3N0KS5xdWVyeVNlbGVjdG9yKCdhW2hyZWZdJykpfHxbZmFsc2VdKVswXTsKICAgICAgICAKICAgICAgICBsZXQgb3NuaXBwZXRzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbmlwcGV0Jyk7CiAgICAgICAgCiAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IGh0bWw7CiAgICAgICAgCiAgICAgICAgbGV0IG5zbmlwcGV0cyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuc25pcHBldCcpOwogICAgICAgIAogICAgICAgIGxvYWRlci5yZW1vdmUoKTsKICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTsKCiAgICAgICAgU3RhY2tFeGNoYW5nZS5xdWVzdGlvbi5pbml0KHsKICAgICAgICAgICAgdm90ZXNDYXN0OiBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpLAogICAgICAgICAgICBjYW5WaWV3Vm90ZUNvdW50czogdHJ1ZSwKICAgICAgICAgICAgcXVlc3Rpb25JZDogcXVlc3Rpb24KICAgICAgICB9KTsKCiAgICAgICAgY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5qcy1zaG93LWxpbmsuY29tbWVudHMtbGluaycpLmNsaWNrKCk7CiAgICAgICAgCiAgICAgICAgZm9yKGxldCBpIGluIE9iamVjdC5rZXlzKG5zbmlwcGV0cykpIHsKICAgICAgICAgICAgbnNuaXBwZXRzW2ldLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG9zbmlwcGV0c1tpXSwgbnNuaXBwZXRzW2ldKTsKICAgICAgICAgICAgbnNuaXBwZXRzW2ldLnJlbW92ZSgpOwogICAgICAgIH0KICAgIH0sIGZhbHNlKTsKCiAgICB4aHIub3BlbignR0VUJywgJy9wb3N0cy8nICsgcG9zdCArICcvdm90ZXMnKTsKCiAgICB4aHIuc2VuZCgpOwp9CgpsZXQgZmV0Y2hQb3N0ID0gcG9zdCA9PiB7CiAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VuYWJsZS1sb2FkLWJvZHktJyArIHBvc3QpLnBhcmVudE5vZGUubmV4dEVsZW1lbnRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoJy5ib2R5LWNvbnRhaW5lcicpOwogICAgbGV0IHBhcmVudCA9IGNvbnRhaW5lci5wYXJlbnROb2RlOwogICAgY29udGFpbmVyLnJlbW92ZSgpOwogICAgCiAgICBsZXQgbG9hZGVyID0gcGFyZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJykpOwogICAgbG9hZGVyLmNsYXNzTmFtZSA9ICdib2R5LWNvbnRhaW5lcic7CiAgICBsb2FkZXIuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nOwogICAgbG9hZGVyLmlubmVySFRNTCA9ICc8aW1nIGNsYXNzPSJhamF4LWxvYWRlciIgc3JjPSIvY29udGVudC9pbWcvcHJvZ3Jlc3MtZG90cy5naWYiIHRpdGxlPSJsb2FkaW5nLi4uIiBhbHQ9ImxvYWRpbmcuLi4iPic7CiAgICAKICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGV2ZW50ID0+IHsKICAgICAgICBpZih4aHIuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgY29uc29sZS5sb2coeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQsIHhoci5yZXNwb25zZVRleHQpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpbml0UG9zdChwb3N0LCB4aHIucmVzcG9uc2VUZXh0LCBjb250YWluZXIsIGxvYWRlciwgcGFyZW50KTsKICAgIH0sIGZhbHNlKTsKCiAgICB4aHIub3BlbignR0VUJywgJy9wb3N0cy9hamF4LWxvYWQtcmVhbHRpbWUvJyArIHBvc3QpOwoKICAgIHhoci5zZW5kKCk7Cn0KCiQoZG9jdW1lbnQpLmFqYXhDb21wbGV0ZSgoZXZlbnQsIHJlcXVlc3QsIHNldHRpbmdzKSA9PiB7IAogICAgbGV0IHBvc3QgPSAoL3Bvc3RzXC8oXGQrKVwvYm9keS8uZXhlYyhzZXR0aW5ncy51cmwpfHxbMCwwXSlbMV07CiAgICBpZiAocG9zdCkgZmV0Y2hQb3N0KHBvc3QpOwp9KTs="},{"name":"StackOverflow close votes shortcuts","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"user_agent":"","override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://stackoverflow.com/review/close*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1457501738663,"data":{}},"enabled":true,"position":22,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/CloseVoteShortcuts.user.js","uuid":"183c39eb-3d5b-4dc5-8749-d32ffe920043","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTdGFja092ZXJmbG93IGNsb3NlIHZvdGVzIHNob3J0Y3V0cwovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9rYXBwYTcxOTQvc3RhY2tvdmVyZmxvdy1jbG9zZS12b3Rlcy1zaG9ydGN1dHMKLy8gQHZlcnNpb24gICAgICAxLjAuMgovLyBAZGVzY3JpcHRpb24gIEEgc2NyaXB0IHRvIGFkZCBrZXlib2FyZCBzaG9ydGN1dHMgdG8gU3RhY2tPdmVyZmxvdydzIGNsb3NlIHZvdGVzIHJldmlldyBxdWV1ZQovLyBAYXV0aG9yICAgICAgIEFsYmlyZW8sIHJlbmUKLy8gQG1hdGNoICAgICAgICAqOi8vc3RhY2tvdmVyZmxvdy5jb20vcmV2aWV3L2Nsb3NlKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgovKmdsb2JhbCAkOmZhbHNlICwgZG9jdW1lbnQ6ZmFsc2UsIE11dGF0aW9uT2JzZXJ2ZXI6ZmFsc2UsICAqLwooZnVuY3Rpb24gKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIga2V5cyA9IHsKICAgICAgICAgICAgJzEnOiA0OSwKICAgICAgICAgICAgJzInOiA1MCwKICAgICAgICAgICAgJzMnOiA1MSwKICAgICAgICAgICAgJzQnOiA1MiwKICAgICAgICAgICAgJzUnOiA1MywKICAgICAgICAgICAgJzYnOiA1NCwKICAgICAgICAgICAgJzcnOiA1NSwKICAgICAgICAgICAgJzgnOiA1NiwKICAgICAgICAgICAgJzknOiA1NywKICAgICAgICAgICAgJzAnOiA0OAogICAgICAgIH0sCiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSB7CiAgICAgICAgICAgICAgICAnYWN0aW9ucyc6IHsKICAgICAgICAgICAgICAgICAgICAnbGVhdmVPcGVuJzogeyAna2V5JzogJzEnLCAndmFsdWUnOiAnOCcgfSwKICAgICAgICAgICAgICAgICAgICAnY2xvc2UnOiB7ICdrZXknOiAnMicsICd2YWx1ZSc6ICc2JyB9LAogICAgICAgICAgICAgICAgICAgICdlZGl0JzogeyAna2V5JzogJzMnLCAndmFsdWUnOiAnNScgfSwKICAgICAgICAgICAgICAgICAgICAnc2tpcCc6IHsgJ2tleSc6ICc0JywgJ3ZhbHVlJzogJzEnIH0sCiAgICAgICAgICAgICAgICAgICAgJ25leHQnOiB7ICdrZXknOiAnMCcsICd2YWx1ZSc6ICcyNTQnIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAnY2xvc2VSZWFzb25zJzogewogICAgICAgICAgICAgICAgICAgICdkdXBsaWNhdGUnOiB7ICdrZXknOiAnMScsICd2YWx1ZSc6ICdEdXBsaWNhdGUnIH0sCiAgICAgICAgICAgICAgICAgICAgJ29mZlRvcGljJzogeyAna2V5JzogJzInLCAndmFsdWUnOiAnT2ZmVG9waWMnIH0sCiAgICAgICAgICAgICAgICAgICAgJ3VuY2xlYXInOiB7ICdrZXknOiAnMycsICd2YWx1ZSc6ICdVbmNsZWFyJyB9LAogICAgICAgICAgICAgICAgICAgICd0b29Ccm9hZCc6IHsgJ2tleSc6ICc0JywgJ3ZhbHVlJzogJ1Rvb0Jyb2FkJyB9LAogICAgICAgICAgICAgICAgICAgICdvcGluaW9uQmFzZWQnOiB7ICdrZXknOiAnNScsICd2YWx1ZSc6ICdPcGluaW9uQmFzZWQnIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAnb2ZmVG9waWNSZWFzb25zJzogewogICAgICAgICAgICAgICAgICAgICdzdXBlclVzZXInOiB7ICdrZXknOiAnMScsICd2YWx1ZSc6ICc0JyB9LAogICAgICAgICAgICAgICAgICAgICdzZXJ2ZXJGYXVsdCc6IHsgJ2tleSc6ICcyJywgJ3ZhbHVlJzogJzcnIH0sCiAgICAgICAgICAgICAgICAgICAgJ3JlY29tbWVuZCc6IHsgJ2tleSc6ICczJywgJ3ZhbHVlJzogJzE2JyB9LAogICAgICAgICAgICAgICAgICAgICdtaW5pbWFsUHJvZ3JhbSc6IHsgJ2tleSc6ICc0JywgJ3ZhbHVlJzogJzEzJyB9LAogICAgICAgICAgICAgICAgICAgICd0eXBvJzogeyAna2V5JzogJzUnLCAndmFsdWUnOiAnMTEnIH0sCiAgICAgICAgICAgICAgICAgICAgJ21pZ3JhdGlvbic6IHsgJ2tleSc6ICc2JywgJ3ZhbHVlJzogJzInIH0sCiAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogeyAna2V5JzogJzcnLCAndmFsdWUnOiAnMycgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICdtaWdyYXRpb25SZWFzb25zJzogewogICAgICAgICAgICAgICAgICAgICdtZXRhJzogeyAna2V5JzogJzEnLCAndmFsdWUnOiAnbWV0YS5zdGFja292ZXJmbG93LmNvbScgfSwKICAgICAgICAgICAgICAgICAgICAnc3VwZXJVc2VyJzogeyAna2V5JzogJzInLCAndmFsdWUnOiAnc3VwZXJ1c2VyLmNvbScgfSwKICAgICAgICAgICAgICAgICAgICAndGV4JzogeyAna2V5JzogJzMnLCAndmFsdWUnOiAndGV4LnN0YWNrZXhjaGFuZ2UuY29tJyB9LAogICAgICAgICAgICAgICAgICAgICdkYmEnOiB7ICdrZXknOiAnNCcsICd2YWx1ZSc6ICdkYmEuc3RhY2tleGNoYW5nZS5jb20nIH0sCiAgICAgICAgICAgICAgICAgICAgJ3N0YXRzJzogeyAna2V5JzogJzUnLCAndmFsdWUnOiAnc3RhdHMuc3RhY2tleGNoYW5nZS5jb20nIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHN0YXRlcyA9IHsKICAgICAgICAgICAgICAgIGF0UXVlc3Rpb246IDEsCiAgICAgICAgICAgICAgICBhdENsb3NlUmVhc29uOiAyLAogICAgICAgICAgICAgICAgYXREdXBsaWNhdGU6IDMsCiAgICAgICAgICAgICAgICBhdE9mZlRvcGljOiA0LAogICAgICAgICAgICAgICAgYXRPdGhlclNpdGU6IDUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGVzLmF0UXVlc3Rpb247CgogICAgICAgICAgICBmdW5jdGlvbiBjbGlja0VsZW1lbnQoc2VsZWN0b3IpIHsKICAgICAgICAgICAgICAgICQoc2VsZWN0b3IpLmZvY3VzKCkuY2xpY2soKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gY2xpY2tBY3Rpb24oYWN0aW9uKSB7CiAgICAgICAgICAgICAgICBjbGlja0VsZW1lbnQoJy5yZXZpZXctYWN0aW9ucyBbZGF0YS1yZXN1bHQtdHlwZT0iJyArIGFjdGlvbiArICciXScpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjbGlja0Nsb3NlUmVhc29uKHJlYXNvbikgewogICAgICAgICAgICAgICAgY2xpY2tFbGVtZW50KCdbbmFtZT0iY2xvc2UtcmVhc29uIl1bdmFsdWU9IicgKyByZWFzb24gKyAnIl0nKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gY2xpY2tPZmZUb3BpY1JlYXNvbihyZWFzb24pIHsKICAgICAgICAgICAgICAgIGNsaWNrRWxlbWVudCgnW25hbWU9ImNsb3NlLWFzLW9mZi10b3BpYy1yZWFzb24iXVt2YWx1ZT0iJyArIHJlYXNvbiArICciXScpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjbGlja090aGVyU2l0ZShzaXRlKSB7CiAgICAgICAgICAgICAgICBjbGlja0VsZW1lbnQoJ1tuYW1lPSJtaWdyYXRpb24iXVt2YWx1ZT0iJyArIHNpdGUgKyAnIl0nKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRTdGF0ZSgpIHsKICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGVzLmF0UXVlc3Rpb247CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGFjdGlvbkhhbmRsZXIoa2V5KSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5sZWF2ZU9wZW4ua2V5XToKICAgICAgICAgICAgICAgICAgICBjbGlja0FjdGlvbihjb25maWd1cmF0aW9uLmFjdGlvbnMubGVhdmVPcGVuLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICByZXNldFN0YXRlKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5hY3Rpb25zLmNsb3NlLmtleV06CiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZXMuYXRDbG9zZVJlYXNvbjsKICAgICAgICAgICAgICAgICAgICBjbGlja0FjdGlvbihjb25maWd1cmF0aW9uLmFjdGlvbnMuY2xvc2UudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5lZGl0LmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tBY3Rpb24oY29uZmlndXJhdGlvbi5hY3Rpb25zLmVkaXQudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIHJlc2V0U3RhdGUoKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Uga2V5c1tjb25maWd1cmF0aW9uLmFjdGlvbnMuc2tpcC5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrQWN0aW9uKGNvbmZpZ3VyYXRpb24uYWN0aW9ucy5za2lwLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICByZXNldFN0YXRlKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5hY3Rpb25zLm5leHQua2V5XToKICAgICAgICAgICAgICAgICAgICBjbGlja0FjdGlvbihjb25maWd1cmF0aW9uLmFjdGlvbnMubmV4dC52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgcmVzZXRTdGF0ZSgpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjbG9zZVJlYXNvbkhhbmRsZXIoa2V5KSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLmR1cGxpY2F0ZS5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrQ2xvc2VSZWFzb24oY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMuZHVwbGljYXRlLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YXRlcy5hdER1cGxpY2F0ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Uga2V5c1tjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy5vZmZUb3BpYy5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrQ2xvc2VSZWFzb24oY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMub2ZmVG9waWMudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGVzLmF0T2ZmVG9waWM7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMudW5jbGVhci5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrQ2xvc2VSZWFzb24oY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMudW5jbGVhci52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMudG9vQnJvYWQua2V5XToKICAgICAgICAgICAgICAgICAgICBjbGlja0Nsb3NlUmVhc29uKGNvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLnRvb0Jyb2FkLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Uga2V5c1tjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy5vcGluaW9uQmFzZWQua2V5XToKICAgICAgICAgICAgICAgICAgICBjbGlja0Nsb3NlUmVhc29uKGNvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLm9waW5pb25CYXNlZC52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIG9mZlRvcGljSGFuZGxlcihrZXkpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMuc3VwZXJVc2VyLmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5zdXBlclVzZXIudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLnNlcnZlckZhdWx0LmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5zZXJ2ZXJGYXVsdC52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMucmVjb21tZW5kLmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5yZWNvbW1lbmQudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLm1pbmltYWxQcm9ncmFtLmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5taW5pbWFsUHJvZ3JhbS52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMudHlwby5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrT2ZmVG9waWNSZWFzb24oY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMudHlwby52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMubWlncmF0aW9uLmtleV06CiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZXMuYXRPdGhlclNpdGU7CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5taWdyYXRpb24udmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLm90aGVyLmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5vdGhlci52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIG90aGVyU2l0ZUhhbmRsZXIoa2V5KSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5tZXRhLmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPdGhlclNpdGUoY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLm1ldGEudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5zdXBlclVzZXIua2V5XToKICAgICAgICAgICAgICAgICAgICBjbGlja090aGVyU2l0ZShjb25maWd1cmF0aW9uLm1pZ3JhdGlvblJlYXNvbnMuc3VwZXJVc2VyLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Uga2V5c1tjb25maWd1cmF0aW9uLm1pZ3JhdGlvblJlYXNvbnMudGV4LmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPdGhlclNpdGUoY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLnRleC52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLmRiYS5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrT3RoZXJTaXRlKGNvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5kYmEudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5zdGF0cy5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrT3RoZXJTaXRlKGNvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5zdGF0cy52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGtleUhhbmRsZXIoa2V5KSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7CiAgICAgICAgICAgICAgICBjYXNlIHN0YXRlcy5hdFF1ZXN0aW9uOgogICAgICAgICAgICAgICAgICAgIGFjdGlvbkhhbmRsZXIoa2V5KTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Ugc3RhdGVzLmF0Q2xvc2VSZWFzb246CiAgICAgICAgICAgICAgICAgICAgY2xvc2VSZWFzb25IYW5kbGVyKGtleSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIHN0YXRlcy5hdE9mZlRvcGljOgogICAgICAgICAgICAgICAgICAgIG9mZlRvcGljSGFuZGxlcihrZXkpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBzdGF0ZXMuYXRPdGhlclNpdGU6CiAgICAgICAgICAgICAgICAgICAgb3RoZXJTaXRlSGFuZGxlcihrZXkpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnI3BvcHVwLWNsb3NlLXF1ZXN0aW9uIC5wb3B1cC1jbG9zZSBhJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmVzZXRTdGF0ZSgpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjcG9wdXAtY2xvc2UtcXVlc3Rpb24gLnBvcHVwLXN1Ym1pdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJlc2V0U3RhdGUoKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAkKGRvY3VtZW50KS5vbigna2V5dXAnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHsKICAgICAgICAgICAgICAgICAgICByZXNldFN0YXRlKCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgoZS50YXJnZXQudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBlLnRhcmdldC50eXBlID09PSAndGV4dCcpIHx8IGUudGFyZ2V0LnRhZ05hbWUgPT09ICdURVhUQVJFQScpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIG51bXBhZCBoYW5kbGluZwogICAgICAgICAgICAgICAgaWYgKChlLmtleUNvZGUgPiA5NSkgJiYgKGUua2V5Q29kZSA8IDEwNikpIHsKICAgICAgICAgICAgICAgICAgICBlLmtleUNvZGUgPSBlLmtleUNvZGUgLSA0ODsgCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAga2V5SGFuZGxlcihlLmtleUNvZGUpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KCkpOwoKICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbG9va3VwID0geyB9LCBvYnNlcnZlcjsKICAgICAgICAgICAgbG9va3VwW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5sZWF2ZU9wZW4udmFsdWVdID0gY29uZmlndXJhdGlvbi5hY3Rpb25zLmxlYXZlT3Blbi5rZXk7CiAgICAgICAgICAgIGxvb2t1cFtjb25maWd1cmF0aW9uLmFjdGlvbnMuY2xvc2UudmFsdWVdID0gY29uZmlndXJhdGlvbi5hY3Rpb25zLmNsb3NlLmtleTsKICAgICAgICAgICAgbG9va3VwW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5lZGl0LnZhbHVlXSA9IGNvbmZpZ3VyYXRpb24uYWN0aW9ucy5lZGl0LmtleTsKICAgICAgICAgICAgbG9va3VwW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5za2lwLnZhbHVlXSA9IGNvbmZpZ3VyYXRpb24uYWN0aW9ucy5za2lwLmtleTsKICAgICAgICAgICAgbG9va3VwW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5uZXh0LnZhbHVlXSA9IGNvbmZpZ3VyYXRpb24uYWN0aW9ucy5uZXh0LmtleTsKCiAgICAgICAgICAgIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKG11dGF0aW9ucykgewogICAgICAgICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGksIGosIG5vZGU7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgaiA9IG11dGF0aW9uLmFkZGVkTm9kZXMubGVuZ3RoOyBpIDwgajsgaSA9IGkgKyAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSAkKG11dGF0aW9uLmFkZGVkTm9kZXNbaV0pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5wcm9wKCd0YWdOYW1lJykgPT09ICdJTlBVVCcgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnByb3AoJ3R5cGUnKSA9PT0gJ2J1dHRvbicgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnZhbCgpLmluZGV4T2YoJ1snKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudmFsKCdbJyArIGxvb2t1cFtub2RlLmRhdGEoJ3Jlc3VsdC10eXBlJyldICsgJ10gJyArIG5vZGUudmFsKCkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmV2aWV3LWFjdGlvbnMnKSwgeyAnY2hpbGRMaXN0JzogdHJ1ZSB9KTsKICAgICAgICB9KCkpOwoKICAgICAgICAoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgdmFyIG9ic2VydmVyOwoKICAgICAgICAgICAgLy8gdGhlIG11dGF0aW9uIG9ic2VydmVycyBwaWNrcyB1cCB0aGlzIGNoYW5nZSBhcyB3ZWxsCiAgICAgICAgICAgIC8vIHRoaXMgZnVuY3Rpb24gcHJldmVudCBhZGRpbmcgYW5vdGhlciBbMV0gaWYgaXQgYWxyZWFkeSBoYXMgb25lCiAgICAgICAgICAgIGZ1bmN0aW9uIHNpbmdsZUFkZChlbGVtLCBrZXkpIHsKICAgICAgICAgICAgICAgIHZhciBhZGQgPSAnWycgKyBrZXkgKyAnXSAnOwogICAgICAgICAgICAgICAgLy9zdHJhbmdlbHkgc29tZSBlbGVtIGRvZXNuJ3QgY29udGFpbiBodG1sIGhlbmNlIHRoZSBudWxsIGNoZWNrLi4uCiAgICAgICAgICAgICAgICBpZiAoZWxlbS5odG1sKCkgIT09IG51bGwgJiYgZWxlbS5odG1sKCkuaW5kZXhPZihhZGQpICE9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbS5odG1sKGFkZCArIGVsZW0uaHRtbCgpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gbmV2ZXIgcHJvdmlkZSBhIG5vbi1udW1lcmljIGtleSAhCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFNpYmxpbmdIZWxwZXIocm9vdCwgc2VsZWN0b3IsIGtleSkgewogICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSAkKHJvb3QpLmZpbmQoc2VsZWN0b3IpLm5leHQoKSwKICAgICAgICAgICAgICAgICAgICBrZXlOdW1iZXIgPSBwYXJzZUludChrZXksIDEwKSwKICAgICAgICAgICAgICAgICAgICBpOwogICAgICAgICAgICAgICAgLy8gaWYgYSBjdXN0b20gY2xvc2UgcmVhc29uIGhhcyBiZWVuIGdpdmVuCiAgICAgICAgICAgICAgICAvLyBtdWx0aXBsZSBlbGVtZW50cyBhcmUgZm91bmQKICAgICAgICAgICAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBpdGVyYXRlIGFuZCBpbmNyZWFzZSB0aGUga2V5TnVtYmVyIGJ5IG9uZQogICAgICAgICAgICAgICAgLy8gdGhpcyB3b3JrcyBhcyBsb25nIGFzIHRoZSBjdXN0b20gcmVhc29uIGlzIHRoZSBsYXN0IG9uZS4uLgogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpID0gaSArIDEpIHsKICAgICAgICAgICAgICAgICAgICBzaW5nbGVBZGQoJChlbGVtZW50W2ldKSwga2V5TnVtYmVyLnRvU3RyaW5nKCkpOwogICAgICAgICAgICAgICAgICAgIGtleU51bWJlciA9IGtleU51bWJlciArIDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZENvdXNpbkhlbHBlcihyb290LCBzZWxlY3Rvciwga2V5KSB7CiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9ICQocm9vdCkuZmluZChzZWxlY3RvcikucGFyZW50KCkubmV4dCgpLm5leHQoKTsKICAgICAgICAgICAgICAgIHNpbmdsZUFkZChlbGVtZW50LCBrZXkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBhZGRDbG9zZVJlYXNvbkhlbHBlcihyb290LCByZWFzb24sIGtleSkgewogICAgICAgICAgICAgICAgYWRkU2libGluZ0hlbHBlcihyb290LCAnW25hbWU9ImNsb3NlLXJlYXNvbiJdW3ZhbHVlPSInICsgcmVhc29uICsgJyJdJywga2V5KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gYWRkT2ZmVG9waWNSZWFzb25IZWxwZXIocm9vdCwgcmVhc29uLCBrZXkpIHsKICAgICAgICAgICAgICAgIGFkZFNpYmxpbmdIZWxwZXIocm9vdCwgJ1tuYW1lPSJjbG9zZS1hcy1vZmYtdG9waWMtcmVhc29uIl1bdmFsdWU9IicgKyByZWFzb24gKyAnIl0nLCBrZXkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBhZGRNaWdyYXRpb25IZWxwZXIocm9vdCwgcmVhc29uLCBrZXkpIHsKICAgICAgICAgICAgICAgIGFkZENvdXNpbkhlbHBlcihyb290LCAnW25hbWU9Im1pZ3JhdGlvbiJdW3ZhbHVlPSInICsgcmVhc29uICsgJyJdJywga2V5KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gYWRkSGVscGVycyhyb290KSB7CiAgICAgICAgICAgICAgICBhZGRDbG9zZVJlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy5kdXBsaWNhdGUudmFsdWUsIGNvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLmR1cGxpY2F0ZS5rZXkpOwogICAgICAgICAgICAgICAgYWRkQ2xvc2VSZWFzb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMub2ZmVG9waWMudmFsdWUsIGNvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLm9mZlRvcGljLmtleSk7CiAgICAgICAgICAgICAgICBhZGRDbG9zZVJlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy51bmNsZWFyLnZhbHVlLCBjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy51bmNsZWFyLmtleSk7CiAgICAgICAgICAgICAgICBhZGRDbG9zZVJlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy50b29Ccm9hZC52YWx1ZSwgY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMudG9vQnJvYWQua2V5KTsKICAgICAgICAgICAgICAgIGFkZENsb3NlUmVhc29uSGVscGVyKHJvb3QsIGNvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLm9waW5pb25CYXNlZC52YWx1ZSwgY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMub3BpbmlvbkJhc2VkLmtleSk7CiAgICAgICAgICAgICAgICBhZGRPZmZUb3BpY1JlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5zdXBlclVzZXIudmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLnN1cGVyVXNlci5rZXkpOwogICAgICAgICAgICAgICAgYWRkT2ZmVG9waWNSZWFzb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMuc2VydmVyRmF1bHQudmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLnNlcnZlckZhdWx0LmtleSk7CiAgICAgICAgICAgICAgICBhZGRPZmZUb3BpY1JlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5yZWNvbW1lbmQudmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLnJlY29tbWVuZC5rZXkpOwogICAgICAgICAgICAgICAgYWRkT2ZmVG9waWNSZWFzb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMubWluaW1hbFByb2dyYW0udmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLm1pbmltYWxQcm9ncmFtLmtleSk7CiAgICAgICAgICAgICAgICBhZGRPZmZUb3BpY1JlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy50eXBvLnZhbHVlLCBjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy50eXBvLmtleSk7CiAgICAgICAgICAgICAgICBhZGRPZmZUb3BpY1JlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5taWdyYXRpb24udmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLm1pZ3JhdGlvbi5rZXkpOwogICAgICAgICAgICAgICAgYWRkT2ZmVG9waWNSZWFzb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMub3RoZXIudmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLm90aGVyLmtleSk7CiAgICAgICAgICAgICAgICBhZGRNaWdyYXRpb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLm1ldGEudmFsdWUsIGNvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5tZXRhLmtleSk7CiAgICAgICAgICAgICAgICBhZGRNaWdyYXRpb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLnN1cGVyVXNlci52YWx1ZSwgY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLnN1cGVyVXNlci5rZXkpOwogICAgICAgICAgICAgICAgYWRkTWlncmF0aW9uSGVscGVyKHJvb3QsIGNvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy50ZXgudmFsdWUsIGNvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy50ZXgua2V5KTsKICAgICAgICAgICAgICAgIGFkZE1pZ3JhdGlvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLm1pZ3JhdGlvblJlYXNvbnMuZGJhLnZhbHVlLCBjb25maWd1cmF0aW9uLm1pZ3JhdGlvblJlYXNvbnMuZGJhLmtleSk7CiAgICAgICAgICAgICAgICBhZGRNaWdyYXRpb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLnN0YXRzLnZhbHVlLCBjb25maWd1cmF0aW9uLm1pZ3JhdGlvblJlYXNvbnMuc3RhdHMua2V5KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7CiAgICAgICAgICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSwgaiwgbm9kZTsKICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBqID0gbXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGg7IGkgPCBqOyBpID0gaSArIDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG11dGF0aW9uLmFkZGVkTm9kZXNbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnRhZ05hbWUgPT09ICdESVYnICYmIG5vZGUuaWQgPT09ICdwb3B1cC1jbG9zZS1xdWVzdGlvbicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEhlbHBlcnMobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZXZpZXctY29udGVudCcpLCB7ICdjaGlsZExpc3QnOiB0cnVlLCAnc3VidHJlZSc6IHRydWUgfSk7CiAgICAgICAgfSgpKTsKICAgIH0pOwp9KCkpOwo="}]}