{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Stack Exchange CV Request Generator","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/\\w*.?(stackexchange.com|stackoverflow.com|serverfault.com|superuser.com|askubuntu.com|stackapps.com|mathoverflow.net)\\/q(uestions)?\\/\\d+/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1454683014382},"enabled":true,"position":1,"file_url":"https://rawgit.com/SO-Close-Vote-Reviewers/UserScripts/master/SECloseVoteRequestGenerator.user.js","uuid":"92eb7581-a2c9-462d-af44-7eb8c903f8cb","source":""},{"name":"stackoverflow-comment-reply","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://stackoverflow.com/*","*://serverfault.com/*","*://superuser.com/*","*://meta.stackoverflow.com/*","*://meta.serverfault.com/*","*://meta.superuser.com/*","*://stackapps.com/*","*://*.stackexchange.com/*","*://askubuntu.com/*","*://meta.askubuntu.com/*","*://answers.onstartups.com/*","*://meta.answers.onstartups.com/*","*://mathoverflow.net/*","*://area51.stackexchange.com/proposals/*"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1454683014402},"enabled":true,"position":2,"file_url":"https://bitbucket.org/balpha/user-scripts/raw/tip/comment-reply-links/comment-reply-links.user.js","uuid":"b30320e8-9e48-4191-9a0a-15f6c81e1d21","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIHN0YWNrb3ZlcmZsb3ctY29tbWVudC1yZXBseQovLyBAbmFtZXNwYWNlICAgICAgc3RhY2tvdmVyZmxvdwovLyBAZGVzY3JpcHRpb24gICAgQWRkICJyZXBseSIgbGlua3MgdG8gY29tbWVudHMKLy8gQHZlcnNpb24gICAgICAgIDEuMQovLyBAbWF0Y2ggICAgICAgICAgKjovL3N0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9zZXJ2ZXJmYXVsdC5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL3N1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuc3RhY2tvdmVyZmxvdy5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuc2VydmVyZmF1bHQuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9tZXRhLnN1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL3N0YWNrYXBwcy5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL2Fza3VidW50dS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuYXNrdWJ1bnR1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAqOi8vYW5zd2Vycy5vbnN0YXJ0dXBzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAqOi8vbWV0YS5hbnN3ZXJzLm9uc3RhcnR1cHMuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9tYXRob3ZlcmZsb3cubmV0LyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9hcmVhNTEuc3RhY2tleGNoYW5nZS5jb20vcHJvcG9zYWxzLyoKLy8gQGF1dGhvciAgICAgICAgIEJlbmphbWluIER1bWtlLXZvbiBkZXIgRWhlCi8vID09L1VzZXJTY3JpcHQ9PQoKLy8gVGhhbmtzIHRvIFNob2c5IGZvciB0aGlzIGlkZWEgZm9yIG1ha2luZyB0aGUgc2NyaXB0IHdvcmsgaW4gYm90aAovLyBDaHJvbWUgYW5kIEZpcmVmb3g6Ci8vIGh0dHA6Ly9tZXRhLnN0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80NjU2MgpmdW5jdGlvbiB3aXRoX2pxdWVyeShmKSB7CiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogICAgc2NyaXB0LnRleHRDb250ZW50ID0gIigiICsgZi50b1N0cmluZygpICsgIikoalF1ZXJ5KSI7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7Cn07Cgp3aXRoX2pxdWVyeShmdW5jdGlvbigkKSB7CiAgICAgICAgCiAgICAkKGRvY3VtZW50KS5hamF4Q29tcGxldGUoZnVuY3Rpb24oKXsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiLmNvbW1lbnRzIikuZWFjaChwdXRfcmVwbHlfbGlua3MpOwogICAgICAgIH0sIDEwMCk7CiAgICB9KTsKICAgICAgICAKICAgIC8vIGV2ZW50IGhhbmRsZXIgZm9yIGEgY2xpY2sgb24gdGhlIHJlcGx5IGxpbmtzCiAgICBmdW5jdGlvbiByZXBseSgpIHsKICAgICAgICB2YXIgY29tbWVudGxpbmsgPSAkKHRoaXMpLmNsb3Nlc3QoIi5jb21tZW50cyIpLm5leHQoKS5jbGljaygpOwogICAgICAgIHZhciBjb21tZW50bGlua0lkID0gY29tbWVudGxpbmsuYXR0cigiaWQiKTsKICAgICAgICB2YXIgdXNlcm5hbWUgPSBnb29kaWZ5KCQodGhpcykucHJldigpLnRleHQoKS5yZXBsYWNlKC/imaYvLCAiIikpCiAgICAgICAgdmFyIGZvcm1pZCA9IGNvbW1lbnRsaW5rSWQucmVwbGFjZSgvXi4qLShcZCspJC8sICJhZGQtY29tbWVudC0kMSIpOwogICAgICAgIHZhciB0YSA9ICQoIiMiICsgZm9ybWlkICsgIiB0ZXh0YXJlYSIpWzBdOwogICAgICAgIHZhciBzdGFydCA9IHRhLnNlbGVjdGlvblN0YXJ0OwogICAgICAgIHZhciBlbmQgPSB0YS5zZWxlY3Rpb25FbmQ7CiAgICAgICAgdmFyIHNoaWZ0ID0gdXNlcm5hbWUubGVuZ3RoICsgMzsKICAgICAgICB0YS52YWx1ZSA9ICJAIiArIHVzZXJuYW1lICsgIjogIiArIHRhLnZhbHVlOwogICAgICAgIHRhLmZvY3VzKCk7CiAgICAgICAgdGEuc2VsZWN0aW9uU3RhcnQgPSBzdGFydCArIHNoaWZ0OwogICAgICAgIHRhLnNlbGVjdGlvbkVuZCA9IGVuZCArIHNoaWZ0OwogICAgfTsKCiAgICBmdW5jdGlvbiBwdXRfcmVwbHlfbGlua3MoKSB7CiAgICAgICAgJCh0aGlzKS5maW5kKCIuY29tbWVudDpub3QoOmhhcygucmVwbHktbGluaykpIC5jb21tZW50LXVzZXIiKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiPHNwYW4gY2xhc3M9J3JlcGx5LWxpbmsnIHN0eWxlPSdjdXJzb3I6cG9pbnRlcjsnIHRpdGxlPSdyZXBseSc+ICZjcmFycjs8L3NwYW4+IikuY2xpY2socmVwbHkpLmluc2VydEFmdGVyKHRoaXMpOwogICAgICAgIH0pOwogICAgfQogICAgICAgICAgICAKICAgICQoIi5jb21tZW50cyIpLmVhY2gocHV0X3JlcGx5X2xpbmtzKTsKICAgIAogICAgZnVuY3Rpb24gZ29vZGlmeShzKSB7CiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvICsvZywgIiIpOwogICAgfSAgCiAgICAKfSk7"},{"name":"Stack Exchange like I like it","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["/^https?:\\/\\/(chat|blog|careers)\\..*/"],"orig_includes":[],"orig_matches":["*://stackexchange.com/*","*://*.stackexchange.com/*/*","*://stackoverflow.com/*/*","*://*.stackoverflow.com/*/*","*://stackapps.com/*/*","*://serverfault.com/*/*","*://superuser.com/*/*","*://askubuntu.com/*/*","*://mathoverflow.net/*/*"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1454683014414},"enabled":true,"position":3,"file_url":"https://github.com/calraith/gm_scripts/raw/master/se_like_I_like_it.user.js","uuid":"a490bb56-67fc-4b13-ba27-3ac98ef75e75","source":""},{"name":"StackExchange obvious followed link color","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?\\:\\/\\/([a-z\\.]*\\.)?stackexchange\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?askubuntu\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?superuser\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?serverfault\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?stackoverflow\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?answers.onstartups\\.com\\/.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1454683014437},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/3362-stackexchange-obvious-followed-link-color/code/StackExchange%20obvious%20followed%20link%20color.user.js","uuid":"6ea166e0-79ab-4e14-9f4e-fe17128833fc","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgU3RhY2tFeGNoYW5nZSBvYnZpb3VzIGZvbGxvd2VkIGxpbmsgY29sb3IKLy8gQG5hbWVzcGFjZSBodHRwOi8vb3N0ZXJtaWxsZXIub3JnLwovLyBAdmVyc2lvbiAxLjAwCi8vIEBkZXNjcmlwdGlvbiBDaGFuZ2UgdGhlIGNvbG9yIG9mIGZvbGxvd2VkIGxpbmtzIG9uIGFsbCBTdGFja0V4Y2hhbmdlIHNpdGVzIHNvIHRoZXkgdGhleSBhcmUgZWFzaWx5IGRpc3Rpbmd1aXNoYWJsZS4KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9zdGFja2V4Y2hhbmdlXC5jb21cLy4qLwovLyBAaW5jbHVkZSAvaHR0cHM/XDpcL1wvKFthLXpcLl0qXC4pP2Fza3VidW50dVwuY29tXC8uKi8KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9zdXBlcnVzZXJcLmNvbVwvLiovCi8vIEBpbmNsdWRlIC9odHRwcz9cOlwvXC8oW2EtelwuXSpcLik/c2VydmVyZmF1bHRcLmNvbVwvLiovCi8vIEBpbmNsdWRlIC9odHRwcz9cOlwvXC8oW2EtelwuXSpcLik/c3RhY2tvdmVyZmxvd1wuY29tXC8uKi8KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9hbnN3ZXJzLm9uc3RhcnR1cHNcLmNvbVwvLiovCi8vIEBncmFudCBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gYWRkQ3NzKGNzc1N0cmluZykgewogICAgdmFyIG5ld0NzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CiAgICBuZXdDc3MudHlwZSA9ICJ0ZXh0L2NzcyI7CiAgICBuZXdDc3MuaW5uZXJIVE1MID0gY3NzU3RyaW5nOwogICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChuZXdDc3MpOwogICAgY29uc29sZS5sb2coImFwcGVuZGVkIGNzcyIpOwp9CgphZGRDc3MgKAogICAgJy5xdWVzdGlvbi1oeXBlcmxpbms6dmlzaXRlZCwgLnJlc3VsdC1saW5rIGE6dmlzaXRlZCB7Y29sb3I6ICMwMDAwOEIgISBpbXBvcnRhbnQ7fScKKTsg"},{"name":"Unclosed Request Review Script","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://chat.stackoverflow.com/rooms/41570/*","*://chat.stackoverflow.com/search?q=tagged%2Fcv-pls&Room=41570&page=*&pagesize=50&sort=newest"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1454683014471},"enabled":true,"position":5,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/UnclosedRequestReview.user.js","uuid":"ea33379b-d41e-4b0a-8231-2ab1c5a6b70f","source":""},{"name":"Stack Exchange: Add Timeline and Revisions links to posts","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/questions/*","*://*.mathoverflow.net/questions/*","*://*.serverfault.com/questions/*","*://*.stackapps.com/questions/*","*://*.stackexchange.com/questions/*","*://*.stackoverflow.com/questions/*","*://*.superuser.com/questions/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1454683014479},"enabled":true,"position":6,"file_url":"https://gist.github.com/BrockA/5761948/raw/Add_Timeline_Button_to_Stack_Exchange_questions.user.js","uuid":"88d06f2f-ef9a-464b-85ee-432a3c718aa2","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFN0YWNrIEV4Y2hhbmdlOiBBZGQgVGltZWxpbmUgYW5kIFJldmlzaW9ucyBsaW5rcyB0byBwb3N0cwovLyBAZGVzY3JpcHRpb24gQWRkcyBsaW5rcyB0byBwb3N0cyB0byBhbHdheXMgc2hvdyBoaXN0b3J5IGFuZCBsaW5rcyB0byBxdWVzdGlvbnMgdG8gc2hvdyB0aGUgVGltZWxpbmUiLgovLyBAbmFtZXNwYWNlICAgU3RhY2tFeGNoYW5nZQovLyBAbWF0Y2ggICAgICAgKjovLyouYXNrdWJ1bnR1LmNvbS9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyoubWF0aG92ZXJmbG93Lm5ldC9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyouc2VydmVyZmF1bHQuY29tL3F1ZXN0aW9ucy8qCi8vIEBtYXRjaCAgICAgICAqOi8vKi5zdGFja2FwcHMuY29tL3F1ZXN0aW9ucy8qCi8vIEBtYXRjaCAgICAgICAqOi8vKi5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyouc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLyoKLy8gQG1hdGNoICAgICAgICo6Ly8qLnN1cGVydXNlci5jb20vcXVlc3Rpb25zLyoKLy8gQHZlcnNpb24gICAgIDEuMgovLyBAaGlzdG9yeSAgICAgMS4yIFVwZGF0ZWQgbWF0Y2ggbGlzdAovLyBAaGlzdG9yeSAgICAgMS4xIEFkZGVkIHJldmlzaW9ucyBsaW5rCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gYWRkVXRpbGl0eUxpbmtzICgkKSB7CgogICAgJCgiLnBvc3QtbWVudSIpLmVhY2ggKCBmdW5jdGlvbiAoSikgewogICAgICAgIHZhciBqVGhpcyAgID0gJCh0aGlzKTsKICAgICAgICB2YXIgaHJlZiAgICA9IGpUaGlzLmZpbmQgKCdhW2NsYXNzPSJzaG9ydC1saW5rIl0nKS5hdHRyICgiaHJlZiIpOwogICAgICAgIHZhciBpZE10Y2ggID0gaHJlZi5zcGxpdCAoL1txYV1cLyhcZCspLyk7CiAgICAgICAgaWYgKGlkTXRjaC5sZW5ndGggPiAyKSB7CiAgICAgICAgICAgIHZhciBpZCAgPSBpZE10Y2hbMV07CiAgICAgICAgICAgIGpUaGlzLmFwcGVuZCAoCiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9ImxzZXAiPnw8L3NwYW4+PGEgaHJlZj0iL3Bvc3RzLycgKyBpZCArICcvcmV2aXNpb25zIj5yZXZpc2lvbnM8L2E+JwogICAgICAgICAgICApOwoKICAgICAgICAgICAgaWYgKEogPT09IDApIHsgIC8vLS0gUXVlc3Rpb24gb25seQogICAgICAgICAgICAgICAgalRoaXMuYXBwZW5kICgKICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9ImxzZXAiPnw8L3NwYW4+PGEgaHJlZj0iL3Bvc3RzLycgKyBpZCArICcvdGltZWxpbmUiPnRpbWVsaW5lPC9hPicKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9ICk7CiAgICAkKCIucmV2Y2VsbDMudm0+ZGl2IikuZWFjaCAoZnVuY3Rpb24gKCkgewogICAgICAgIC8vLS0gTG9va3MgbGlrZSBhIHRpbWVib21iLi4uCiAgICAgICAgZ3VpZCA9ICQodGhpcykuZmluZCAoImEiKS5hdHRyICgiaHJlZiIpLm1hdGNoICgvXHd7OH0gKD86LVx3ezR9ICl7M30tXHd7MTJ9LylbMF07CiAgICAgICAgJCh0aGlzKS5wcmVwZW5kICgnPGEgaHJlZj0iI3JldicgKyBndWlkICsgJyI+bGluazwvYT48c3BhbiBjbGFzcz0ibHNlcCI+fDwvc3Bhbj4nKTsKICAgIH0gKTsKfQoKd2l0aFBhZ2VzX2pRdWVyeSAoYWRkVXRpbGl0eUxpbmtzKTsKCmZ1bmN0aW9uIHdpdGhQYWdlc19qUXVlcnkgKE5BTUVEX0Z1bmN0aW9uVG9SdW4pIHsKICAgIC8vLS0tIFVzZSBuYW1lZCBmdW5jdGlvbnMgZm9yIGNsYXJpdHkgYW5kIGRlYnVnZ2luZy4uLgogICAgdmFyIGZ1bmNUZXh0ICAgICAgICA9IE5BTUVEX0Z1bmN0aW9uVG9SdW4udG9TdHJpbmcgKCk7CiAgICB2YXIgZnVuY05hbWUgICAgICAgID0gZnVuY1RleHQucmVwbGFjZSAoL15mdW5jdGlvblxzKyhcdyspXHMqXCgoLnxcbnxccikrJC8sICIkMSIpOwogICAgdmFyIHNjcmlwdCAgICAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgKCJzY3JpcHQiKTsKICAgIHNjcmlwdC50ZXh0Q29udGVudCAgPSBmdW5jVGV4dCArICJcblxuIjsKICAgIHNjcmlwdC50ZXh0Q29udGVudCArPSAnalF1ZXJ5KGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24gKCkgeycgKyBmdW5jTmFtZSArICcoalF1ZXJ5KTt9ICk7JzsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgKHNjcmlwdCk7Cn07Cg=="},{"name":"Chat Reply Helper for Stack Exchange sites","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/chat\\.stackexchange\\.com/.*$/","/^https?:\\/\\/chat\\.stackoverflow\\.com/.*$/","/^https?:\\/\\/chat\\.meta\\.stackexchange\\.com/.*$/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1454683014486},"enabled":true,"position":7,"file_url":"https://raw.githubusercontent.com/oliversalzburg/se-chat-reply-highlight/master/dist/se-chat-replyhelper.user.js","uuid":"4d7672e8-fd1e-4a91-a55f-fbe9bc041877","source":""},{"name":"Helpful Flag Percentage","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.stackexchange.com/users/flag-summary/*","*://*.stackoverflow.com/users/flag-summary/*","*://*.stackapps.com/users/flag-summary/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1454683014493},"enabled":true,"position":8,"uuid":"a0dec57b-c225-47bc-8e4a-4677037b017f","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBIZWxwZnVsIEZsYWcgUGVyY2VudGFnZQovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTQ1NDUzOC8KLy8gQGF1dGhvciAgICAgICBlbmtpCi8vIEBtYXRjaCAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vdXNlcnMvZmxhZy1zdW1tYXJ5LyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5zdGFja292ZXJmbG93LmNvbS91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnN0YWNrYXBwcy5jb20vdXNlcnMvZmxhZy1zdW1tYXJ5LyoKLy8gPT0vVXNlclNjcmlwdD09Ci8qanNsaW50IGJyb3dzZXI6IHRydWUsIHdoaXRlOiB0cnVlKi8KLypqc2xpbnQgdGhpcyAqLwovKmdsb2JhbCAkLCBqUXVlcnkqLwokKGZ1bmN0aW9uICgpIHsKJ3VzZSBzdHJpY3QnOwoKICAgIHZhciBoZWxwZnVsRmxhZ3MgPSAwOwogICAgJCgidGQgPiBhOmNvbnRhaW5zKCdoZWxwZnVsJykiKS5wYXJlbnQoKS5wcmV2KCkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgaGVscGZ1bEZsYWdzICs9IHBhcnNlSW50KCQodGhpcykudGV4dCgpLnJlcGxhY2UoIiwiLCIiKSk7CiAgICB9KTsKCiAgICB2YXIgZGVjbGluZWRGbGFncyA9IDA7CiAgICAkKCJ0ZCA+IGE6Y29udGFpbnMoJ2RlY2xpbmVkJykiKS5wYXJlbnQoKS5wcmV2KCkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgZGVjbGluZWRGbGFncyArPSBwYXJzZUludCgkKHRoaXMpLnRleHQoKS5yZXBsYWNlKCIsIiwiIikpOwogICAgfSk7CgogICAgaWYgKGhlbHBmdWxGbGFncyA+IDApIHsKCiAgICAgICAgdmFyIHBlcmNlbnRIZWxwZnVsID0gTnVtYmVyKE1hdGgucm91bmQoKGhlbHBmdWxGbGFncyAvIChoZWxwZnVsRmxhZ3MgKyBkZWNsaW5lZEZsYWdzKSkgKiAxMDAgKyAnZTInKSArICdlLTInKTsKCiAgICAgICAgaWYgKHBlcmNlbnRIZWxwZnVsID4gMTAwICkgewogICAgICAgICAgICBwZXJjZW50SGVscGZ1bCA9IDEwMDsKICAgICAgICB9CgogICAgICAgIHZhciBwZXJjZW50Q29sb3I7CiAgICAgICAgaWYgKHBlcmNlbnRIZWxwZnVsID49IDkwKSB7CiAgICAgICAgICAgIHBlcmNlbnRDb2xvciA9ICJsaW1lZ3JlZW4iOwogICAgICAgIH0gZWxzZSBpZiAocGVyY2VudEhlbHBmdWwgPj0gODApIHsKICAgICAgICAgICAgcGVyY2VudENvbG9yID0gImRhcmtvcmFuZ2UiOwogICAgICAgIH0gZWxzZSBpZiAocGVyY2VudEhlbHBmdWwgPCA4MCkgewogICAgICAgICAgICBwZXJjZW50Q29sb3IgPSAicmVkIjsKICAgICAgICB9IAoKICAgICAgICB2YXIgY3NzID0gIjxzdHlsZT5cCiAgICAgICAgICAgICAgICAgICAgI3Byb2dyZXNzIHtcCiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNjY2M7XAogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwcHg7XAogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjIwcHg7XAogICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDZweCAxMHB4IDEwcHggMDtcCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDtcCiAgICAgICAgICAgICAgICAgICB9XAogICAgICAgICAgICAgICAgICAgICNwcm9ncmVzczphZnRlciB7XAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnJztcCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1wKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIiArIHBlcmNlbnRDb2xvciArICI7XAogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIiArIHBlcmNlbnRIZWxwZnVsICsgIiU7XAogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XAogICAgICAgICAgICAgICAgICAgIH1cCiAgICAgICAgICAgICAgICAgICAgI3BlcmNlbnRIZWxwZnVsIHtcCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcCiAgICAgICAgICAgICAgICAgICAgfVwKICAgICAgICAgICAgICAgICAgICA8L3N0eWxlPiI7CgogICAgICAgICQoJ2hlYWQnKS5hcHBlbmQoY3NzKTsKCiAgICAgICAgJCgiI2ZsYWctc3RhdC1pbmZvLXRhYmxlIikuYmVmb3JlKCI8aDMgaWQ9J3BlcmNlbnRIZWxwZnVsJyB0aXRsZT0ncGVuZGluZywgYWdlZCBhd2F5IGFuZCBkaXNwdXRlZCBmbGFncyBhcmUgbm90IGNvdW50ZWQnPjxzcGFuIGlkPSdwZXJjZW50Jz4iICsgcGVyY2VudEhlbHBmdWwgKyAiJTwvc3Bhbj4gaGVscGZ1bDwvaDM+Iik7CiAgICAgICAgJCgic3BhbiNwZXJjZW50IikuY3NzKCJjb2xvciIsIHBlcmNlbnRDb2xvcik7CgogICAgICAgICQoIiNwZXJjZW50SGVscGZ1bCIpLmFmdGVyKCI8ZGl2IGlkPSdwcm9ncmVzcyc+PC9kaXY+Iik7CiAgICB9Cn0pOw=="},{"name":"StackUnderflow","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["https://stackoverflow.com/*","http://stackoverflow.com/*","https://www.stackoverflow.com/*","http://www.stackoverflow.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{"blacklisted_5813490":"bfalse","favourite_5813490":"bfalse"},"ts":1454683014505},"enabled":true,"position":9,"file_url":"https://github.com/MarcinOrlowski/StackUnderflow/raw/master/stackunderflow.user.js","uuid":"a11df221-cb98-410d-b25a-c9ddfd9f05bd","source":""},{"name":"Interesting Questions alternate highlighting","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.stackexchange.com/*","*://*.stackoverflow.com/*","*://*.superuser.com/*","*://*.serverfault.com/*","*://*.askubuntu.com/*","*://*.stackapps.com/*","*://*.mathoverflow.net/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1454683014514},"enabled":true,"position":10,"file_url":"https://gist.github.com/shu8/415cd905568ad9667f46/raw/ffbc35151fbecce5436aa819bf282336c42b59fb/favoriteQuestions.user.js","uuid":"2a77d2d9-e7cf-4487-9acd-ecbcb7d8e4e3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBJbnRlcmVzdGluZyBRdWVzdGlvbnMgYWx0ZXJuYXRlIGhpZ2hsaWdodGluZwovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly9zdGFja2V4Y2hhbmdlLmNvbS91c2Vycy80MzM3ODEwLyVFMSVCOSVBNyVEMCVCRCVDQSU4QSVDMyU5RgovLyBAdmVyc2lvbiAgICAgIDAuMgovLyBAZGVzY3JpcHRpb24gIENoYW5nZXMgU3RhY2sgRXhjaGFuZ2Ugd2Vic2l0ZXMgJ2Zhdm9yaXRlIHRhZ3MnIGhpZ2hsaWdodGluZyB0byBqdXN0IHRoZSB0YWcuCi8vIEBhdXRob3IgICAgICAg4bmn0L3KisOfCi8vIEBtYXRjaAkJICo6Ly8qLnN0YWNrZXhjaGFuZ2UuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLnN0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLnN1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggCQkgKjovLyouc2VydmVyZmF1bHQuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLmFza3VidW50dS5jb20vKgovLyBAbWF0Y2gJCSAqOi8vKi5zdGFja2FwcHMuY29tLyoKLy8gQG1hdGNoCQkgKjovLyoubWF0aG92ZXJmbG93Lm5ldC8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KdmFyIHVzZXJzY3JpcHQgPSBmdW5jdGlvbigkKSB7CiAgICAkKHdpbmRvdykuYmluZCgibG9hZCIsIGZ1bmN0aW9uKCkgewogICAgICAgIAogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdzdXBlcnVzZXInKSA+IC0xKSB7IC8vc3VwZXJ1c2VyCiAgICAgICAgICAgIHZhciBiZXR0ZXJDU1MgPSB7CiAgICAgICAgICAgIAliYWNrZ3JvdW5kQ29sb3I6ICcjYTFlYWZmJywKICAgICAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snICAgICAgICAgICAgICAgIAogICAgICAgIAl9OwogICAgICAgIH0KICAgICAgICBlbHNlIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdzdGFja292ZXJmbG93JykgPiAtMSkgeyAvL3N0YWNrb3ZlcmZsb3cKICAgICAgICAJdmFyIGJldHRlckNTUyA9IHsKICAgICAgICAgICAgCWJhY2tncm91bmRDb2xvcjogJyNmZmVmYzYnLAogICAgICAgICAgICAJYm9yZGVyV2lkdGg6ICcwJyAgICAgICAgICAgICAgICAKICAgICAgICAJfTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignLnN0YWNrZXhjaGFuZ2UuY29tJykgPiAtMSkgewogICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignbWV0YScpID09PSAtMSkgeyAvL2JldGEgc2l0ZXMKICAgICAgICAgICAgICAgIHZhciBiZXR0ZXJDU1MgPSB7CiAgICAgICAgICAgIAliYWNrZ3JvdW5kQ29sb3I6ICcjYzNkYWZhJywKICAgICAgICAgICAgCWJvcmRlcldpZHRoOiAnMCcgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB9OyAKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHggPSAkKCIjaW50ZXJlc3RpbmdUYWdzIikudGV4dCgpOwogICAgICAgIHZhciBpbnRlcmVzdGluZyA9IHguc3BsaXQoJyAnKTsKICAgICAgICBpbnRlcmVzdGluZy5wb3AoKTsgLy9CZWNhdXNlIHRoZXJlJ3Mgb25lIGV4dHJhIHZhbHVlIGF0IHRoZSBlbmQKCiAgICAgICAgCgogICAgICAgICQoIi50YWdnZWQtaW50ZXJlc3RpbmcgPiAuc3VtbWFyeSA+IC50YWdzID4gLnBvc3QtdGFnIikuZmlsdGVyKGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgICAgIHJldHVybiBpbnRlcmVzdGluZy5pbmRleE9mKCQodGhpcykudGV4dCgpKSA+IC0xOwogICAgICAgIH0pLmNzcyhiZXR0ZXJDU1MpOwoKICAgICAgICAvLyAkKCIudGFnZ2VkLWludGVyZXN0aW5nIikucmVtb3ZlQ2xhc3MoInRhZ2dlZC1pbnRlcmVzdGluZyIpOwogICAgfSk7Cn07Cgp2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKZWwudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwplbC50ZXh0ID0gJygnICsgdXNlcnNjcmlwdCArICcpKGpRdWVyeSk7JzsKZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlbCk7"},{"name":"Trainwreck","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?:\\/\\/chat.stackoverflow.com\\/rooms\\/.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1454688289348,"data":{}},"enabled":true,"position":11,"file_url":"https://raw.githubusercontent.com/Tiny-Giant/myuserscripts/master/Trainwreck.user.js","uuid":"5c178b91-f9ac-47b9-b718-16a2fa840aeb","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBUcmFpbndyZWNrCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL2dpdGh1Yi5jb20vVGlueS1HaWFudAovLyBAdmVyc2lvbiAgICAgIDEuMC4wLjEKLy8gQGRlc2NyaXB0aW9uICBQb3N0cyBhIGxpbmsgdG8gYSByYW5kb20gdHJhaW53cmVjayBpbWFnZSB3aXRoIHRoZSB0ZXh0ICIjUmVrZFRyYWluIgovLyBAYXV0aG9yICAgICAgIEBUaW55R2lhbnQKLy8gQGluY2x1ZGUgICAgICAvaHR0cHM/OlwvXC9jaGF0LnN0YWNrb3ZlcmZsb3cuY29tXC9yb29tc1wvLiovCi8vIEBncmFudCAgICAgICAgR01feG1saHR0cFJlcXVlc3QKLy8gPT0vVXNlclNjcmlwdD09Ci8qIGpzaGludCAtVzA5NyAqLwondXNlIHN0cmljdCc7CgoKbGV0IHJvb20gPSAoL1xkKy8uZXhlYyh3aW5kb3cubG9jYXRpb24uaHJlZil8fFtmYWxzZV0pWzBdOwoKaWYgKCFyb29tKSByZXR1cm47CgoKbGV0IGZrZXkgPSAoZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2ZrZXknKXx8e3ZhbHVlOiBmYWxzZX0pLnZhbHVlOwoKaWYgKCFma2V5KSByZXR1cm47CgoKbGV0IG5vZGVzID0ge307CgoKbm9kZXMuc2NvcGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY2hhdC1idXR0b25zJyk7Cgpub2Rlcy5yZWtkYnRuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYnV0dG9uJyk7Cm5vZGVzLnJla2RidG4uY2xhc3NOYW1lID0gJ2J1dHRvbiByZWtkYnRuJzsKbm9kZXMucmVrZGJ0bi50ZXh0Q29udGVudCA9ICd3cmVjayB0cmFpbic7Cm5vZGVzLnNjb3BlLmFwcGVuZENoaWxkKG5vZGVzLnJla2RidG4pOwoKCm5vZGVzLnJla2RidG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7CiAgICBHTV94bWxodHRwUmVxdWVzdCh7CiAgICAgICAgbWV0aG9kOiAnUE9TVCcsCiAgICAgICAgdXJsOiAnL2NoYXRzLycgKyByb29tICsgJy9tZXNzYWdlcy9uZXcnLAogICAgICAgIGhlYWRlcnM6IHsnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCd9LAogICAgICAgIGRhdGE6ICd0ZXh0PScgKyBlbmNvZGVVUklDb21wb25lbnQoJ1sjUmVrZFRyYWluXSgnICsgJ2h0dHA6Ly9rZXZpbmcucHl0aG9uYW55d2hlcmUuY29tLycgKyAnKScpICsgJyZma2V5PScgKyBma2V5LAogICAgICAgIG9ubG9hZDogZnVuY3Rpb24ocmVzcCkgewogICAgICAgICAgICBpZihyZXNwLnN0YXR1cyAhPT0gMjAwKSBjb25zb2xlLmxvZyhyZXNwKTsKICAgICAgICB9CiAgICB9KTsKfSwgZmFsc2UpOw=="},{"name":"Hide chat room description and tags","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://chat.stackexchange.com/*","*://chat.stackoverflow.com/*","*://chat.meta.stackexchange.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1455504440327,"data":{}},"enabled":true,"position":12,"uuid":"513379ad-9b2c-4614-9efe-231a67d367a5","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIEhpZGUgY2hhdCByb29tIGRlc2NyaXB0aW9uIGFuZCB0YWdzCi8vIEBuYW1lc3BhY2UgICBtYWlkY2FmZQovLyBAbWF0Y2ggICAgICAgICo6Ly9jaGF0LnN0YWNrZXhjaGFuZ2UuY29tLyoKLy8gQG1hdGNoICAgICAgICAqOi8vY2hhdC5zdGFja292ZXJmbG93LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgKjovL2NoYXQubWV0YS5zdGFja2V4Y2hhbmdlLmNvbS8qCi8vIEB2ZXJzaW9uICAgICAxLjAuNAovLyBAZ3JhbnQgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCmZ1bmN0aW9uIGFkZEdsb2JhbFN0eWxlKGNzcykgewogIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICBzdHlsZS5pbm5lckhUTUwgPSBjc3M7CiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7Cn0KCmFkZEdsb2JhbFN0eWxlKCcjcm9vbWRlc2MsICNyb29tLXRhZ3Mge2Rpc3BsYXk6IG5vbmU7fScpOw=="},{"name":"character limits restriction","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/*","*://*.serverfault.com/*","*://*.stackapps.com/*","*://*.stackexchange.com/*","*://*.stackoverflow.com/*","*://*.superuser.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1455504658445,"data":{}},"enabled":true,"position":13,"uuid":"0945c427-cc2b-481c-9195-8dfb244f8b4c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICBjaGFyYWN0ZXIgbGltaXRzIHJlc3RyaWN0aW9uCi8vIEBuYW1lc3BhY2UgICAgICAgU3RhY2tFeGNoYW5nZQovLyBAZGVzY3JpcHRpb24gICAgIEJ5cGFzcyBjaGFyYWN0ZXIgbGltaXRzIHJlc3RyaWN0aW9uIGZvciBjb21tZW50cwovLyBAdmVyc2lvbiAgICAgICAgIDEuMAovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLmFza3VidW50dS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLnNlcnZlcmZhdWx0LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAgKjovLyouc3RhY2thcHBzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLnN0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICAqOi8vKi5zdXBlcnVzZXIuY29tLyoKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgc2NyaXB0ID0gZnVuY3Rpb24oJCkgewogICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJ3RleHRhcmVhW25hbWU9Y29tbWVudF0nICwgImZvY3VzIiwgZnVuY3Rpb24oKXsKICAgICAgICAgbSA9ICQodGhpcykudmFsKCkubGVuZ3RoCiAgICAgICAgIGZvcih2YXIgaT0wOyBpPCAoMTUgLSBtKTsgaSsrKXsKICAgICAgICAgJCh0aGlzKS52YWwoJCh0aGlzKS52YWwoKSArICJcdTIwMGIiKQogICAgICAgIH0KICAgIH0pCn07Cgp2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKZWwudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwplbC50ZXh0ID0gJygnICsgc2NyaXB0ICsgJykoalF1ZXJ5KTsnOwpkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGVsKTs="},{"name":"Magic™Editor","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"user_agent":"","override":{"use_includes":[],"orig_includes":["/^https?://\\w*.?(stackoverflow|stackexchange|serverfault|superuser|askubuntu|stackapps)\\.com/(questions|posts|review)/(?!tagged|new).*/"],"merge_includes":true,"use_matches":[],"orig_matches":[],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1455673069253,"data":{}},"enabled":true,"position":14,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/Magic%E2%84%A2Editor.user.js","uuid":"c8fdd2ca-2370-4737-bb6b-437ca517e31b","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIE1hZ2lj4oSiRWRpdG9yCi8vIEBhdXRob3IgICAgICAgICBDYW1lcm9uIEJlcm5oYXJkdCAoQXN0cm9DQikKLy8gQGRldmVsb3BlciAgICAgIEpvbmF0aGFuIFRvZGQgKGp0MGRkKQovLyBAZGV2ZWxvcGVyICAgICAgc2F0aHlhYmhhdAovLyBAY29udHJpYnV0b3IgICAgVW5paGVkcm9uCi8vIEBjb250cmlidXRvciAgICBUaW55IEdpYW50Ci8vIEBjb250cmlidXRvciAgICBNb2dzZGFkCi8vIEBncmFudCAgICAgICAgICBub25lCi8vIEBsaWNlbnNlICAgICAgICBNSVQKLy8gQG5hbWVzcGFjZSAgICAgIGh0dHA6Ly9naXRodWIuY29tL1NPLUNsb3NlLVZvdGUtUmV2aWV3ZXJzL1VzZXJTY3JpcHRzL01hZ2lj4oSiRWRpdG9yCi8vIEB2ZXJzaW9uICAgICAgICAxLjUuMi42MQovLyBAZGVzY3JpcHRpb24gICAgRml4IGNvbW1vbiBncmFtbWFyL3VzYWdlIGFubm95YW5jZXMgb24gU3RhY2sgRXhjaGFuZ2UgcG9zdHMgd2l0aCBhIGNsaWNrCi8vICAgICAgICAgICAgICAgICBGb3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vQXN0cm9DQi9TdGFjay1FeGNoYW5nZS1FZGl0b3ItVG9vbGtpdAovLyBAaW5jbHVkZSAgICAgICAgL15odHRwcz86Ly9cdyouPyhzdGFja292ZXJmbG93fHN0YWNrZXhjaGFuZ2V8c2VydmVyZmF1bHR8c3VwZXJ1c2VyfGFza3VidW50dXxzdGFja2FwcHMpXC5jb20vKHF1ZXN0aW9uc3xwb3N0c3xyZXZpZXcpLyg/IXRhZ2dlZHxuZXcpLiovCi8vID09L1VzZXJTY3JpcHQ9PQoKKGZ1bmN0aW9uKCkgewogICAgInVzZSBzdHJpY3QiOwogICAgZnVuY3Rpb24gZXh0ZW5kRWRpdG9yKHJvb3QpIHsKICAgICAgICB2YXIgQXBwID0ge307CgogICAgICAgIC8vIFBsYWNlIGVkaXQgaXRlbXMgaGVyZQogICAgICAgIEFwcC5pdGVtcyA9IHt9OwogICAgICAgIEFwcC5vcmlnaW5hbHMgPSB7fTsKCiAgICAgICAgLy8gUGxhY2Ugc2VsZWN0ZWQgalF1ZXJ5IGl0ZW1zIGhlcmUKICAgICAgICBBcHAuc2VsZWN0aW9ucyA9IHt9OwoKICAgICAgICAvLyBQbGFjZSAiZ2xvYmFsIiBhcHAgZGF0YSBoZXJlCiAgICAgICAgQXBwLmdsb2JhbHMgPSB7fTsKCiAgICAgICAgLy8gUGxhY2UgImNvbnN0IiBhcHAgZGF0YSBoZXJlCiAgICAgICAgQXBwLmNvbnN0cyA9IHt9OwoKICAgICAgICAvLyBQbGFjZSAiaGVscGVyIiBmdW5jdGlvbnMgaGVyZQogICAgICAgIEFwcC5mdW5jcyA9IHt9OwoKICAgICAgICAvLyBUcnVlIHRvIGRpc3BsYXkgY291bnRzIGFuZCAvIG9yIHJ1bGUgbmFtZXMgaW4gRWRpdCBTdW1tYXJ5CiAgICAgICAgQXBwLmdsb2JhbHMuc2hvd0NvdW50cyA9IGZhbHNlOwogICAgICAgIEFwcC5nbG9iYWxzLnNob3dSdWxlcyA9IGZhbHNlOwoKICAgICAgICBBcHAuZ2xvYmFscy5yb290ID0gcm9vdDsKCiAgICAgICAgQXBwLmdsb2JhbHMucmVhc29ucyA9IHt9OwoKICAgICAgICBBcHAuZ2xvYmFscy5yZXBsYWNlZFN0cmluZ3MgPSB7CiAgICAgICAgICAgICJhdXRvIjogICBbXSwKICAgICAgICAgICAgInF1b3RlIjogIFtdLAogICAgICAgICAgICAiaW5saW5lIjogW10sCiAgICAgICAgICAgICJibG9jayI6ICBbXSwKICAgICAgICAgICAgImxzZWMiOiAgIFtdLAogICAgICAgICAgICAibGlua3MiOiAgW10sCiAgICAgICAgICAgICJ0YWdzIjogICBbXQogICAgICAgIH07CiAgICAgICAgQXBwLmdsb2JhbHMucGxhY2VIb2xkZXJzID0gewogICAgICAgICAgICAiYXV0byI6ICAgIl94QXV0b3hJbnNlcnR4VGV4dHhQbGFjZXhIb2xkZXJfIiwKICAgICAgICAgICAgInF1b3RlIjogICJfeEJsb2NreFF1b3RleFBsYWNleEhvbGRlcnhfIiwKICAgICAgICAgICAgImlubGluZSI6ICJfeENvZGV4SW5saW5leFBsYWNleEhvbGRlcnhfIiwKICAgICAgICAgICAgImJsb2NrIjogICJfeENvZGV4QmxvY2t4UGxhY2V4SG9sZGVyeF8iLAogICAgICAgICAgICAibHNlYyI6ICAgIl94TGlua3hTZWN0aW9ueFBsYWNleEhvbGRlcnhfIiwKICAgICAgICAgICAgImxpbmtzIjogICJfeExpbmt4UGxhY2V4SG9sZGVyeF8iLAogICAgICAgICAgICAidGFncyI6ICAgIl94VGFneFBsYWNleEhvbGRlcnhfIgogICAgICAgIH07CiAgICAgICAgQXBwLmdsb2JhbHMucGxhY2VIb2xkZXJDaGVja3MgPSB7CiAgICAgICAgICAgICJhdXRvIjogICAvX3hBdXRveEluc2VydHhUZXh0eFBsYWNleEhvbGRlcl8vZ2ksCiAgICAgICAgICAgICJxdW90ZSI6ICAvX3hCbG9ja3hRdW90ZXhQbGFjZXhIb2xkZXJ4Xy9naSwKICAgICAgICAgICAgImlubGluZSI6IC9feENvZGV4SW5saW5leFBsYWNleEhvbGRlcnhfL2dpLAogICAgICAgICAgICAiYmxvY2siOiAgL194Q29kZXhCbG9ja3hQbGFjZXhIb2xkZXJ4Xy9naSwKICAgICAgICAgICAgImxzZWMiOiAgIC9feExpbmt4U2VjdGlvbnhQbGFjZXhIb2xkZXJ4Xy9naSwKICAgICAgICAgICAgImxpbmtzIjogIC9feExpbmt4UGxhY2V4SG9sZGVyeF8vZ2ksCiAgICAgICAgICAgICJ0YWdzIjogICAvX3hUYWd4UGxhY2V4SG9sZGVyeF8vZ2kKICAgICAgICB9OwogICAgICAgIEFwcC5nbG9iYWxzLmNoZWNrcyA9IHsKICAgICAgICAgICAgLy8gICAgICAgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvY0k2b0syLzEgYXV0b21hdGljYWxseSBpbnNlcnRlZCB0ZXh0CiAgICAgICAgICAgICJhdXRvIjogICAvW15dKlw8XCFcLVwtIEVuZCBvZiBhdXRvbWF0aWNhbGx5IGluc2VydGVkIHRleHQgXC1cLVw+L2csCiAgICAgICAgICAgIC8vICAgICAgICBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2ZVNWxFNi8xIGJsb2NrcXVvdGVzCiAgICAgICAgICAgICJxdW90ZSI6ICAvXlw+KD86KD8hXG5cbilbXl0pKy9nbSwKICAgICAgICAgICAgLy8gICAgICAgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvbEw2ZkgzLzEgc2luZ2xlLWxpbmUgaW5saW5lIGNvZGUKICAgICAgICAgICAgImlubGluZSI6IC9gW15gXG5dK2AvZywKICAgICAgICAgICAgLy8gICAgICAgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvZUM3bUY3LzIgY29kZSBibG9ja3MgYW5kIG11bHRpbGluZSBpbmxpbmUgY29kZS4KICAgICAgICAgICAgImJsb2NrIjogIC9gW15gXStgfF4oPzooPzpbIF17NH18WyBdezAsM31cdCkuKyg/OltcclxuXT8oPyFcblxTKSg/OlsgXStcbikqKSspKy9nbSwKICAgICAgICAgICAgLy8gICAgICAgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvdFo0ZVkzLzcgbGluay1zZWN0aW9ucyAKICAgICAgICAgICAgImxzZWMiOiAgIC8oPzogICg/OlxbXGRcXSk6IFx3KjorXC9cLy4qXG4qKSsvZywKICAgICAgICAgICAgLy8gICAgICAgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvdFo0ZVkzLzIwIGxpbmtzIGFuZCBwYXRobmFtZXMKICAgICAgICAgICAgImxpbmtzIjogIC9cW1teXF1cbl0rXF0oPzpcKFteXClcbl0rXCl8XFtbXlxdXG5dK1xdKXwoPzpcL1x3K1wvfC46XFx8XHcqOlwvXC98XC4rXC9bLi9cd1xkXSt8KD86XHcrXC5cdyspezIsfSlbLi9cd1xkOi8/I1xbXF1AISQmJygpKissOz1cLX4lXSovZywKICAgICAgICAgICAgLy8gICAgICAgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvYkYwaVEwLzIgICB0YWdzIGFuZCBodG1sIGNvbW1lbnRzIAogICAgICAgICAgICAidGFncyI6ICAgL1w8W1wvYS16XStcPnxcPFwhXC1cLVtePl0rXC1cLVw+fFxbdGFnOltcdy4tXStcXS9naQogICAgICAgIH07CiAgICAgICAgQXBwLmdsb2JhbHMuY2hlY2tzciA9IChmdW5jdGlvbihvMSl7CiAgICAgICAgICAgIHZhciBvMiA9IHt9OwogICAgICAgICAgICB2YXIgaz0gT2JqZWN0LmtleXMobzEpOwogICAgICAgICAgICBmb3IodmFyIGkgPSBrLmxlbmd0aC0xOyBpID49IDA7IC0taSkgbzJba1tpXV0gPSBvMVtrW2ldXTsKICAgICAgICAgICAgcmV0dXJuIG8yOwogICAgICAgIH0pKEFwcC5nbG9iYWxzLmNoZWNrcyk7CgogICAgICAgIC8vIEFzc2lnbiBtb2R1bGVzIGhlcmUKICAgICAgICBBcHAucGlwZU1vZHMgPSB7fTsKCiAgICAgICAgLy8gRGVmaW5lIG9yZGVyIGluIHdoaWNoIG1vZHMgYWZmZWN0ICBoZXJlCiAgICAgICAgQXBwLmdsb2JhbHMub3JkZXIgPSBbIm9taXQiLCAiY29kZWZpeCIsICJlZGl0IiwgImRpZmYiLCAicmVwbGFjZSIsICJvdXRwdXQiXTsKICAgICAgICAKICAgICAgICAvLyBEZWZpbmUgcmVhc29uIGNvbnN0YW50IHN0cmluZ3MKICAgICAgICBBcHAuY29uc3RzLnJlYXNvbnMgPSB7CiAgICAgICAgICAgIGxlZ2FsU086ICAgICAgICInU3RhY2sgT3ZlcmZsb3cnIGlzIHRoZSBsZWdhbCBuYW1lIiwKICAgICAgICAgICAgbGVnYWxTRTogICAgICAgIidTdGFjayBFeGNoYW5nZScgaXMgdGhlIGxlZ2FsIG5hbWUiLAogICAgICAgICAgICB0aWR5VGl0bGU6ICAgICAidGlkaWVkIHRpdGxlIiwKICAgICAgICAgICAgdHJhZGVtYXJrOiAgICAgInRyYWRlbWFyayBjYXBpdGFsaXphdGlvbiIsCiAgICAgICAgICAgIGFjcm9ueW06ICAgICAgICJhY3JvbnltIGNhcGl0YWxpemF0aW9uIiwKICAgICAgICAgICAgc3BlbGxpbmc6ICAgICAgInNwZWxsaW5nIiwKICAgICAgICAgICAgZ3JhbW1hcjogICAgICAgImdyYW1tYXIiLAogICAgICAgICAgICBub2lzZTogICAgICAgICAibm9pc2UgcmVkdWN0aW9uIiwKICAgICAgICAgICAgcHVuY3R1YXRpb246ICAgInB1bmN0dWF0aW9uIiwKICAgICAgICAgICAgbGF5b3V0OiAgICAgICAgImxheW91dCIsCiAgICAgICAgICAgIHNpbGVudDogICAgICAgICIiLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVucmVwb3J0ZWQgLyB1bmNvdW50ZWQKICAgICAgICAgICAgdGl0bGVTYXlzQWxsOiAgInJlcGxpY2F0ZWQgdGl0bGUgaW4gYm9keSIKICAgICAgICB9OwoKICAgICAgICAKICAgICAgICAvLyBHZXQgdGhlIG9yaWdpbmFsIHBvc3QgdGFncwogICAgICAgIEFwcC5nbG9iYWxzLnRhZ2xpc3QgPSBbXTsKICAgICAgICAkKCdhLnBvc3QtdGFnJykuZWFjaCggZnVuY3Rpb24oKXsKICAgICAgICAgICAgdmFyIG5ld3RhZyA9ICQodGhpcykudGV4dCgpOwogICAgICAgICAgICBpZiAoQXBwLmdsb2JhbHMudGFnbGlzdC5pbmRleE9mKG5ld3RhZykgPT09IC0xKSB7CiAgICAgICAgICAgICAgICBBcHAuZ2xvYmFscy50YWdsaXN0LnB1c2gobmV3dGFnKTsgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIH0KICAgICAgICB9KTsKCiAgICAgICAgLy8gRGVmaW5lIGVkaXQgcnVsZXMKICAgICAgICBBcHAuZWRpdHMgPSB7CiAgICAgICAgICAgIC8vIFRpZHkgdGhlIHRpdGxlCiAgICAgICAgICAgIG5vbmVlZHRveWVsbDogewogICAgICAgICAgICAgICAgZXhwcjogL14oKD89LipbQS1aXSlbXmEtel0qKSQvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbihpbnB1dCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dC50cmltKCkuc3Vic3RyKDAsIDEpLnRvVXBwZXJDYXNlKCkgKyBpbnB1dC50cmltKCkuc3Vic3RyKDEpLnRvTG93ZXJDYXNlKCk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudGlkeVRpdGxlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRhZ2xpc3Q6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3Ivd0g0b0EzLzE5CiAgICAgICAgICAgICAgICBleHByOiBuZXcgUmVnRXhwKCAgIig/Ol4oPzpbKF0/KD86X3hUYWdzeF8pKD86YW5kfFsgLC4mKy8tXSkqKStbOi4gXCktXSp8KD86WzouIFwoLV18aW58d2l0aHx1c2luZ3xieXxmb3IpKig/Oig/Ol94VGFnc3hfKSg/OmFuZHxbICwmKy8pLV0pKikrKFs/LiEgXSopJCkiCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9feFRhZ3N4Xy9nLEFwcC5nbG9iYWxzLnRhZ2xpc3QubWFwKGVzY2FwZVRhZykuam9pbigifCIpKSwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8ucmVwbGFjZSgvXFwoPz1bYnNTZER3V10pL2csIlxcIiksIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvcFkxaEkyLzEgLSBXQk4gdG8gZmlndXJlIHRoaXMgb3V0LgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnZ2knKSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEiLAogICAgICAgICAgICAgICAgZGVidWc6IGZhbHNlLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudGlkeVRpdGxlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNvOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJzdGFja1xzKm92ZXJmbG93XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlN0YWNrIE92ZXJmbG93IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmxlZ2FsU08KICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2U6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnN0YWNrXHMqZXhjaGFuZ2VcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiU3RhY2sgRXhjaGFuZ2UiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubGVnYWxTRQogICAgICAgICAgICB9LAogICAgICAgICAgICBleHBhbnNpb25TTzogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKVNPXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFTdGFjayBPdmVyZmxvdyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5sZWdhbFNPCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4cGFuc2lvblNFOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pU0VcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMVN0YWNrIEV4Y2hhbmdlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmxlZ2FsU0UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgLyoKICAgICAgICAgICAgKiogVHJhZGVtYXJrIG5hbWVzCiAgICAgICAgICAgICoqLwogICAgICAgICAgICBqc2ZpZGRsZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xianMgP2ZpZGRsZVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJKU0ZpZGRsZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbWV0ZW9yOiB7ICAvLyBtdXN0IGFwcGVhciBiZWZvcmUgImphdmFzY3JpcHQiCiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pbWV0ZW9yICooanMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChzdHIscHJlLHVwcGVyY2FzZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBmaXhlZCA9IHByZSArICJNZXRlb3IiICsgKHVwcGVyY2FzZSA/IHVwcGVyY2FzZS50b1VwcGVyQ2FzZSgpIDogJycpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmaXhlZDsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAga25vY2tvdXRfanM6IHsgIC8vIG11c3QgYXBwZWFyIGJlZm9yZSAiamF2YXNjcmlwdCIKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmtub2Nrb3V0Wy4gXT9qc1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJLbm9ja291dC5qcyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2NyaXB0OiB7ICAvLyBTcGVsbGluZyBydWxlIG91dC1vZi1vcmRlciwgbXVzdCBydW4gYmVmb3JlIGphdmFzY3JpcHQgJiBnb29nbGVfYXBwc19zY3JpcHQKICAgICAgICAgICAgICAgIGV4cHI6IC8ocyljW3JpXStwdD8oaW5nfHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWNyaXB0JDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgamF2YXNjcmlwdDogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKShqYXZhP3Njcj9pcHQ/fGpzfGphdmEgc2NyaXB0PylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFKYXZhU2NyaXB0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBqcXVlcnk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmpxdWU/cnI/eVxiL2dpLCAgLy8ganF1cnksIGpxdWVycnksIGpxdXJyeS4uLiB+NjAwIHNwZWxsaW5nIG1pc3Rha2VzCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogImpRdWVyeSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYW5ndWxhcjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiYW5ndWxhcig/OmpzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiQW5ndWxhckpTIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBwaHA6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXBocFtcZF0/XGIoPyFcLmluaSkvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKWNcYig/OiN8XCtcKyk/L2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBqYXZhOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pamF2YVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMUphdmEiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNxbGl0ZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xic3FsaXRlKFxzKlswLTldKilcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiU1FMaXRlJDEiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFuZHJvaWQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmFuZHJvaWRcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiQW5kcm9pZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb3JhY2xlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJvcmFjbGVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiT3JhY2xlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICB3aW5kb3dzOiB7CiAgICAgICAgICAgICAgICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2pGOXpLMS84CiAgICAgICAgICAgICAgICBleHByOiAvXGIoPzp3aW4oPz0oPzpccysoPzoya3xbMC05Ll0rfGNlfG1lfG50fHhwfHZpc3RhfHNlcnZlcikpKXx3aW5kb3dzKSg/OlxzKygya3xbMC05Ll0rfGNlfG1lfG50fHhwfHZpc3RhfHNlcnZlcikpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKG1hdGNoLCB2ZXIpIHsKICAgICAgICAgICAgICAgICAgICB2ZXIgPSAhdmVyID8gJycgOiAnICcrdmVyCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2NlL2ksICdDRScpCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL21lL2ksICdNRScpCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL250L2ksICdOVCcpCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3hwL2ksICdYUCcpCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzJrL2ksICcyMDAwJykKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvdmlzdGEvaSwgJ1Zpc3RhJykKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvc2VydmVyL2ksICdTZXJ2ZXInKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1dpbmRvd3MnICsgdmVyOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBsaW51eDogewogICAgICAgICAgICAgICAgZXhwcjogL1xibGludXhcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiTGludXgiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHdvcmRwcmVzczogewogICAgICAgICAgICAgICAgZXhwcjogL1xid29yZCA/cHJlc3NcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiV29yZFByZXNzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBteXNxbDogewogICAgICAgICAgICAgICAgZXhwcjogL1xibXlzcWxcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiTXlTUUwiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5vZGVqczogewogICAgICAgICAgICAgICAgZXhwcjogL1xibm9kZVwuP2pzXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIk5vZGUuanMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFwYWNoZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiYXBhY2hlKFtcZF0pP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJBcGFjaGUkMSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2l0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pZ2l0XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxR2l0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBnaXRodWI6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmdpdGh1YlxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJHaXRIdWIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZhY2Vib29rOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3JPMXRINC8yCiAgICAgICAgICAgICAgICBleHByOiAvXGJmKD86YVtjc11lPyk/YmU/bytrPyhzKT8vZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24oc3RyLHMpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIkZhY2Vib29rIiArIChzID8gIidzIiA6ICIiKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHl0aG9uOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJweXRob25cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiUHl0aG9uIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBpb3M6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmlvc1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJpT1MiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlvc251bTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiaW9zKFswLTldKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJpT1MgJDEiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHVidW50dTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9zVDh3VjUvMgogICAgICAgICAgICAgICAgZXhwcjogL1xiW3VvYV0rbj9iW3VvYV0qW3RuXVtvdWFdKlt0bnVdW291YV0qXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlVidW50dSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdmJuZXQ6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvYkI5cFAzLzgKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzp2YlwubmV0fFxidmJ8KD86W15cYlx3Ll18XilcLm5ldClcYig/OlxzKlswLTldKyk/XHMqKD86ZnJhbWV3b3JrfGNvcmUpPy9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbihzdHIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbXi5dKXZiL2ksICckMVZCJykKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvKFteLl0pYXNwL2ksICckMUFTUCcpCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL25ldC9pLCAnTkVUJykKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvZnJhbWV3b3JrL2ksICdGcmFtZXdvcmsnKQogICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9jb3JlL2ksICdDb3JlJyk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHZiYV9yZWxhdGVkOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18XikoPzp2YmF8dmJzfHZiY3xldmJ8dmJvfHZicHx2YmlkZSlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdmJzY3JpcHQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnZic2NyaXB0L2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJWQlNjcmlwdCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhjZWw6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmV4Y2VsXGIoPyFcLXxcLlx3KS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiRXhjZWwiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlZ2V4OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJyZWdnP1tlYV0/eChwKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiUmVnRXgkMSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcG9zdGdyZXNxbDogewogICAgICAgICAgICAgICAgZXhwcjogL1xicG9zdD9ncmVzKihxP2x8cyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlBvc3RncmVTUUwiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBheXBhbDogewogICAgICAgICAgICAgICAgZXhwcjogL1xicGF5cGFsXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlBheVBhbCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdG9tY2F0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJ0b21jYXQoWzAtOS5dKikvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlRvbWNhdCQxIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBuZXRiZWFuczogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKD86bmV0YmVhbj98bmV0LWJlYW58bmV0IGJlYW58bmV0YmVlbilzP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJOZXRCZWFucyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbmdpbng6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYm5naW54XGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZmlyZWZveDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiZmlyZT9mb3hcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiRmlyZWZveCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2FmYXJpOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJzYWZhcmlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiU2FmYXJpIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBjaHJvbWU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmNocm9tZVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJDaHJvbWUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdudTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiZ251XGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ2NjOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18XilnY2NcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBtYXZlbjogewogICAgICAgICAgICAgICAgZXhwcjogL1xibWF2ZW5cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiTWF2ZW4iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHlvdXR1YmU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnlvdXR1YmVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiWW91VHViZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYW1hem9uOiB7CiAgICAgICAgICAgICAgICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2RSMHBKNy8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYW1hem9uKD86ICk/KD86cmVkc2hpZnR8d2ViIHNlcnZpY2VzfGNsb3VkZnJvbnR8Y29uc29sZSk/KSgoPzogKT8oPzplYzJ8YXdzfHMzfHJkc3xzcXN8aWFtfGVsYnxlbXJ8dnBjKSk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24oc3RyLHRpdGxlY2FzZSx1cHBlcmNhc2UpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZml4ZWQgPSB0aXRsZWNhc2UudG9UaXRsZUNhc2UoKSArICh1cHBlcmNhc2UgPyB1cHBlcmNhc2UudG9VcHBlckNhc2UoKSA6ICcnKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZml4ZWQ7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHplbmQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnplbmQoKD86ICk/KD86ZnJhbWV3b3JrfHN0dWRpb3xndWFyZCkpP1xiL2dpLAogICAgICAgICAgICAgICAgLy9yZXBsYWNlbWVudDogU3RyaW5nLnRvVGl0bGVDYXNlLCAgLy8gRG9lc24ndCB3b3JrIGxpa2UgYnVpbHQtaW4gdG9VcHBlckNhc2UsIHJldHVybnMgJ3VuZGVmaW5lZCcuIExvYWQgb3JkZXI/CiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24oc3RyLHByb2QpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnRvVGl0bGVDYXNlKCk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdHdpdHRlcjogewogICAgICAgICAgICAgICAgZXhwcjogL1xidHdpdHRlclxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJUd2l0dGVyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBib290c3RyYXA6IHsgICAgIC8vICJib290c3RyYXAiIGlzIGFsc28gYSBnZW5lcmFsIGNvbXB1dGluZyB0ZXJtLCBzbyBleHBlY3Qgc29tZSBmYWxzZSBwb3NpdGl2ZXMKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmJvb3RzdD9yP2FwXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkJvb3RzdHJhcCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXBwbGU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmFwcGxlXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiQXBwbGUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlwaG9uZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiaXBoP29uZT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiaVBob25lIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBnb29nbGVfdmVyYmVkOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJnb29nbCg/OmVkfGluZ3xlcilcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbihzdHIpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyLnRvVGl0bGVDYXNlKCk7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdvb2dsZTogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2lTNWZPMS8xCiAgICAgICAgICAgICAgICBleHByOiAvXGJnb29nbGVcYlsgXHRdKig/Om1hcHM/fHNoZWV0cz98ZG9jcz98ZHJpdmV8c2l0ZXM/fGZvcm1zP3xkb2N1bWVudHM/fHNwcmVhZHNoZWV0cz98aW1hZ2VzP3xwcmVzZW50YXRpb25zPyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24oc3RyKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ci50b1RpdGxlQ2FzZSgpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBnb29nbGVfYXBwc19zY3JpcHQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmdvb2dsZVstIF0/KD86YXBwcz8pP1stIF0/c2NyaXB0KD86aW5nfHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJHb29nbGUgQXBwcyBTY3JpcHQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJsdWV0b290aDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiYmwoPzp1ZXxvbyl0b28/dGg/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkJsdWV0b290aCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGVub3ZvOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJsZW5vP3ZvXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkxlbm92byIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbWF0bGFiOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pbWF0aD9sYWJcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFNQVRMQUIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGludGVybmV0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJpbnRlcm5ldFxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkludGVybmV0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBvYXV0aDogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9zQTJjUTUvMQogICAgICAgICAgICAgICAgZXhwcjogL1xib2F1dGgoPzooPzogKSooXGQpKD8hXC5cZCl8KD86ICkqKFtcZC5dKykpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJPQXV0aCQxICQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICB3ZWJfc2VydmljZXM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYndlYiBzZXJ2aWNlc1xiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIldlYiBzZXJ2aWNlcyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb3BlbmN2OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJvcGVuY3ZcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiT3BlbkNWIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBydWJ5OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJydWJ5XGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiUnVieSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmFpbHM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnJhaWxzXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiUmFpbHMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdyYWlsczogewogICAgICAgICAgICAgICAgZXhwcjogL1xiZ3JhaWxzXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiR3JhaWxzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBzdWJ2ZXJzaW9uOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJzdWJ2ZXJzW2lvXSpuXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiU3VidmVyc2lvbiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgamF2YWZ4OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJqYXZhZnhcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiSmF2YUZYIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBkZWxwaGk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmRlbHBoaVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJEZWxwaGkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRvdG5ldG51a2U6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmRvdG5ldG51a2VcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiRG90TmV0TnVrZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2lsdmVybGlnaHQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnNpbHY/ZXJsKD86aWdodHxpdGUpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlNpbHZlcmxpZ2h0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBzY2lweTogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKXNjaXB5XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxU2NpUHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG51bXB5OiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pbnVtcHlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFOdW1QeSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb3BlbnNzbDogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKW9wZW5zc2xcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFPcGVuU1NMIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBkcnVwYWw6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilkcnVwYWxcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFEcnVwYWwiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNhYXM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilzYWFzXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxU2FhUyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ3d0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pZ3d0Wy0gXShtb3NhaWN8ZGVzaWduZXIpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKHN0cixwcmUsdGl0bGVjYXNlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZpeGVkID0gcHJlICsgIkdXVCIgKyAodGl0bGVjYXNlPyAnICcrdGl0bGVjYXNlLnRvVGl0bGVDYXNlKCkgOiAnJyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpeGVkOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBnbWFpbDogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKWdtYWlsKHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMUdtYWlsJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHhhbXBwOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4peGFtK3ArXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxWEFNUFAiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdhbGF4eTogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKWdhbGF4eVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMUdhbGF4eSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbW9uZ286IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18Xiltb25nbyg/OlxzPyhkYikpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKHN0cixwcmUsdXBwZXJjYXNlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZpeGVkID0gcHJlICsgIk1vbmdvIiArICh1cHBlcmNhc2UgPyB1cHBlcmNhc2UudG9VcHBlckNhc2UoKSA6ICcnKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZml4ZWQ7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHB5bW9uZ286IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilweW1vbmdvXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxUHlNb25nbyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2NhbGE6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilzY2FsYVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMVNjYWxhIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBtaWNyb3NvZnQ6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9kSjV0RTMvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKFttTV1pY3Jvc29mdD98W21NXWlyY29zb2Z0fE1bU3Ndb2Z0KVxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIk1pY3Jvc29mdCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW50ZWxsaXNlbnNlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJpbnRlbGw/aXNlbltzY11lP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJJbnRlbGxpU2Vuc2UiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNhc3M6IHsgIC8vIFN5bnRhY3RpY2FsbHkgQXdlc29tZSBTdHlsZSBTaGVldHMKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnNhc3NcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiU2FzcyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaGVyb2t1OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJoZXJva3VcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiSGVyb2t1IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBvc194OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJvcyA/eFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJPUyBYIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBlbF9jYXBpdGFuOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJlbCA/Y2FwaT90YW5cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiRWwgQ2FwaXRhbiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaGFkb29wOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJoYWRvb3BcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiSGFkb29wIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBkamFuZ286IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmRqYW5nb1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJEamFuZ28iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRjbDogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKXRjbFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMVRjbCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZmxpY2tyOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJmbGlja3IoPyFcLlx3KS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiRmxpY2tyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBwb2k6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXBvaVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICB2bXdhcmU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnZtd2FyZT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiVk13YXJlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICAvKgogICAgICAgICAgICAqKiBBY3JvbnltcyAtIHRvIGJlIGNhcGl0YWxpemVkIChleGNlcHQgc29tZXRpbWVzIHdoZW4gcGFydCBvZiBhIGZpbGUgbmFtZSkKICAgICAgICAgICAgKiovCiAgICAgICAgICAgIHhfaHRtbDogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pKDo/Z3xodHx4YT98eGh0fHNmfGNzaHQpbWxbXGQuXSpcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNzczogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pcz9jc3NcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGpzb246IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKWpzb25cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFqYXg6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmFqYXhcYi9nLCAgICAgLy8gTGVhdmUgIkFqYXgiIGFsb25lLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL0FzdHJvQ0IvU3RhY2stRXhjaGFuZ2UtRWRpdG9yLVRvb2xraXQvaXNzdWVzLzQ1CiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkFKQVgiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBzcWw6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXNxbFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgdXJsaTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHVyW2xpXSkocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24obWF0Y2gsdXBwZXIsbG93ZXIpIHsgcmV0dXJuIHVwcGVyLnRvVXBwZXJDYXNlKCkgKyAobG93ZXI/bG93ZXIudG9Mb3dlckNhc2UoKTonJyk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFzcDogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKWFzcFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgcGRmOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pcGRmKHMpPy9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFQREYkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFwaTogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKWFwaShzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFBUEkkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNzbDogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pc3NsXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5wbTogewogICAgICAgICAgICAgICAgZXhwcjogL1xibnBtKHMpP1xiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIk5QTSQxIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZnRwOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18Xilbc3RdP2Z0cHM/XGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlwYTogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4paXBhXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGF2bDogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pYXZsXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsaV9jZ2k6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKWNbbGddaVxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBkbGw6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKWRsbFxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBtcDNfbXA0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pbXAoM3w0KShzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFNUCQyJDMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBndWk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilndWkocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxR1VJJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBzdHA6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXN0cFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgdGNwOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18Xil0Y3BcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHdwZjogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pd3BmXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBodHRwOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18XilodHRwcz9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHdvZmY6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXdvZmZcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHR0ZjogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pdHRmXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBpcHZfbjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiaXAodls0Nl0pP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJJUCQxIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZnFfZG5fczogeyAgLy8gRlFETiwgRE4sIEROUwogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pKD86ZnEpP2Rucz9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGljbXA6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmljbXBcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJzdnA6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnJzdnBcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNubXA6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnNubXBcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNwdTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiY3B1KHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJDUFUkMSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJzczogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pcnNzP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgbXZjOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18XiltdmNcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG12bjogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pbXZuXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBhc2NpaTogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKWFzY2M/aWk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxQVNDSUkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBnc29hcDogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKWdzb2FwXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZ1NPQVAiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBzb2FwOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pc29hcFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgY3N2OiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pY3N2XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBpbWFnZV90eXBlczogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKShnaWZ8anBlP2d8Ym1wfHBuZylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHlhbWw6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18Xil5YW1sXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBzbXRwOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJzbXRwXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBwaHBteWFkbWluOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pcGhwbXlhZG1pblxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXBocE15QWRtaW4iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBwaHB1bml0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pcGhwdW5pdFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMVBIUFVuaXQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBta2w6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18Xilta2xcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHhzbDogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4peHNsdD8oPyE6KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAganBhOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18XilqcGFcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGp2bTogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4panZtXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBsaW5xOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18XilsaW5xXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBtZDU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKW1kNVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgeGZhX3hzZDogeyAgLy8gWE1MIEZvcm1zIEFyY2hpdGVjdHVyZQogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4peGZhfHhzZFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgd3NkbDogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pd3NkbFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgLyoKICAgICAgICAgICAgKiogU3BlbGxpbmcgLSBDb3JyZWN0IGNvbW1vbiBzcGVsbGluZyBlcnJvcnMuIChJbmNsdWRpbmcgYXBvc3Ryb3BoZXMsIHdoaWNoIGFyZSByZWFsbHkgZ3JhbW1hci4pCiAgICAgICAgICAgICoqIEFja25vd2xlZGdlbWVudDogQSBzdWJzZXQgb2YgdGVybXMgd2VyZSBhZGFwdGVkIGZyb20gUGV0ZXIgTW9ydGVuc2VuJ3MgbGlzdAogICAgICAgICAgICAqKiAoaHR0cDovL3B2bS1wcm9mZXNzaW9uYWxlbmdpbmVlcmluZy5ibG9nc3BvdC5kZS8yMDExLzA0L3dvcmQtbGlzdC1mb3ItZWRpdGluZy1zdGFjay1leGNoYW5nZS5odG1sKQogICAgICAgICAgICAqKi8KICAgICAgICAgICAgdm90aW5nOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZG93bnx1cClcV3ZvdC9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF2b3RlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1Y2NlZWQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKXVjW2NzXT9lZT9kKGVkfHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVjY2VlZCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNvdXJjZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpb3JjZShzfGQpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW91cmNlJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3RhbmRhcmRpemU6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3Ivdk43cE0wLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKXRhbmRhcmkoW3N6XSg/OmV8ZXN8ZWR8YXRpb24pKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXRhbmRhcmRpJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGlmZmVyZW50OiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3hPOGpVMi8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoZClpZmY/ZT9yZT9uKHR8Y2VzPylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFpZmZlcmVuJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcGVyc29uYWxseTogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL29MOWFNMS8yCiAgICAgICAgICAgICAgICBleHByOiAvXGIocCllcnNvKD86bmx8bmx8bmFsKShseSk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZXJzb25hbCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHByb2JsZW06IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci95QThqTTcvNgogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApKD86b3I/fHJvfHLDjsK/fHIwKWIoPzpsZXxlbHxlfHJlfGx8W3xdZSltZT8ocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcm9ibGVtJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd3JpdHRlbjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpcml0ZW5cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyaXR0ZW4iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbWF5YmU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihtKSg/OmFieXx5YWJlKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWF5YmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHNldWRvOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocClzdWVkb1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXNldWRvIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFwcGxpY2F0aW9uOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlwcD9sW2lhXWNhKD86dGl8aXQpb25cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFwcGxpY2F0aW9uIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNhbGVuZGFyOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYylhbFtlYV1uZFthZV1yXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxYWxlbmRhciIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjb21taXQ6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3Iva1k2c044LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKW9tbT9pdD8oc3x0ZWR8dGVycz98dGluZyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb21taXQkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhdXRvY29tcGxldGU6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9yWjlnVzUvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpdXRvP1sgLV0/Y28/bT9wP2w/ZXRlPyhzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1dG9jb21wbGV0ZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHlvdTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHkpbyt1P1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW91IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRvZXNuX3Q6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9zTDB1TzkvMwogICAgICAgICAgICAgICAgZXhwcjogL1xiKGQpKD86b3NlP1teXHddKm4/Lj90fG9lbnMuP3R8b2VzblteXHddKnR8b2VzdClcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvZXNuJ3QiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY291bGRuX3Rfd291bGRuX3Rfc2hvdWxkbl90OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoY3x3fHNoKW8/dWw/ZG5bICdgwrRdKnRcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvdWxkbid0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRpZG5fdDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGQpaWRbXlx3XSpuP3RcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFpZG4ndCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBkb25fdDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGQpKD86b25bXlx3XSpubz90fG9udD8pXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb24ndCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBoYXZlbl90OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoaCkoPzphdmVudHxhdlteXHddKnR8YXZlW15cd10/dClcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFhdmVuJ3QiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2Fzbl90OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIodylhc1teXHddKm4/dFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWFzbid0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8vYXBvc3Ryb3BoZV9kOiB7ICAgLy8gVG9vIG1hbnkgZmFsc2UgcG9zaXRpdmVzCiAgICAgICAgICAgIC8vICAgIGV4cHI6IC9cYihoZXxzaGV8d2hvfHlvdSlbXlx3XSooZClcYi9naSwKICAgICAgICAgICAgLy8gICAgcmVwbGFjZW1lbnQ6ICIkMSckMiIsCiAgICAgICAgICAgIC8vICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIC8vfSwKICAgICAgICAgICAgYXBvc3Ryb3BoZV9sbDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHRoZXl8d2hhdHx3aG98eW91KVteXHddKihsbClcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEnJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXBvc3Ryb3BoZV9yZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHRoZXl8d2hhdHx5b3UpW15cd10qKHJlKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMSckMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhcG9zdHJvcGhlX3M6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9iTjVwQTMvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGhlfHNoZXx0aGF0fHRoZXJlfHdoYXR8d2hlcmV8aGVyZSlbXlx3XSoocylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEnJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXRfczogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGl0KVteXHddKHMpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxJyQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFwb3N0cm9waGVfdDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGFyZW58Y2FufGNvdWxkbnxkaWRufGRvZXNufGRvbnxoYXNufGhhdmVufGlzbnxtaWdodG58bXVzdG58c2hhbnxzaG91bGRufHdvbnx3b3VsZG4pW15cd10qKHQpKD86W15cd110KSpcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEnJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXBvc3Ryb3BoZV9udDogewogICAgICAgICAgICAgICAgZXhwcjogL1snYMK0XW50XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIm4ndCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBkb2Vzbl90X3dvcms6IHsgIC8vID40SyBpbnN0YW5jZXMgb2YgdGhpcyAoT2N0IDIwMTUpCiAgICAgICAgICAgICAgICBleHByOiAvXGIoZClvZXNuW15cd110ICh3b3JrfGxpa2V8dGhpbmt8d2FudHxwdXR8c2F2ZXxsb2FkfGdldHxoZWxwfG1ha2Upc1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9lc24ndCAkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwcm9iYWJseTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci96VTNxWjAvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApcig/Om9sbD98b2JiP2x8bz9iYWJsP3xhYmFibCl5XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcm9iYWJseSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBrZXlib2FyZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGspZXk/Ym9hP3JkXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZXlib2FyZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB1cjogewogICAgICAgICAgICAgICAgZXhwcjogL1xidXJcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAieW91ciIsIC8vIE1heSBhbHNvIGJlICJ5b3UgYXJlIiwgYnV0IGxlc3MgY29tbW9uIG9uIFNPCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB1OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJ1XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogInlvdSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBncjg6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmdyOFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJncmVhdCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjdXo6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmN1elxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJiZWNhdXNlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9mYzogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKG8pZmNcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFmIGNvdXJzZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBudm06IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihuKXZtXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZXZlciBtaW5kIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJ0dzogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGIpdHcsP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXkgdGhlIHdheSwiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3J5OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocylvP3IreVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9ycnkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYW55MTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpbnkxXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbnlvbmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWxsd2F5czogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpbGx3YXlzXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbHdheXMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwZWN0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZSlzcGVjdChzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF4cGVjdCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVtcGxveWVlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZSltcGxveWVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFtcGxveWVlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJldHJpZXZlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocilldHJlaXYoZXxlZHxlc3xpbmd8YWx8YWJsZSlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFldHJpZXYkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBzdWNjZXNzOiB7IC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvaEsydkc0LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKXVjYz9lc3M/KGZ1bHxmdWxseSk/bD9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1Y2Nlc3MkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhbnlvbmVzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlueW9uZXNcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFueW9uZSdzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGxlbmd0aDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGwpZW4oPzpnaD90fHRoKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVuZ3RoIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGhlaWdodDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGgpKD86ZWl8aXxpZSkoPzpndHx0aHxnaHRofGd0aClcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlaWdodCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB3aWR0aDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpaXQ/ZGg/dFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWlkdGgiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2VudGVyZWQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKWVudCg/OnJlZHxlcmQpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZW50ZXJlZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjZW50ZXI6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKWVudHJlXGIvZ2ksICAgIC8vICJDZW50cmUiIGlzIGEgd29yZCwgaG93ZXZlciBpbiBtb3N0IGNhc2VzIG9uIFNPICJjZW50ZXIiIGlzIG1lYW50CiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZW50ZXIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWludF9pc250OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJhaW4nP3RcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiaXNuJ3QiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29vcmRpbmF0ZXM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKW9yZGluYXRlKHN8ZCk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb29yZGluYXRlJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXJndW1lbnQ6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvaVUydks5LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKXJnP1t1ZV0rbWVudChzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyZ3VtZW50JDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXRlcmF0ZTogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2lMNmJWMy8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoaSkoPzp0dGVyfHRhcilhdChlW2RzXT98aW5nfGlvbnxpb25zKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXRlcmF0JDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmVsb3c6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKWVsbG93XGIvZ2ksICAgICAgICAgIC8vICJCZWxsb3ciIGlzIGEgd29yZCwgYnV0IGV4dHJlbWVseSB1bmNvbW1vbiBvbiBTdGFja092ZXJmbG93LmNvbS4KICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlbG93IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVuY3J5cHQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihlbnxkZSljcmlwdChzfGluZyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxY3J5cHQkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBmb3JtYXR0aW5nOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZilvcm1hdGluZ1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9ybWF0dGluZyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwcm9jZXNzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocClyb2Nlcyhlc3xlZCk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcm9jZXNzJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHJvZ3JhbTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApcm9ncj9hbW0/ZT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyb2dyYW0iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHJvZ3JhbW1pbmc6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihwKXJvZ3JhbShpbmd8ZWR8ZXIpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcm9ncmFtbSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHByb2dyYW1tYXRpY2FsbHk6IHsgIC8vIDQwSysgICBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3ZGMmpROC8yCiAgICAgICAgICAgICAgICBleHByOiAvXGIocClyb2dyYW0rYXQraWNhP2wreVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXJvZ3JhbW1hdGljYWxseSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBiZWFyX3dpdGhfbWU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKWFyZSAod2l0aCBtW2V5XXxpdHxpbiBtaW5kKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVhciAkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB3ZWlyZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpaWVyZChuZXNzfGx5KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVpcmQkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBiZWxpZXZlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYillbGVpdmUocnxzfGQpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVsaWV2ZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBpZWNlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocCllaWNlKHN8ZCk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaWVjZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNhbXBsZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpbWFwbGUoc3xkKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFhbXBsZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlYWxseTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9zTzR6RDkvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHIpKD86ZWxseXxlYWx5KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVhbGx5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZpbmFsbHlfOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZilpbmFsbD95XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaW5hbGx5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJlaGF2aW91cjogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3JVMWVCNy8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYillaGE/aT92aT9vKHJ8dXJ8cnN8dXJzKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVoYXZpbyQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHVuZm9ydHVuYXRlbHk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih1KW5mb3J0dT9uYT90bHlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFuZm9ydHVuYXRlbHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2hldGhlcjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpaD9ldGg/ZXJcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFoZXRoZXIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdGhyb3VnaDogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9nUTBkWjEvNAogICAgICAgICAgICAgICAgZXhwcjogL1xiKHQpKD86aHJ1fHJvdWdofGhyb3VnKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhyb3VnaCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB0aHJvdWdob3V0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIodCkoPzpocnVvdXR8cm91Z2hvdXQpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaHJvdWdob3V0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJyZWFrdGhyb3VnaDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGIpcmVha1xzK3Rocm91Z2gocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcmVha3Rocm91Z2gkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB0aG91Z2g6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih0KSg/OmhvfGhvdXxob2doKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhvdWdoIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFsdGhvdWdoOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlsKD86dGhvfHRob3V8dGhvZ2h8dG91Z2gpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbHRob3VnaCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB0aG91Z2h0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIodClyP291Z2h0KHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhvdWdoJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdGhyb3dpbmc6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih0KWhyb3VnaGluZ1xiL2dpLCAgICAgICAvLyBQZXRlciBzYXlzIHRoaXMgaXMgInRob3JvdWdobHkiLCBidXQgYSBzdXJ2ZXkgb2YgU08gcXVlc3Rpb25zIGluZGljYXRlcyAidGhyb3dpbmciCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaHJvd2luZyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhX2xvdDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpbG90XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxIGxvdCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBvbmVfcl90d29fcjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHJlZmV8cHJlZmV8b2NjdSlyKGVkfGluZylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyciQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9jY3VyOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIobyljY3VyZShzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFjY3VyJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHJlZmVyYWJseTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApcmVmZXJyYWJseVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXJlZmVyYWJseSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjb21tYW5kX2xpbmU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKSg/Om9tbT9hbmRsaW5lfG1kbGluZT8pXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb21tYW5kLWxpbmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmVuZWZpdHM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKWVuaWZpdHNcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlbmVmaXRzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGF1dGhvcml6YXRpb246IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKXV0aFxiL2dpLCAgICAgICAgICAgLy8gVGhpcyBtYXkgYmUgdG9vIGFtYmlndW91cywgY291bGQgYWxzbyBtZWFuICJhdXRoZW50aWNhdGlvbiIKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1dGhvcml6YXRpb24iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcGVyc2lzdGVudDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApZXJzaXN0YW4odHxjZSlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlcnNpc3RlbiQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFjY2VzczogeyAgLy8gbXVzdCBjb21lIGJlZm9yZSBfaWJpbGl0eSB0byBjYXRjaCBhY2Nlc3NpYmlsaXR5IHdpdGggc3BlbGxpbmcgdmFyaWF0aW9ucyAqKiBidXQgZG9lcyBub3QgZml4IGFjZXNzYWJpbGl0eT8KICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKWMrZStzKyguKilcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFjY2VzcyQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9pYmxlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoY29tcGF0fGluY29tcGF0fGFjY2VzcylhYmxlXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaWJsZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBfaWJpbGl0eTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGNvbXBhdHxpbmNvbXBhdHxhY2Nlc3MpYWJpbGk/dCh5fGllcylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFpYmlsaXQkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXBhcmF0ZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpZXBlP3JhdGU/KGR8bHl8cyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZXBhcmF0ZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNlcGFyYXRpb246IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKWVwZXJhdGlvbihzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlcGFyYXRpb24kMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZWZpbml0ZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGQpZWZpbig/OmF0ZT98aXRlP3xhbHx0ZT98ZXQpKGx5KT9cYi9naSwgIC8vIENhdGNoZXMgY29ycmVjdCBzcGVsbGluZywgdG9vLgogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVmaW5pdGUkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBkZWZpbml0aXZlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZCllZmluYT90aXZlKGx5KT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlZmluaXRpdmUkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBpbmRlcGVuZGVudDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGkpbmRlcGVuZGFudChseSk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbmRlcGVuZGVudCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlY29tbWVuZDogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3BQOWxCNy8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIocillY29tbT9bYW9dbmQoYXRpb24pP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVjb21tZW5kJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29tcGF0aWJpbGl0eTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGMpb21wYXRhYmlsaXR5XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb21wYXRpYmlsaXR5JDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnBzXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiUFMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb2s6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYm9rXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiT0siLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmFja19lbmQ6IHsgIC8vIEludGVyZXN0aW5nIGZhY3Q6IGJhY2tlbmQgM3ggbW9yZSBjb21tb24gdGhhbiBiYWNrLWVuZAogICAgICAgICAgICAgICAgZXhwcjogL1xiKGIpYWNrZW5kXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFhY2stZW5kIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZyb250X2VuZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGYpcm9udGVuZFxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcm9udC1lbmQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGF0YV90eXBlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZClhdGF0eXBlXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFhdGEgdHlwZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhbGxvdHRlZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpbCtvdCtlZFxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbGxvdHRlZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBldmVyeV90aW1lOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZSl2ZT9yeXRpbWVcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXZlcnkgdGltZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBzdHJhaWdodDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpdHJhaWc/aD90XGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF0cmFpZ2h0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN0cmFpZ2h0Zm9yd2FyZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpdHJhaWc/aD90WyAtXT9mb3I/d2FyZFxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdHJhaWdodGZvcndhcmQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHJlY2VkaW5nOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocClyZWNlZWRpbmdcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyZWNlZGluZyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBub19vbmU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihuKW8tP29uZVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW8gb25lIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlX2ZhY3RvOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZCllLT9mYWN0b1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWUgZmFjdG8iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWNjb21tb2RhdGU6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9jTDNtRDkvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpKD86YytvbXxjb20rKW9kYXRlXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxY2NvbW1vZGF0ZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBraW5kX29mOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoaylpbmRhXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaW5kIG9mIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHdhbnRfdG86IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih3KWFubj9hXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxYW50IHRvIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNvcnRfb2Y6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKW9ydGFcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvcnQgb2YiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ290X3RvOiB7IC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3Ivcks2eFI1LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihoYXZlXHMrKT8oZylvdHRhXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxJDJvdCB0byIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBkb250X2tub3c6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9ySzZ4UjUvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGQpW3VvXW5uP29cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvbid0IGtub3ciLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ29pbmdfdG86IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihnKVtvdV1ubj9hXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb2luZyB0byIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjcmFzaGVzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYylyYXNoc1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXJhc2hlcyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwYXR0ZXJuOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocClhdD8oPzp0cm58dHJlbnx0ZXJuKShzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFhdHRlcm4kMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBmdW5jdGlvbl86IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci94RjNqVTMvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGYpdVtuY3RpXStvbm4/KHN8aW5nfGVkfGFsKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1bmN0aW9uJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3ludGF4OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocylbeWldbnRbYWVdP3hcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF5bnRheCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjb3JyZWN0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYylvcnI/ZWNbdHldL2dpLCAgLy8gTm8gXGIgYXQgZW5kLCB0byBpbmNsdWRlIGNvcnJlY3Rpb24sIGNvcnJlY3RpbmcsIGNvcnJlY3RlZAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9ycmVjdCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjb3JyZWN0bHk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKW9ycj9lYyg/Omx0P3x0P2wpeVxiL2lnLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9ycmVjdGx5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGludGVnZXI6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihpKW50ZT9yP2dlcihzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFudGVnZXIkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXZlcmFsOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocyllcj92W2VhXT9yW2FlXT9sXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZXZlcmFsIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNvbHV0aW9uOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocylvdT9sdT90aT9vblxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9sdXRpb24iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc29tZWJvZHk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKW9tYm9keVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9tZWJvZHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXZlcnl0aGluZzogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGUpdmU/clt5aV0/dGhpbmdcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF2ZXJ5dGhpbmciLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYnV0dG9uOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYilbdW9dK3R0P1tvdV1uXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdXR0b24iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmVmb3JlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYillP2ZvP3JlP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVmb3JlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4YW1wbGU6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci91VTRiSDUvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGUpKD86eHNhbXBsZXx4YW1sZXx4P2FtcFtsZV17MS0yfXx4ZW1wbGUpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxeGFtcGxlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNvbWV3aGVyZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpb21lID93aD9bZWFdcmU/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb21ld2hlcmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2l0aDogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3hPNWRQMy8yCiAgICAgICAgICAgICAgICBleHByOiAvXGIodykoPzpoaXRofGlodCkoPz0ob3U/dHxpbik/XGIpL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWl0aCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB3aXRob3V0OiB7ICAvLyBBZnRlciAnd2l0aCcgcnVsZSwgb25seSBuZWVkIHRvIGNoZWNrICdvdXQnCiAgICAgICAgICAgICAgICBleHByOiAvXGIodylpdGhvdT90XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaXRob3V0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlcHJvZHVjaWJsZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHIpZXByb2R1Y3Q/W2lhXWJsZVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVwcm9kdWNpYmxlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHVubmVjZXNzYXJ5OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIodSlubj9lY2M/ZXNzP2FyeVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW5uZWNlc3NhcnkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVxdWlyZTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9uUzZrTTUvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHIpZXF1aWU/cmU/KGR8c3xtZT9udHM/KT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlcXVpcmUkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhZGRyZXNzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlkZD9yZXNzPyhlc3xlZHxpbmcpP2U/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZGRyZXNzJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcGFzc3dvcmQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihwKWFzcz93bz9yZD8ocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxYXNzd29yZCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1ldGhvZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKG0pZVt0aF0rW29ldV0rZChzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFldGhvZCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHByb3BlcnR5OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocClyb3BlP3J0W2lleV0/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcm9wZXJ0eSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwcm9wZXJ0aWVzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocClyb3BlP3J0W2lleV0rc1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXJvcGVydGllcyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB3aXJlbGVzczogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpaXJlP2xlP3NzP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWlyZWxlc3MiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcG9zc2libGU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihwKW9zcz9bYWldP2JsZVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9zc2libGUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZmllbGRzX3lpZWxkczogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9jSjhyTTQvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGZ8eSkoPzplaT98aWU/KWw/ZChzfGluZ3xlZCk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaWVsZCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV4ZWN1dGU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihlKXhbZWldP2N1dGUoc3xkKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXhlY3V0ZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFsZ29yaXRobTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpbGdvP3JbaXldP3RoP1tpeWFdP20ocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbGdvcml0aG0kMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB2ZXJzaW9uOiB7IC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3Ivd0U4dUQwLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih2KWVyKD86c1tpb10qfGlvKW4oc3xpbmd8ZWQpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVyc2lvbiQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHdoaWNoOiB7ICAvLyAyMiw3NzIgb2YgdGhlc2UgYXMgb2YgMTItTm92LTIwMTUhCiAgICAgICAgICAgICAgICBleHByOiAvXGIodykoPzppY2h8aGljKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhpY2giLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGlzYXBwZWFyOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZClpcz9hcGVhP3IoaW5nfGVkfHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWlzYXBwZWFyJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmVjYXVzZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGIpZWNbYW9ddT9zZT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlY2F1c2UiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2hvdWxkOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocykoPzpob2xkfGhvdWR8aHVsZHxodWR8b3VsZClcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFob3VsZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB0b3RhbGx5OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIodClvdGE/bGw/eVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW90YWxseSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBsYW1iZGE6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihsKWFtW2JkXSthXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxYW1iZGEiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29tbWFuZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGMpb20oPzptP2FkfGFuZHxtbmQpKGVkfHN8aW5nfGVycz98byk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb21tYW5kJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdGhlcmVmb3JlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIodCloZXJlP2ZvcmU/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaGVyZWZvcmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcGFyYW1ldGVyOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocClhcmE/bVtlYV1uP3RlcihzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFhcmFtZXRlciQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGp1c3Q6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihqKSg/OnVzdGV8dXMpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdXN0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ1bGZpbGw6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihmKXVsbD9ccz9maWxsXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdWxmaWxsIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvbWluZzogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGMpb21taW5nXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb21pbmciLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdHJpZWQ6IHsgIC8vIDgsNTQwIG9mIHRoZXNlIQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHQpcnllKGR8cylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyaWUkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBiYXNpY2FsbHk6IHsgIC8vIDcsOTI0IG9mIHRoZXNlIQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGIpYXNpY2E/bCt5XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxYXNpY2FsbHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29tcGxldGVseTogeyAgLy8gNCw3OTMgZXhhbXBsZXMhICAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9vRzduSDYvMgogICAgICAgICAgICAgICAgZXhwcjogL1xiKGMpb21wbD9ldGU/bD9lP3lcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvbXBsZXRlbHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbWlzcmVhZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKG0paXMrWyAtXT9yZWE/ZFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWlzcmVhZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBkYXRhYmFzZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGQpYXRhYmFlcz9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFhdGFiYXNlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG91dHB1dDogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9iUDlrWTIvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKG8pdXQgP3B1dCsoPzplZCk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdXRwdXQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdXNlZnVsOiB7ICAvLyAxMSw1NDIgICJ1c2VmdWxsIgogICAgICAgICAgICAgICAgZXhwcjogL1xiKHUpc2UoPzpmdWxsfCBmdWwpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxc2VmdWwiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2xhc3NlczogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGMpbGEoc2V8c3Mpc1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWxhc3NlcyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBlbmdsaXNoOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJlbmdsaXNjP2g/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkVuZ2xpc2giLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW5oZXJpdGFuY2U6IHsgIC8vIDE3MDAgeCBpbmhlcml0ZW5jZQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGkpbmhlcml0W2FlXW5bY3NdZT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFuaGVyaXRhbmNlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFkdmljZTogeyAgLy8gOTAwMCB4IGFkdmljZXMKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKWR2aWNlc1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWR2aWNlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHdoZW46IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih3KWhbZWFdbmU/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaGVuIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFuZF90aGVuOiB7ICAgLy8gMTZLIGluc3RhbmNlcyBvZiB0aGlzIQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpbmQsPyB0aGE/blxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW5kIHRoZW4iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdW5faW5pdGlhbGl6ZTogeyAvLyA+NEsgaW5zdGFuY2VzIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvbFkyaFkxLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYigoPzp1bi0/fHJlLT8pP2kpbj9pP3RbaWFdK2xpP1t6c10oZXxlZHxbZW9dcnxlc3xpbmcpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24obWF0Y2gsIHByZWZpeCwgc3VmZml4KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChwcmVmaXgrJ25pdGlhbGl6JytzdWZmaXgpLnJlcGxhY2UoIi0iLCIiKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjaGFyYWN0ZXI6IHsgLy8gMzUwMCsgaW5zdGFuY2VzLCBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2xHMXFIMC8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYykoPzpoYXJ8aD9hcmFjP2g/dGVyKShzfGlzdGljcz98aVt6c11lKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFoYXJhY3RlciQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZvdW5kOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZilpbmRlZFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW91bmQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdHVwbGU6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvelA3ek0yLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih0KW8/dXArZT9sZT8ocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdXBsZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlfcmVhZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKEl8SSd2ZXx3ZXx0aGV5KSByZWRcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEgcmVhZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjdXN0b21pemU6IHsgIC8vIGh0dHA6Ly9ncmFtbWFyaXN0LmNvbS9zcGVsbGluZy9jdXN0b21pc2UtY3VzdG9taXplLwogICAgICAgICAgICAgICAgZXhwcjogL1xiKGMpdVtzdF0rW291aV1taVt6c10oZSk/L2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVzdG9taXokMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjdXN0b21pemFibGU6IHsgIC8vIENvbW1vbiBlcnJvcnMgYXJlIHRvIHJldGFpbiAnZScsIGFuZC9vciB0byB1c2UgaWJsZSwgbm90IGFibGUKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKXVzdG9taXpbZWFdKyh0aW9ucz98YmxlfGJpbGl0eXxiaWxpdGllcykvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdXN0b21pemEkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhY3Jvc3M6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSljK3JvcytcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFjcm9zcyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBpbW1lZGlhdGU6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzCiAgICAgICAgICAgICAgICBleHByOiAvXGIoaSltK2VkW2lhXSt0ZT9sPyhseSk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbW1lZGlhdGUkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBldmVyeV90aW1lOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2RCNmpDMi8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoZSl2W2VyeV0rdGltZT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF2ZXJ5IHRpbWUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWNoaWV2ZTogeyAgLy8gaHR0cDovL3d3dy5veGZvcmRkaWN0aW9uYXJpZXMuY29tL3dvcmRzL2NvbW1vbi1taXNzcGVsbGluZ3MgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9iWjJxSjEvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpY2hbZWldK3ZlPyhzfGR8bWVudCk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxY2hpZXZlJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXBwYXJlbnQ6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvZE8zYUg0LzIKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKXArYXJbYWVdbnQ/KGx5KT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFwcGFyZW50JDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXBwZWFyOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL29MOGxJMS8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlwK1tlYV0rcmU/KHN8ZWR8aW5nKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFwcGVhciQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFwcGVhcmFuY2U6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvZVAyYkY5LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKXArW2VhXStyW2VhXStuY2Uocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcHBlYXJhbmNlJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmVnaW5uaW5nOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3NUNGdRMC8yCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYillZ2k/bitpbj9nL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVnaW5uaW5nIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJlbGlldmU6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvcE0xY0M2LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKWU/bFtlaV0rdihlfGluZ3xhYmxlKS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlbGlldiQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvbGxlYWd1ZTogeyAgLy8gaHR0cDovL3d3dy5veGZvcmRkaWN0aW9uYXJpZXMuY29tL3dvcmRzL2NvbW1vbi1taXNzcGVsbGluZ3MgaHR0cHM6Ly9yZWdleDEwMS5jb20vci94TjhxRDkvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGMpb2wrW2VhXStndWUocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb2xsZWFndWUkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBpbXBsZW1lbnQ6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvelcxYVM1LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihpKW1wbD9bZWldP21lbnQvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbXBsZW1lbnQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2ltdWx0YW5lb3VzOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2lCMG1FNy8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIocylpbXVbbHRdK2FuW2llb3VdK3NlPy9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFpbXVsdGFuZW91cyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBlbnZpcm9ubWVudDogeyAgLy8gaHR0cDovL3d3dy5veGZvcmRkaWN0aW9uYXJpZXMuY29tL3dvcmRzL2NvbW1vbi1taXNzcGVsbGluZ3MgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9xRDV6VTYvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGUpbnZpP3JvP1tubV0rZW50L2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW52aXJvbm1lbnQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhpc3RlbmNlOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL21IN2hBNi8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoZSl4aXN0W2FlXW5bY3NdZS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF4aXN0ZW5jZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBmdXJ0aGVyOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3NFNm5ZMy8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoZikoPzp1fFthdV1yKXRoP2VyL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVydGhlciIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBqaXN0OiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncwogICAgICAgICAgICAgICAgZXhwcjogL1xiamlzdCBvZlxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJnaXN0IG9mIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5vdGljZWFibGU6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzCiAgICAgICAgICAgICAgICBleHByOiAvXGIobilvdGljYWJsKGV8eSlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvdGljZWFibCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHB1YmxpY2x5OiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncwogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApdWJsaWNhP2wqeVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVibGljbHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVjZWl2ZTogeyAgLy8gaHR0cDovL3d3dy5veGZvcmRkaWN0aW9uYXJpZXMuY29tL3dvcmRzL2NvbW1vbi1taXNzcGVsbGluZ3MKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihyKWVjaWV2KGVbcmRzXT98aW5nKS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlY2VpdiQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlZmVycmVkOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncyAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9rRTBvWjUvNQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHIpZWZlcig/IXN8ZW5jXHcqfHJcdyopKD89XHcpL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVmZXJyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlbWVtYmVyOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncwogICAgICAgICAgICAgICAgZXhwcjogL1xiKHIpZSg/Om1iZXJ8bWViZXJ8bWVtZXIpL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVtZW1iZXIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2Vuc2U6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzCiAgICAgICAgICAgICAgICBleHByOiAvXGIocyllbmNlL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVuc2UiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VwZXJzZWRlOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncyAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9tQTVuQzEvMQogICAgICAgICAgICAgICAgZXhwcjogLyhzKXVwZXJjZWQoZVtzZF0/fGluZylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1cGVyc2VkJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VycHJpc2U6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzICBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3VTOG9TNC8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIocyl1cj9wcmlbc2N6XShlW2RzXT98aW5nKD86bHkpPylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1cnByaXMkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjb25uZWN0aW9uOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3JPMndIMC8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYylvbitlW2N0eF0raT9vbihzKT8vZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb25uZWN0aW9uJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWRkaXRpb25hbDogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9pTTR4VjUvMgogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpZCtpLj90aW8/blthbF0rPyhseSk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZGRpdGlvbmFsJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXV0b21hdGljOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2ZVMmhGMS8yCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSkoPzp1dG9bbWFdK1t0aWNdK3x0b21hdGljKSg/IWV8W2lvXStuKS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1dG9tYXRpYyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhdXRvbWF0aWNhbGx5OiB7ICAvLyA2SysKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKXV0b21hdGljW2FseV0rXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdXRvbWF0aWNhbGx5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJ1bm5pbmc6IHsgIC8vIDJLKwogICAgICAgICAgICAgICAgZXhwcjogL1xiKHIpdW4raW4/Z1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVubmluZyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBldmVuX3Rob3VnaDogeyAgLy8gMi43SysKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihlKXZlbnRoP291P1tnaF0rXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdmVuIHRob3VnaCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB0b21vcnJvdzogeyAgLy8gaHR0cDovL3d3dy5veGZvcmRkaWN0aW9uYXJpZXMuY29tL3dvcmRzL2NvbW1vbi1taXNzcGVsbGluZ3MKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih0KW9tK29yK293XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb21vcnJvdyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB0cnVseTogeyAgLy8gaHR0cDovL3d3dy5veGZvcmRkaWN0aW9uYXJpZXMuY29tL3dvcmRzL2NvbW1vbi1taXNzcGVsbGluZ3MgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IveVY0clo5LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih0KXJ1ZT9sK2U/eVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXJ1bHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdW50aWw6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzICBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3RLOHJWNS8yCiAgICAgICAgICAgICAgICBleHByOiAvXGIoPzoodSludGk/bCt8KHQpaWwrKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCxmMSxmMikgewogICAgICAgICAgICAgICAgICAgIHZhciBmY2hhciA9IGYxfHxmMjsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gKChmY2hhci50b1VwcGVyQ2FzZSgpID09IGZjaGFyKSA/ICJVIiA6ICJ1IikgKyAibnRpbCI7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2hlcmU6IHsgIC8vIE11c3QgcHJlY2VkZSAid2hlcmV2ZXIiCiAgICAgICAgICAgICAgICBleHByOiAvXGIodyloZXJcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFoZXJlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHdoZXJldmVyOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncyAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9pSjRiRzEvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpaGVyZSA/ZXZlclxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhlcmV2ZXIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVzZXQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihyKWVzZXQrZWRcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlc2V0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8qCiAgICAgICAgICAgICoqIEdyYW1tYXIgLSBDb3JyZWN0IGNvbW1vbiBncmFtbWF0aWNhbCBlcnJvcnMuCiAgICAgICAgICAgICoqLwogICAgICAgICAgICBzdGFydF93aXRoX3NvOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2dQMXhBMi8yCiAgICAgICAgICAgICAgICBleHByOiAvXig/Om9rYXlcYnxva1xifHNvXGJ8WyBcdCwtXSkrL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuZ3JhbW1hcgogICAgICAgICAgICB9LAogICAgICAgICAgICBhX3ZzX2FuOiB7ICAvLyBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMzQ0NDAzMDcvMTY3NzkxMgogICAgICAgICAgICAgICAgZXhwcjogL1xiKGF8YW4pIChbXChcIifigJzigJhgPC1dKlx3KilcYi9naW0sICAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9uRTF5QTQvNQogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKCBtYXRjaCwgYXJ0aWNsZSwgZm9sbG93aW5nICkgewogICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IGZvbGxvd2luZy5yZXBsYWNlKC9eW1xzXChcIifigJzigJhgPC1dK3xccyskL2csICIiKTsvL3N0cmlwIGluaXRpYWwgcHVuY3R1YXRpb24gc3ltYm9scwogICAgICAgICAgICAgICAgICAgIHZhciByZXMgPSBBdnNBbk92ZXJyaWRlXyhpbnB1dCkgfHwgQXZzQW5TaW1wbGUucXVlcnkoaW5wdXQpOwogICAgICAgICAgICAgICAgICAgIHZhciBuZXdBcnRpY2xlID0gYXJ0aWNsZVswXSArIHJlcy5zdWJzdHIoMSk7ICAvLyBQcmVzZXJ2ZSBleGlzdGluZyBjYXBpdGFsaXphdGlvbgogICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXdBcnRpY2xlKycgJytmb2xsb3dpbmc7CiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgLy8gSGFjayBhbGVydDogRHVlIHRvIHRoZSB0ZWNobmljYWwgbmF0dXJlIG9mIFNPIHN1YmplY3RzLCBtYW55IGNvbW1vbiB0ZXJtcwogICAgICAgICAgICAgICAgICAgIC8vIGFyZSBub3Qgd2VsbC1yZXByZXNlbnRlZCBpbiB0aGUgZGF0YSB1c2VkIGJ5IEF2c0FuU2ltcGxlLCBzbyB3ZSBuZWVkIHRvCiAgICAgICAgICAgICAgICAgICAgLy8gcHJvdmlkZSBhIHdheSB0byBvdmVycmlkZSBpdC4KICAgICAgICAgICAgICAgICAgICAvLyBOT1RFOiBBdnNBblNpbXBsZSBpcyBzdXNjZXB0aWJsZSB0byB1bmljb2RlIG1lc3MtdXA7IGlmIHlvdSBzdWRkZW5seSBzZWUgbWFueQogICAgICAgICAgICAgICAgICAgIC8vIHdvcmRzIHN0YXJ0aW5nIHdpdGggdm93ZWxzIGJlaW5nIGluY29ycmVjdGx5IHRyZWF0ZWQsIGNoZWNrIHRoYXQgdGhlIHNjcmlwdAogICAgICAgICAgICAgICAgICAgIC8vIGhhcyBub3QgaGFkIGEgdW5pY29kZSBzdWJzdGl0dXRpb24gZXJyb3IuIChHaXQgZGlkIHRoaXMgZG8gbWUsIG9uY2UuKQogICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIEF2c0FuT3ZlcnJpZGVfKGZ3b3JkKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIGV4Y2VwdGlvbnNBXyA9IC9eKD86dWlzP3xjb1x3fGZvcm18dnxkYXRhfG1lZGlhKS9pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhjZXB0aW9uc0FfID0gL14oPzp1aXM/fGRhdGEpL2k7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleGNlcHRpb25zQW5fID0gLyg/Ol5bbHJddmFsdWV8YVxifHNxbCkvaTsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChleGNlcHRpb25zQV8udGVzdChmd29yZCkgPyBhcnRpY2xlWzBdIDoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGNlcHRpb25zQW5fLnRlc3QoZndvcmQpID8gYXJ0aWNsZVswXSsibiIgOiBmYWxzZSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZmlyc3RjYXBzOiB7CiAgICAgICAgICAgICAgICAvLyAgICBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3FSNWZPOS80MAogICAgICAgICAgICAgICAgLy8gUmVnZXggZmluZHMgYWxsIHNlbnRlbmNlczsgcmVwbGFjZW1lbnQgbXVzdCBkZXRlcm1pbmUgd2hldGhlciBpdCBuZWVkcyB0byBjYXBpdGFsaXplLgogICAgICAgICAgICAgICAgZXhwcjogLygoW0EtWl9hLXpdfFxkKD8hXGQqXC4gKSkoXFMqKSkoKD86KD86ZXRjXC58aVwuZVwufGVcLmdcLnx2c1wufFwuXC5cLnxcdytcLig/IVtccyIpXSl8WyotXSt8XG4oPyFbIFx0XSpcbnwgKig/OlsqLV18XGQrXC4pKXxbXi4/IVxuXT8pKSsoPzooWy4/IV0pKD89W1xzIildfCQpfFxuXG58XG4oPz0gKlsqLV0pfFxuKD89ICpcZCtcLil8JCkpL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKHNlbnRlbmNlLCBmV29yZCwgZkNoYXIsIGZXb3JkUG9zdCwgc2VudGVuY2VQb3N0LCBlbmRwdW5jKSB7IAogICAgICAgICAgICAgICAgICAgIHZhciBjYXBDaGFyID0gZkNoYXIudG9VcHBlckNhc2UoKTsKICAgICAgICAgICAgICAgICAgICBpZiAoc2VudGVuY2UgPT09ICJ1bmRlZmluZWQifHxjYXBDaGFyID09IGZDaGFyKSByZXR1cm4gc2VudGVuY2U7ICAvLyBNVVNUIG1hdGNoIHNlbnRlbmNlLCBvciBnZXRzIGNvdW50ZWQgYXMgYSBjaGFuZ2UuCiAgICAgICAgICAgICAgICAgICAgaWYgKCFmV29yZCkgZldvcmQgPSAnJzsKICAgICAgICAgICAgICAgICAgICB2YXIgZldvcmRDaGFycyA9IGZXb3JkLnNwbGl0KCcnKTsKICAgICAgICAgICAgICAgICAgICAvLyBMZWF2ZSBzb21lIHdvcmRzIGFsb25lOiBmaWxlbmFtZXMsIGNhbWVsQ2FzZQogICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGk9MDsgaTxmV29yZENoYXJzLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmV29yZENoYXJzW2ldLnNlYXJjaCgvWy5fL10vZykgIT09IC0xIHx8CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmV29yZENoYXJzW2ldID09IGZXb3JkQ2hhcnNbaV0udG9VcHBlckNhc2UoKSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZW50ZW5jZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZSA9IGNhcENoYXIgKyBmV29yZFBvc3QgKyBzZW50ZW5jZVBvc3Q7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHVwZGF0ZTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGk6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci91TzdxRzAvMgogICAgICAgICAgICAgICAgZXhwcjogL1xiaVxiKD8hXC5lKS9nLCAgLy8gaSBidXQgbm90IGkuZS4KICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiSSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlfYXBvc3Ryb3BoZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiaVsnYMK04oCZXS9naSwgIC8vIGktYXBvc3Ryb3BoZSBvbmx5CiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkknIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaV9sbDogeyAgLy8gTXVzdCBOT1QgY29udmVydCBpbGwgdG8gSSdsbAogICAgICAgICAgICAgICAgZXhwcjogL1xiaSBsbFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJJJ2xsIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW06IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYig/OmkgKm0oPzogYW0pP3xpJ2FtfGlhbSlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiSSdtIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXZlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJpWydgwrTigJldKnZbJ2DCtOKAmV0qZVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJJJ3ZlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaWU6IHsgIC8vIGh0dHA6Ly9lbmdsaXNoLnN0YWNrZXhjaGFuZ2UuY29tL3F1ZXN0aW9ucy8zMDEwNi9jYW4taS1zdGFydC1hLXNlbnRlbmNlLXdpdGgtaS1lCiAgICAgICAgICAgICAgICBleHByOiAvXGIoaXxJKVwuP2VbLlxzXSsvZywgICAvLyBDYXJlZnVsIGhlcmU7IElFIGlzIEludGVybmV0IEV4cGxvcmVyCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxLmUuICIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVnOiB7IC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvcUgyb1QwLzcKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihlKVwuP2dbLiw7IDpdKy9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEuZy4gIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXRjOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2RFN2NWMS80CiAgICAgICAgICAgICAgICBleHByOiAvXGJldGMoPzpcLispPy9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJldGMuIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHlzYW5reTogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlwhXSlbIV17NX0oPyFcISkvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEhIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogd2luZG93LmF0b2IoJ0lrWnBkbVVnWlhoamJHRnRZWFJwYjI0Z2JXRnlhM01zSUhSb1pTQnpkWEpsSUhOcFoyNGdiMllnWVc0Z2FXNXpZVzVsSUcxcGJtUWknKQogICAgICAgICAgICB9LAogICAgICAgICAgICBtdWx0aXBsZXN5bWJvbHM6IHsgIC8vICAgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvYkU5ek02LzYKICAgICAgICAgICAgICAgIGV4cHI6IC8oXGJbY0NdXCtcK3w9ezEsM30oPyE9KSl8KFteXHdccyojLlwtXzpcW1xdXDwvPl0pXDJ7MSx9L2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuZ3JhbW1hcgogICAgICAgICAgICB9LAogICAgICAgICAgICBpX3dhbnQ6IHsgLy9odHRwczovL3JlZ2V4MTAxLmNvbS9yL2lEMnRVMC8xCiAgICAgICAgICAgICAgICBleHByOiAvXGJJWydhIF0qbSB3YW50aW5nXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkkgd2FudCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG94Zm9yZF9jb21tYTogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3hOMG1GNi82CiAgICAgICAgICAgICAgICBleHByOiAvKCg/OltcdyctXSssXHMrKSsoPzpbXHcnLV0rXHMpezAsMn1bXHcnLV0rKShccysoYW5kfG9yKVxzK1tcdyctXSspL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxLCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaV9oYXZlX2ZpbmQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihJfHlvdSkgaGF2ZSBmaW5kXGIoPyFbKF18XC5cdykvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxIGhhdmUgZm91bmQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuZ3JhbW1hcgogICAgICAgICAgICB9LAogICAgICAgICAgICBsZXRfc19zYXk6IHsgIC8vIDYwSyEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihsKWV0cyAoc2F5fHNlZXxsb29rfGp1c3R8cHV0fGhhdmV8bGVhdmV8Z2l2ZXx3cml0ZSlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFldCdzICQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VnZ2VzdF9tZTogeyAgLy8gMzZLCiAgICAgICAgICAgICAgICBleHByOiAvXGIocyl1W2dqXStlc3Qocyk/IG1lL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVnZ2VzdCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcGVyZmVjdGx5OiB7ICAvLyAzNksKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihwKVtyZV0rZmVjdGx5L2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVyZmVjdGx5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd29ya3NfcGVyZmVjdGx5OiB7ICAvLyAxM0srIHBvc3RzCiAgICAgICAgICAgICAgICBleHByOiAvXGIodylvcmsocyk/IHBbZXJdK2ZlY3RcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvcmskMiBwZXJmZWN0bHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuZ3JhbW1hcgogICAgICAgICAgICB9LAogICAgICAgICAgICAvKgogICAgICAgICAgICAqKiBOb2lzZSByZWR1Y3Rpb24gLSBSZW1vdmUgZmx1ZmYgdGhhdCBhZGRzIG5vdGhpbmcgb2YgdGVjaG5pY2FsIHZhbHVlIHRvIHBvc3RzLgogICAgICAgICAgICAqKi8KICAgICAgICAgICAgaGVscDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGgpKD86W2VhXWw/cCkoPyFbLV0pXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZWxwIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNpbGVudAogICAgICAgICAgICB9LAogICAgICAgICAgICB0aGFua3M6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih0KSg/OmFua3N8aHh8YW54KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhhbmtzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNpbGVudAogICAgICAgICAgICB9LAogICAgICAgICAgICB0aWE6IHsgIC8vIGNvbW1vbiBhY3JvbnltOyBzaG91bGQgb25seSByZW1vdmUgInRoYW5rcyBpbiBhZHZhbmNlIiBhdCBlbmQgb2YgcG9zdAogICAgICAgICAgICAgICAgZXhwcjogL1xidGlhJC9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLm5vaXNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBsZWFzZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApKD86bHp8bHNlP3xsP2Vhc2U/KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWxlYXNlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNpbGVudAogICAgICAgICAgICB9LAogICAgICAgICAgICBlZGl0dXBkYXRlOiB7CiAgICAgICAgICAgICAgICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3RUMnBLNi85CiAgICAgICAgICAgICAgICBleHByOiAvKFstXypdK1tcdCBdKlxiKGVkaXR8dXBkYXRlKVxiKFtcdCBdKiM/WzAtOV0rKT9bXHQgXSo6KltcdCBdKlstXypdKzoqfFtcdCBdKlxiKGVkaXR8dXBkYXRlKVxiKFtcdCBdKiM/WzAtOV0rKT9ccyo6K1tcdCBdKikvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ub2lzZQogICAgICAgICAgICB9LAogICAgICAgICAgICAvLyBodHRwOi8vbWV0YS5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMjk1MC9zaG91bGQtaGktdGhhbmtzLXRhZ2xpbmVzLWFuZC1zYWx1dGF0aW9ucy1iZS1yZW1vdmVkLWZyb20tcG9zdHMvOTM5ODkjOTM5ODkKICAgICAgICAgICAgc2FsdXRhdGlvbjogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3lTOWxOOC8xMAogICAgICAgICAgICAgICAgZXhwcjogL15ccyooPzpkZWFycz9cYi4qJHxncmVldGluZ3M/XGIuKiR8KD86aGkoPzp5YSkqfGhlbCtvK3xoZXlhP3xoYWl8Zyc/ZGF5fGdvb2Rccz8oPzpldmVuaW5nfG1vcm5pbmd8ZGF5fGFmdGVybm9vbil8YWhveXxmb2xrc3xndXlzKVssXHNdKig/OlxzKyg/OmFsbHxndXlzfGZvbGtzfGZyaWVuZHM/fHRoZXJlfGV2ZXJ5b25lfHBlb3BsZXxtYXRleT9zP3xidWQrKHl8aWVzKSkqKSkoPzpbLC4hPzogXSp8JCkvZ21pLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubm9pc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmFkcGhyYXNlczogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2dFMmhINi8xNgogICAgICAgICAgICAgICAgZXhwcjogL1teXG4uIT86XSooPzp0aGFua3N8dGhhbmtbIC1deW91fHBsZWFzZXxoZWxwfHN1Z2dlc3QoPzppb25zKSlcYig/OlsgLj8hXSokfFteXG4uIT86XSpcYig/OmhlbHB8YXArcmVjaWF0XHcqfG1lfGFkdmFuXHcqfGEgP2xvdClcYlteXG4uIT86XSopWy4hP18qXSovZ2ltLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubm9pc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW1uZXc6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPyEgKVtcd1xzXSpcYmlbJyBdP2E/bSArKD86a2luZGF8cmVhbGx5KSAqbmV3XHcqICsoPzp0b3xpbikgKlx3KiAqKD86YW5kfFs7LC4hP10pPyAqL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubm9pc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29tcGxpbWVudGFyeUNsb3NlOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2hMM2tUNS81CiAgICAgICAgICAgICAgICBleHByOiAvXlxzKig/Oig/OmtpbmQoPzplc3QpKiB8YmVzdCApKnJlZ2FyZHM/fGNoZWVycz98Z3JlZXRpbmdzP3x0aGFua3N8dGhhbmsgeW91KVxiLD8uKltcclxuXXswLDJ9LiooPzpbLiE/OiBdKnwkKS9naW0sCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ub2lzZQogICAgICAgICAgICB9LAogICAgICAgICAgICBzb3JyeTRlbmdsaXNoOiB7IC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvcEczb0Q2LzgKICAgICAgICAgICAgICAgIGV4cHI6IC9bXlxuLiE/XSooKHNvcnJ5fGFwK29sb2cuKnxmb3JnaXZlKVxiW14uIT86XG5ccl0rXGIoKGJhZHxteXxwb29yKSBlbmdsaXNoKXwoZW5nbGlzaFteLiE/OlxuXHJdKylcYih0b25ndWV8bGFuZ3VhZ2UpKVxiW14uIT86XG5ccl0qKD86Wy4hPzpfKl0pKi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLm5vaXNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGhvcGVfdGhpc19oZWxwczogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci95RjF1WTAvMQogICAgICAgICAgICAgICAgZXhwcjogL15ccyppPyA/XGJob3BlXGJbXlxuLiE/Ol0qaGVscHM/W15cbi4hPzpdKlssLiE/OiAoKV4tXSokL2dtaSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLm5vaXNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVudGVyX2NvZGVfaGVyZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiZW50ZXIgKD86Y29kZXxpbWFnZSBkZXNjcmlwdGlvbnxsaW5rIGRlc2NyaXB0aW9uKSBoZXJlXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ub2lzZQogICAgICAgICAgICB9LAogICAgICAgICAgICAvKgogICAgICAgICAgICAqKiBMYXlvdXQgIC0gTWluaW1pemUgd2hpdGVzcGFjZSAod2hpY2ggaXMgY29tcHJlc3NlZCBieSBtYXJrdXApLgogICAgICAgICAgICAqKiAgICAgICAgICAgTXVzdCBmb2xsb3cgbm9pc2UgcmVkdWN0aW9uLgogICAgICAgICAgICAqKiAgICAgICAgICAgTGVhZGluZyBhbmQgdHJhaWxpbmcgc3BhY2VzIGFyZSBwYXJ0IG9mIE1hcmtkb3duIGZvcm1hdHRpbmc7IGxlYXZlIHRoZW0uCiAgICAgICAgICAgICoqLwogICAgICAgICAgICBzcGFjZV90aGVuX3N5bWJvbDogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9mTjZsTDcvNgogICAgICAgICAgICAgICAgZXhwcjogLyhbXiBcblxyXFtcKV0pKFwoKD8hXCkpKS9nbSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEgJDIiLAogICAgICAgICAgICAgICAgZGVidWc6IGZhbHNlLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubGF5b3V0CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5vX3NwYWNlX2JlZm9yZV9zeW1ib2w6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvcUI5bFMwLzIKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzooXiArKXxbIF0rPyhbLD8hOildK3xbLl0rKD8hW1xTXSkpKS9nbSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEkMiIsCiAgICAgICAgICAgICAgICBkZWJ1ZzogZmFsc2UsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5sYXlvdXQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3ltYm9sX3RoZW5fc3BhY2U6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvaUQ5YVMxLzYKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpcYikoWyw/ITopXSt8Wy5dezN9KSg/OlxiKSg/IVtcZF0pL2dtLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMSAiLAogICAgICAgICAgICAgICAgZGVidWc6IGZhbHNlLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubGF5b3V0CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNwYWNlX3N5bWJvbF9zcGFjZTogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlxifCArKShbJl0pKD86IHxcYikoPyFbXGRdKS9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIgJDEgIiwKICAgICAgICAgICAgICAgIGRlYnVnOiBmYWxzZSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmxheW91dAogICAgICAgICAgICB9LAogICAgICAgICAgICBtdWx0aXBsZXNwYWNlczogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2hZOWhRMy8zCiAgICAgICAgICAgICAgICBleHByOiAvKD8hXilbIF17Mix9KD8hID8kKS9nbSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiICIsCiAgICAgICAgICAgICAgICBkZWJ1ZzogZmFsc2UsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5sYXlvdXQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbnVtYmVyZWRfbGlzdDogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL21JMWFWMy8yCiAgICAgICAgICAgICAgICBleHByOiAvW1xuXHJdKyhbIFx0XSpbXGRdKylbKS5dICovZ20sCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlxuXG4kMS4gIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmxheW91dAogICAgICAgICAgICB9LAogICAgICAgICAgICAvLyBESVNBQkxFRCB0ZW1wb3JhcmlseSAtIHNlZSBJc3N1ZSAjMTE1CiAgICAgICAgICAgIC8vYmxhbmtsaW5lczogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9lQTVoQTIvMgogICAgICAgICAgICAvLyAgICBleHByOiAvXig/OiAqW1xuXHJcZl0pK3woPzogKltcblxyXGZdKSskfCgoPzogKltcblxyXGZdKXsyfSkoPzooPzogKltcblxyXGZdKSkrL2csCiAgICAgICAgICAgIC8vICAgIHJlcGxhY2VtZW50OiAiJDEiLAogICAgICAgICAgICAvLyAgICBkZWJ1ZzogZmFsc2UsCiAgICAgICAgICAgIC8vICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmxheW91dAogICAgICAgICAgICAvL30sCiAgICAgICAgICAgIHRyYWlsaW5nX3NwYWNlOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2lRMHlSOC8xCiAgICAgICAgICAgICAgICBleHByOiAvKFteIF0pWyBdezF9JC9nbSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEiLAogICAgICAgICAgICAgICAgZGVidWc6IGZhbHNlLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc2lsZW50CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8vIFRoZSB0aXRsZSBzYXlzIGl0IGFsbAogICAgICAgICAgICB0aGV0aXRsZXNheXNpdGFsbDogewogICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9iWDFxQjQvMwogICAgICAgICAgICAgICAgZXhwcjogLyg/OnRoZSApP3RpdGxlIHNheXMgKD86aXQgYWxsfGV2ZXJ5dGhpbmcpWy4/IV0qL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEFwcC5zZWxlY3Rpb25zLnRpdGxlLnZhbCgpLnJlcGxhY2UoL1suPyFdKiQvLCI/IFxuXG4iKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50aXRsZVNheXNBbGwKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIC8vIFRoaXMgaXMgd2hlcmUgdGhlIG1hZ2ljIGhhcHBlbnM6IHRoaXMgZnVuY3Rpb24gdGFrZXMgYSBmZXcgcGllY2VzIG9mIGluZm9ybWF0aW9uIGFuZCBhcHBsaWVzIGVkaXRzIHRvIHRoZSBwb3N0CiAgICAgICAgQXBwLmZ1bmNzLmZpeEl0ID0gZnVuY3Rpb24oaW5wdXQsIGVkaXQpIHsKICAgICAgICAgICAgdmFyIGV4cHJlc3Npb24gPSBlZGl0LmV4cHI7CiAgICAgICAgICAgIHZhciByZXBsYWNlbWVudCA9IGVkaXQucmVwbGFjZW1lbnQ7CiAgICAgICAgICAgIHZhciByZWFzb25pbmcgPSBlZGl0LnJlYXNvbjsKICAgICAgICAgICAgdmFyIGRlYnVnID0gZWRpdC5kZWJ1ZzsKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIChkZWJ1ZykgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coaW5wdXQpOwogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZXhwcmVzc2lvbi50b1N0cmluZygpKTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJyZXBsYWNlbWVudDogJyIrcmVwbGFjZW1lbnQrIiciKTsKICAgICAgICAgICAgfQogICAgICAgICAgICAvLyBJZiB0aGVyZSBpcyBub3RoaW5nIHRvIHNlYXJjaCwgZXhpdAogICAgICAgICAgICBpZiAoIWlucHV0KSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIC8vIFNjYW4gdGhlIHBvc3QgdGV4dCB1c2luZyB0aGUgZXhwcmVzc2lvbiB0byBzZWUgaWYgdGhlcmUgYXJlIGFueSBtYXRjaGVzCiAgICAgICAgICAgIHZhciBtYXRjaGVzID0gaW5wdXQubWF0Y2goZXhwcmVzc2lvbik7CiAgICAgICAgICAgIGlmIChkZWJ1ZykgY29uc29sZS5sb2cobWF0Y2hlcywgZXhwcmVzc2lvbi5leGVjKGlucHV0KSk7CiAgICAgICAgICAgIGlmICghbWF0Y2hlcykgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICB2YXIgY291bnQgPSAwOyAgLy8gIyByZXBsYWNlbWVudHMgdG8gZG8KICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5yZXBsYWNlKGV4cHJlc3Npb24sIGZ1bmN0aW9uKGJlZm9yZSl7IAogICAgICAgICAgICAgICAgdmFyIGFmdGVyID0gYmVmb3JlLnJlcGxhY2UoZXhwcmVzc2lvbiwgcmVwbGFjZW1lbnQpOwogICAgICAgICAgICAgICAgaWYoYWZ0ZXIgIT09IGJlZm9yZSkgKytjb3VudDsgCiAgICAgICAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKGJlZm9yZSwgYWZ0ZXIsIGFmdGVyICE9PSBiZWZvcmUsIGNvdW50KTsKICAgICAgICAgICAgICAgIHJldHVybiBhZnRlcjsKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIGlmICghY291bnQpIHsKICAgICAgICAgICAgICAgIC8vIFNlZW1zIGxpa2Ugbm8gcmVwbGFjZW1lbnRzLCBjaGVjay4KICAgICAgICAgICAgICAgIC8vIEluIHNvbWUgY2FzZXMsIHRoZSBleHByZXNzaW9uIG1hdGNoZXMgb24gdGhlIGluaXRpYWwgaW5wdXQsIGJ1dAogICAgICAgICAgICAgICAgLy8gZmFpbHMgdG8gb24gdGhlIGluZGl2aWR1YWwgbWF0Y2hlcy4gSW4gdGhhdCBjYXNlLCB3ZSBjYW4ndCBjb3VudAogICAgICAgICAgICAgICAgLy8gdGhlIHRvdGFsIGNoYW5nZXMgYWNjdXJhdGVseSwgYnV0IHdlIGNhbiBzdGlsbCBjb21wbGV0ZSB0aGUKICAgICAgICAgICAgICAgIC8vIHJlcGxhY2VtZW50IG9uIHRoZSBpbml0aWFsIGlucHV0LgogICAgICAgICAgICAgICAgdmFyIGFmdGVyID0gaW5wdXQucmVwbGFjZShleHByZXNzaW9uLCByZXBsYWNlbWVudCk7CiAgICAgICAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKCJ6ZXJvLWNvdW50OiAiLCBpbnB1dCwgYWZ0ZXIsIGFmdGVyICE9PSBpbnB1dCk7CiAgICAgICAgICAgICAgICBpZihhZnRlciAhPT0gaW5wdXQpIHsKICAgICAgICAgICAgICAgICAgICArK2NvdW50OyAKICAgICAgICAgICAgICAgICAgICBpbnB1dCA9IGFmdGVyOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBjb3VudCA+IDAgPyB7CiAgICAgICAgICAgICAgICByZWFzb246IHJlYXNvbmluZywKICAgICAgICAgICAgICAgIGZpeGVkOiBTdHJpbmcoaW5wdXQpLAogICAgICAgICAgICAgICAgY291bnQ6IGNvdW50CiAgICAgICAgICAgIH0gOiBmYWxzZTsKICAgICAgICB9OwoKICAgICAgICAvLyBQb3B1bGF0ZSBvciByZWZyZXNoIERPTSBzZWxlY3Rpb25zCiAgICAgICAgQXBwLmZ1bmNzLnBvcFNlbGVjdGlvbnMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMucmVkb0J1dHRvbiAgICAgPSBBcHAuZ2xvYmFscy5yb290LmZpbmQoJ1tpZF49IndtZC1yZWRvLWJ1dHRvbiJdJyk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmJvZHkgICAgICAgICAgID0gQXBwLmdsb2JhbHMucm9vdC5maW5kKCdbaWRePSJ3bWQtaW5wdXQiXScpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy50aXRsZSAgICAgICAgICA9IEFwcC5nbG9iYWxzLnJvb3QuZmluZCgnW2NsYXNzKj0idGl0bGUtZmllbGQiXScpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5zdW1tYXJ5ICAgICAgICA9IEFwcC5nbG9iYWxzLnJvb3QuZmluZCgnW2lkXj0iZWRpdC1jb21tZW50Il0sIC5lZGl0LWNvbW1lbnQnKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMudGFnRmllbGQgICAgICAgPSBBcHAuZ2xvYmFscy5yb290LmZpbmQoIi50YWctZWRpdG9yIik7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnN1Ym1pdEJ1dHRvbiAgID0gQXBwLmdsb2JhbHMucm9vdC5maW5kKCdbaWRePSJzdWJtaXQtYnV0dG9uIl0nKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuaGVscEJ1dHRvbiAgICAgPSBBcHAuZ2xvYmFscy5yb290LmZpbmQoJ1tpZF49IndtZC1oZWxwLWJ1dHRvbiJdJyk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmVkaXRvciAgICAgICAgID0gQXBwLmdsb2JhbHMucm9vdC5maW5kKCcucG9zdC1lZGl0b3InKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMucHJldmlldyAgICAgICAgPSBBcHAuZ2xvYmFscy5yb290LmZpbmQoJy53bWQtcHJldmlldycpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3TWVudSAgICA9IEFwcC5nbG9iYWxzLnJvb3QuZmluZCgnLnByZXZpZXctb3B0aW9ucycpLmFwcGVuZCgnJm5ic3A7Jm5ic3A7Jyk7CiAgICAgICAgICAgIGlmKCFBcHAuc2VsZWN0aW9ucy5wcmV2aWV3TWVudS5sZW5ndGgpIHsKICAgICAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnByZXZpZXdNZW51ICAgPSAkKCc8ZGl2IGNsYXNzPSJwcmV2aWV3LW9wdGlvbnMgcG9zdC1tZW51IiBzdHlsZT0ibWFyZ2luLXRvcDo1cHg7bWFyZ2luLWJvdHRvbTo4cHg7Ii8+JykuaW5zZXJ0QmVmb3JlKEFwcC5zZWxlY3Rpb25zLnByZXZpZXcpOwogICAgICAgICAgICAgICAgdmFyIHByZXZpZXdUb2dnbGVUZXh0ID0gQXBwLnNlbGVjdGlvbnMucHJldmlldy5pcygnOnZpc2libGUnKSA/ICdoaWRlIHByZXZpZXcnIDogJ3Nob3cgcHJldmlldyc7CiAgICAgICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3VG9nZ2xlID0gJCgnPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iaGlkZS1wcmV2aWV3IiBzdHlsZT0ibWFyZ2luLWxlZnQ6LTJweDsiPicgKyBwcmV2aWV3VG9nZ2xlVGV4dCArICc8L2E+JykuY2xpY2soQXBwLmZ1bmNzLnRvZ2dsZVByZXZpZXcpLmFwcGVuZFRvKEFwcC5zZWxlY3Rpb25zLnByZXZpZXdNZW51KTsKICAgICAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnByZXZpZXdNZW51LmFwcGVuZCgnJm5ic3A7Jm5ic3A7Jyk7CiAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3VG9nZ2xlICA9IEFwcC5nbG9iYWxzLnJvb3QuZmluZCgnLmhpZGUtcHJldmlldycpLm9mZignY2xpY2snKS5hdHRyKCdocmVmJywnamF2YXNjcmlwdDp2b2lkKDApJykuY2xpY2soQXBwLmZ1bmNzLnRvZ2dsZVByZXZpZXcpOwogICAgICAgICAgICB9CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmRpZmZUb2dnbGUgICAgID0gJCgnPGEgaHJlZj0iamF2YXNjcmlwdDp2b2lkKDApIiBjbGFzcz0iaGlkZS1wcmV2aWV3IiBzdHlsZT0ibWFyZ2luLWxlZnQ6LTJweDsiPnNob3cgZGlmZjwvYT4nKS5jbGljayhBcHAuZnVuY3MudG9nZ2xlRGlmZikuYXBwZW5kVG8oQXBwLnNlbGVjdGlvbnMucHJldmlld01lbnUpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5kaWZmICAgICAgICAgICA9ICQoJzxkaXYgY2xhc3M9IndtZC1wcmV2aWV3Ii8+JykuaGlkZSgpLmFwcGVuZFRvKEFwcC5zZWxlY3Rpb25zLmVkaXRvcik7CiAgICAgICAgfTsKCiAgICAgICAgQXBwLmZ1bmNzLnNob3dQcmV2aWV3ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmRpZmYuaGlkZSgpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5kaWZmVG9nZ2xlLnRleHQoJ3Nob3cgZGlmZicpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3LnNob3coKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMucHJldmlld1RvZ2dsZS50ZXh0KCdoaWRlIHByZXZpZXcnKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgQXBwLmZ1bmNzLnNob3dEaWZmID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnByZXZpZXcuaGlkZSgpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3VG9nZ2xlLnRleHQoJ3Nob3cgcHJldmlldycpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5kaWZmLnNob3coKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuZGlmZlRvZ2dsZS50ZXh0KCdoaWRlIGRpZmYnKTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgQXBwLmZ1bmNzLnRvZ2dsZVByZXZpZXcgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuZGlmZi5oaWRlKCk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmRpZmZUb2dnbGUudGV4dCgnc2hvdyBkaWZmJyk7CiAgICAgICAgICAgIGlmKC9oaWRlLy50ZXN0KEFwcC5zZWxlY3Rpb25zLnByZXZpZXdUb2dnbGUudGV4dCgpKSkgcmV0dXJuIEFwcC5zZWxlY3Rpb25zLnByZXZpZXdUb2dnbGUudGV4dCgnc2hvdyBwcmV2aWV3JyksIEFwcC5zZWxlY3Rpb25zLnByZXZpZXcudG9nZ2xlKCksIHRydWU7CiAgICAgICAgICAgIGlmKC9zaG93Ly50ZXN0KEFwcC5zZWxlY3Rpb25zLnByZXZpZXdUb2dnbGUudGV4dCgpKSkgcmV0dXJuIEFwcC5zZWxlY3Rpb25zLnByZXZpZXdUb2dnbGUudGV4dCgnaGlkZSBwcmV2aWV3JyksIEFwcC5zZWxlY3Rpb25zLnByZXZpZXcudG9nZ2xlKCksIHRydWU7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIEFwcC5mdW5jcy50b2dnbGVEaWZmID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnByZXZpZXcuaGlkZSgpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3VG9nZ2xlLnRleHQoJ3Nob3cgcHJldmlldycpOwogICAgICAgICAgICBpZigvaGlkZS8udGVzdChBcHAuc2VsZWN0aW9ucy5kaWZmVG9nZ2xlLnRleHQoKSkpIHJldHVybiBBcHAuc2VsZWN0aW9ucy5kaWZmVG9nZ2xlLnRleHQoJ3Nob3cgZGlmZicpLCBBcHAuc2VsZWN0aW9ucy5kaWZmLnRvZ2dsZSgpLCB0cnVlOwogICAgICAgICAgICBpZigvc2hvdy8udGVzdChBcHAuc2VsZWN0aW9ucy5kaWZmVG9nZ2xlLnRleHQoKSkpIHJldHVybiBBcHAuc2VsZWN0aW9ucy5kaWZmVG9nZ2xlLnRleHQoJ2hpZGUgZGlmZicpLCBBcHAuc2VsZWN0aW9ucy5kaWZmLnRvZ2dsZSgpLCB0cnVlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBQb3B1bGF0ZSBlZGl0IGl0ZW0gc2V0cyBmcm9tIERPTSBzZWxlY3Rpb25zCiAgICAgICAgQXBwLmZ1bmNzLnBvcEl0ZW1zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHZhciBpID0gQXBwLml0ZW1zLCBzID0gQXBwLnNlbGVjdGlvbnM7CiAgICAgICAgICAgIFsndGl0bGUnLCAnYm9keScsICdzdW1tYXJ5J10uZm9yRWFjaChmdW5jdGlvbih2KSB7CiAgICAgICAgICAgICAgICBpW3ZdID0gc1t2XS5sZW5ndGggPyBzW3ZdLnZhbCgpIDogJyc7CiAgICAgICAgICAgIH0pOwogICAgICAgIH07CgogICAgICAgIC8vIFBvcHVsYXRlIG9yaWdpbmFsIGl0ZW0gc2V0cyBmcm9tIGVkaXQgaXRlbXMgZm9yIHRoZSBkaWZmCiAgICAgICAgQXBwLmZ1bmNzLnBvcE9yaWdpbmFscyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgaSA9IEFwcC5vcmlnaW5hbHMsIHMgPSBBcHAuaXRlbXM7CiAgICAgICAgICAgIFsndGl0bGUnLCAnYm9keScsICdzdW1tYXJ5J10uZm9yRWFjaChmdW5jdGlvbih2KSB7CiAgICAgICAgICAgICAgICBpW3ZdID0gc1t2XTsKICAgICAgICAgICAgfSk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIC8vIEluc2VydCBlZGl0aW5nIGJ1dHRvbgogICAgICAgIEFwcC5mdW5jcy5jcmVhdGVCdXR0b24gPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgaWYgKCFBcHAuc2VsZWN0aW9ucy5yZWRvQnV0dG9uLmxlbmd0aCkgcmV0dXJuIGZhbHNlOwoKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuYnV0dG9uV3JhcHBlciA9ICQoJzxsaSBjbGFzcz0id21kLW1hZ2ljLWVkaXQiLz4nKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuYnV0dG9uRml4ID0gJCgnPGltZyBzcmM9Ii8vaS5zdGFjay5pbWd1ci5jb20vT201cEwucG5nIiBjbGFzcz0id21kLWJ1dHRvbiBUb29sa2l0Rml4IiB0aXRsZT0iRml4IHRoZSBjb250ZW50ISIgLz4nKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuYnV0dG9uSW5mbyA9ICQoJzxkaXYgY2xhc3M9IlRvb2xraXRJbmZvIj4nKTsKCiAgICAgICAgICAgIC8vIEJ1aWxkIHRoZSBidXR0b24KICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuYnV0dG9uV3JhcHBlci5hcHBlbmQoQXBwLnNlbGVjdGlvbnMuYnV0dG9uRml4KTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuYnV0dG9uV3JhcHBlci5hcHBlbmQoQXBwLnNlbGVjdGlvbnMuYnV0dG9uSW5mbyk7CgogICAgICAgICAgICAvLyBJbnNlcnQgYnV0dG9uCiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnJlZG9CdXR0b24uYWZ0ZXIoQXBwLnNlbGVjdGlvbnMuYnV0dG9uV3JhcHBlcik7CgogICAgICAgICAgICAvLyBBdHRhY2ggdGhlIGV2ZW50IGxpc3RlbmVyIHRvIHRoZSBidXR0b24KICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuYnV0dG9uRml4LmNsaWNrKEFwcC5mdW5jcy5maXhFdmVudCk7CiAgICAgICAgICAgIAogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5idXR0b25XcmFwcGVyLmNzcyh7CiAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAncmVsYXRpdmUnLAogICAgICAgICAgICAgICAgJ2xlZnQnOiAnNDEwcHgnLAogICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJywKICAgICAgICAgICAgICAgICdvdmVyZmxvdyc6ICd2aXNpYmxlJywKICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnNTUlJywKICAgICAgICAgICAgICAgICd3aGl0ZS1zcGFjZSc6ICdub3dyYXAnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5idXR0b25GaXguY3NzKHsKICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICdzdGF0aWMnLAogICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJywKICAgICAgICAgICAgICAgICd3aWR0aCc6ICdhdXRvJywKICAgICAgICAgICAgICAgICdoZWlnaHQnOiAnMTAwJScKICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmJ1dHRvbkluZm8uY3NzKHsKICAgICAgICAgICAgICAgICdwb3NpdGlvbic6ICdzdGF0aWMnLAogICAgICAgICAgICAgICAgJ2Rpc3BsYXknOiAnaW5saW5lLWJsb2NrJywKICAgICAgICAgICAgICAgICd2ZXJ0aWNhbC1hbGlnbic6ICdib3R0b20nLAogICAgICAgICAgICAgICAgJ21hcmdpbi1sZWZ0JzogJzVweCcsCiAgICAgICAgICAgICAgICAnZm9udC1zaXplJzogJzEycHgnLAogICAgICAgICAgICAgICAgJ2NvbG9yJzogJyM0MjQyNDInLAogICAgICAgICAgICAgICAgJ2JhY2tncm91bmQnOiAnI2VlZScsCiAgICAgICAgICAgICAgICAnYm9yZGVyLXJhZGl1cyc6ICczcHgnLAogICAgICAgICAgICAgICAgJ3BhZGRpbmcnOiAnM3B4IDZweCcKICAgICAgICAgICAgfSkuaGlkZSgpOwogICAgICAgIH07CgogICAgICAgIEFwcC5mdW5jcy5maXhFdmVudCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICByZXR1cm4gQXBwLmZ1bmNzLnBvcEl0ZW1zKCksIEFwcC5waXBlKEFwcC5pdGVtcywgQXBwLnBpcGVNb2RzLCBBcHAuZ2xvYmFscy5vcmRlciksIGZhbHNlOwogICAgICAgIH07CgogICAgICAgIEFwcC5mdW5jcy5kaWZmID0gZnVuY3Rpb24oYTEsIGEyKSB7CiAgICAgICAgICAgIHZhciBzdHJpbmdzID0gW107CiAgICAgICAgICAgIGZ1bmN0aW9uIG1hYWtSaWoodHlwZSwgcmlqKSB7CiAgICAgICAgICAgICAgICBpZiAoIXR5cGUpIHJldHVybiBzdHJpbmdzLnB1c2gocmlqLnJlcGxhY2UoL1w8L2csICcmbHQ7JykpLCB0cnVlOwogICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICcrJykgcmV0dXJuIHN0cmluZ3MucHVzaCgnPHNwYW4gY2xhc3M9ImFkZCI+JyArIHJpai5yZXBsYWNlKC9cPC9nLCAnJmx0OycpLnJlcGxhY2UoLyg/PVxuKS9nLCfihrUnKSArICc8L3NwYW4+JyksIHRydWU7CiAgICAgICAgICAgICAgICBpZiAodHlwZSA9PT0gJy0nKSByZXR1cm4gc3RyaW5ncy5wdXNoKCc8c3BhbiBjbGFzcz0iZGVsIj4nICsgcmlqLnJlcGxhY2UoL1w8L2csICcmbHQ7JykucmVwbGFjZSgvKD89XG4pL2csJ+KGtScpICsgJzwvc3Bhbj4nKSwgdHJ1ZTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gZ2V0RGlmZihtYXRyaXgsIGExLCBhMiwgeCwgeSkgewogICAgICAgICAgICAgICAgaWYgKHggPiAwICYmIHkgPiAwICYmIGExW3kgLSAxXSA9PT0gYTJbeCAtIDFdKSB7CiAgICAgICAgICAgICAgICAgICAgZ2V0RGlmZihtYXRyaXgsIGExLCBhMiwgeCAtIDEsIHkgLSAxKTsKICAgICAgICAgICAgICAgICAgICBtYWFrUmlqKGZhbHNlLCBhMVt5IC0gMV0pOwogICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICBpZiAoeCA+IDAgJiYgKHkgPT09IDAgfHwgbWF0cml4W3ldW3ggLSAxXSA+PSBtYXRyaXhbeSAtIDFdW3hdKSkgewogICAgICAgICAgICAgICAgICAgICAgICBnZXREaWZmKG1hdHJpeCwgYTEsIGEyLCB4IC0gMSwgeSk7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hYWtSaWooJysnLCBhMlt4IC0gMV0pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoeSA+IDAgJiYgKHggPT09IDAgfHwgbWF0cml4W3ldW3ggLSAxXSA8IG1hdHJpeFt5IC0gMV1beF0pKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIGdldERpZmYobWF0cml4LCBhMSwgYTIsIHgsIHkgLSAxKTsKICAgICAgICAgICAgICAgICAgICAgICAgbWFha1JpaignLScsIGExW3kgLSAxXSk7CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgYTEgPSBhMS5zcGxpdCgvKD89XGJ8XFd8XykvZyk7CiAgICAgICAgICAgIGEyID0gYTIuc3BsaXQoLyg/PVxifFxXfF8pL2cpOwoKICAgICAgICAgICAgdmFyIG1hdHJpeCA9IG5ldyBBcnJheShhMS5sZW5ndGggKyAxKTsKICAgICAgICAgICAgdmFyIHgsIHk7CiAgICAgICAgICAgIGZvciAoeSA9IDA7IHkgPCBtYXRyaXgubGVuZ3RoOyB5KyspIHsKICAgICAgICAgICAgICAgIG1hdHJpeFt5XSA9IG5ldyBBcnJheShhMi5sZW5ndGggKyAxKTsKCiAgICAgICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgbWF0cml4W3ldLmxlbmd0aDsgeCsrKSB7CiAgICAgICAgICAgICAgICAgICAgbWF0cml4W3ldW3hdID0gMDsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgZm9yICh5ID0gMTsgeSA8IG1hdHJpeC5sZW5ndGg7IHkrKykgewogICAgICAgICAgICAgICAgZm9yICh4ID0gMTsgeCA8IG1hdHJpeFt5XS5sZW5ndGg7IHgrKykgewogICAgICAgICAgICAgICAgICAgIGlmIChhMVt5IC0gMV0gPT09IGEyW3ggLSAxXSkgewogICAgICAgICAgICAgICAgICAgICAgICBtYXRyaXhbeV1beF0gPSAxICsgbWF0cml4W3kgLSAxXVt4IC0gMV07CiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4W3ldW3hdID0gTWF0aC5tYXgobWF0cml4W3kgLSAxXVt4XSwgbWF0cml4W3ldW3ggLSAxXSk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICB0cnkgewogICAgICAgICAgICAgICAgZ2V0RGlmZihtYXRyaXgsIGExLCBhMiwgeCAtIDEsIHkgLSAxKTsKICAgICAgICAgICAgICAgIHJldHVybiBzdHJpbmdzLmpvaW4oJycpOwogICAgICAgICAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIC8vIFBpcGUgZGF0YSB0aHJvdWdoIG1vZHVsZXMgaW4gcHJvcGVyIG9yZGVyLCByZXR1cm5pbmcgdGhlIHJlc3VsdAogICAgICAgIEFwcC5waXBlID0gZnVuY3Rpb24oZGF0YSwgbW9kcywgb3JkZXIpIHsKICAgICAgICAgICAgdmFyIG1vZE5hbWU7CiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gb3JkZXIpIHsKICAgICAgICAgICAgICAgIGlmIChvcmRlci5oYXNPd25Qcm9wZXJ0eShpKSkgewogICAgICAgICAgICAgICAgICAgIG1vZE5hbWUgPSBvcmRlcltpXTsKICAgICAgICAgICAgICAgICAgICBtb2RzW21vZE5hbWVdKGRhdGEpOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgQXBwLnBpcGVNb2RzLm9taXQgPSBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgIGlmICghZGF0YS5ib2R5KSByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgIGZvciAodmFyIHR5cGUgaW4gQXBwLmdsb2JhbHMuY2hlY2tzKSB7CiAgICAgICAgICAgICAgICBkYXRhLmJvZHkgPSBkYXRhLmJvZHkucmVwbGFjZShBcHAuZ2xvYmFscy5jaGVja3NbdHlwZV0sIGZ1bmN0aW9uKG1hdGNoKSB7CiAgICAgICAgICAgICAgICAgICAgQXBwLmdsb2JhbHMucmVwbGFjZWRTdHJpbmdzW3R5cGVdLnB1c2gobWF0Y2gpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBBcHAuZ2xvYmFscy5wbGFjZUhvbGRlcnNbdHlwZV07CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICB9OwoKICAgICAgICBBcHAucGlwZU1vZHMuY29kZWZpeCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgcmVwbGFjZWQgPSBBcHAuZ2xvYmFscy5yZXBsYWNlZFN0cmluZ3MuYmxvY2ssIHN0cjsKICAgICAgICAgICAgZm9yICh2YXIgaSBpbiByZXBsYWNlZCkgewogICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci90WDlwTTMvMSAgICAgICAgICAgICAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci90WDlwTTMvMiAgICAgICAgICAgICAgICAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci90WDlwTTMvMwogICAgICAgICAgICAgICAgaWYgKC9eYFteXStgJC8udGVzdChyZXBsYWNlZFtpXSkpIHJlcGxhY2VkW2ldID0gJ1xuXG4nICsgLyg/IWApKCg/IWApW15dKSsvLmV4ZWMocmVwbGFjZWRbaV0pWzBdLnJlcGxhY2UoLyguKykvZywgJyAgICAkMScpOwogICAgICAgICAgICB9CiAgICAgICAgfTsKCiAgICAgICAgQXBwLnBpcGVNb2RzLmVkaXQgPSBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgIEFwcC5mdW5jcy5wb3BPcmlnaW5hbHMoKTsKCiAgICAgICAgICAgIC8vIFZpc3VhbGx5IGNvbmZpcm0gZWRpdCAtIFNFIG1ha2VzIGl0IGVhc3kgYmVjYXVzZSB0aGUgalF1ZXJ5IGNvbG9yIGFuaW1hdGlvbiBwbHVnaW4gc2VlbXMgdG8gYmUgdGhlcmUgYnkgZGVmYXVsdAogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5ib2R5LmFuaW1hdGUoeyBiYWNrZ3JvdW5kQ29sb3I6ICcjYzhmZmE3JyB9LCAxMCk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmJvZHkuYW5pbWF0ZSh7IGJhY2tncm91bmRDb2xvcjogJyNmZmYnIH0sIDEwMDApOwoKICAgICAgICAgICAgLy8gTGlzdCBvZiBmaWVsZHMgdG8gYmUgZWRpdGVkCiAgICAgICAgICAgIHZhciBmaWVsZHMgPSB7Ym9keTonYm9keScsdGl0bGU6J3RpdGxlJ307CiAgICAgICAgICAgIAogICAgICAgICAgICAvLyBMb29wIHRocm91Z2ggYWxsIGVkaXRpbmcgcnVsZXMKICAgICAgICAgICAgZm9yICh2YXIgaiBpbiBBcHAuZWRpdHMpIGZvciAodmFyIGZpZWxkIGluIGZpZWxkcykgewogICAgICAgICAgICAgICAgaWYgKEFwcC5jb25zdHMucmVhc29ucy50aWR5VGl0bGUgPT0gQXBwLmVkaXRzW2pdLnJlYXNvbiAmJiAndGl0bGUnICE9PSBmaWVsZCkKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgIC8vIFNraXAgdGl0bGUtb25seSBlZGl0cyBpZiBub3QgZWRpdGluZyB0aXRsZS4KICAgICAgICAgICAgICAgIHZhciBmaXggPSBBcHAuZnVuY3MuZml4SXQoZGF0YVtmaWVsZF0sIEFwcC5lZGl0c1tqXSk7CiAgICAgICAgICAgICAgICBpZiAoIWZpeCkgY29udGludWU7CiAgICAgICAgICAgICAgICBpZiAoZml4LnJlYXNvbiBpbiBBcHAuZ2xvYmFscy5yZWFzb25zKSBBcHAuZ2xvYmFscy5yZWFzb25zW2ZpeC5yZWFzb25dLmNvdW50ICs9IGZpeC5jb3VudDsKICAgICAgICAgICAgICAgIGVsc2UgQXBwLmdsb2JhbHMucmVhc29uc1tmaXgucmVhc29uXSA9IHsgcmVhc29uOmZpeC5yZWFzb24sIGVkaXRJZDpqLCBjb3VudDpmaXguY291bnQgfTsKICAgICAgICAgICAgICAgIGRhdGFbZmllbGRdID0gZml4LmZpeGVkOwogICAgICAgICAgICAgICAgQXBwLmVkaXRzW2pdLmZpeGVkID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgICAKICAgICAgICAgICAgLy8gUmVtb3ZlIHNpbGVudCBjaGFuZ2UgcmVhc29uCiAgICAgICAgICAgIGRlbGV0ZSBBcHAuZ2xvYmFscy5yZWFzb25zW0FwcC5jb25zdHMucmVhc29ucy5zaWxlbnRdOwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gSWYgdGhlcmUgYXJlIG5vIHJlYXNvbnMsIGV4aXQKICAgICAgICAgICAgaWYgKEFwcC5nbG9iYWxzLnJlYXNvbnMgPT0ge30pIHJldHVybiBmYWxzZTsKCiAgICAgICAgICAgIC8vIFdlIG5lZWQgYSBwbGFjZSB0byBzdG9yZSB0aGUgcmVhc29ucyBiZWluZyBhcHBsaWVkIHRvIHRoZSBzdW1tYXJ5LiAKICAgICAgICAgICAgdmFyIHJlYXNvbnMgPSBbXTsKICAgICAgICAgICAgQXBwLmdsb2JhbHMuY2hhbmdlcyA9IDA7CgogICAgICAgICAgICBmb3IgKHZhciB6IGluIEFwcC5nbG9iYWxzLnJlYXNvbnMpIHsKICAgICAgICAgICAgICAgIC8vIEZvciBlYWNoIHR5cGUgb2YgY2hhbmdlIG1hZGUsIGFkZCBhIHJlYXNvbiBzdHJpbmcgd2l0aCB0aGUgcmVhc29uIHRleHQsCiAgICAgICAgICAgICAgICAvLyBvcHRpb25hbGx5IHRoZSBydWxlIElELCBhbmQgdGhlIG51bWJlciBvZiByZXBlYXRzIGlmIDIgb3IgbW9yZS4KICAgICAgICAgICAgICAgIHJlYXNvbnMucHVzaChBcHAuZ2xvYmFscy5yZWFzb25zW3pdLnJlYXNvbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICsgKEFwcC5nbG9iYWxzLnNob3dSdWxlcyA/ICcgWycrIEFwcC5nbG9iYWxzLnJlYXNvbnNbel0uZWRpdElkICsnXScgOiAnJykKICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIChBcHAuZ2xvYmFscy5zaG93Q291bnRzID8gKChBcHAuZ2xvYmFscy5yZWFzb25zW3pdLmNvdW50ID4gMSkgPyAnICgnK0FwcC5nbG9iYWxzLnJlYXNvbnNbel0uY291bnQrJyknIDogJycpIDogJycpICk7CiAgICAgICAgICAgICAgICBBcHAuZ2xvYmFscy5jaGFuZ2VzICs9IEFwcC5nbG9iYWxzLnJlYXNvbnNbel0uY291bnQ7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHZhciByZWFzb25TdHIgPSByZWFzb25zLmxlbmd0aCA/IHJlYXNvbnMuam9pbignOyAnKSsnLicgOiAnJzsgIC8vIFVuaXF1ZSByZWFzb25zIHNlcGFyYXRlZCBieSA7IGFuZCB0ZXJtaW5hdGVkIGJ5IC4KCiAgICAgICAgICAgIGlmICghZGF0YS5oYXNPd25Qcm9wZXJ0eSgnc3VtbWFyeU9yaWcnKSkgZGF0YS5zdW1tYXJ5T3JpZyA9IGRhdGEuc3VtbWFyeS50cmltKCkgLy8gUmVtZW1iZXIgb3JpZ2luYWwgc3VtbWFyeQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyhbXjtdKVsuPyE6XT8kLywiJDE7Iik7CiAgICAgICAgICAgIGlmIChkYXRhLnN1bW1hcnlPcmlnLmxlbmd0aCkKICAgICAgICAgICAgICAgIGRhdGEuc3VtbWFyeU9yaWcgPSBkYXRhLnN1bW1hcnlPcmlnICsgJyAnOwogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICByZWFzb25TdHIgPSByZWFzb25TdHIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyByZWFzb25TdHIuc2xpY2UoMSk7ICAvLyBDYXAgZmlyc3QgbGV0dGVyLgoKICAgICAgICAgICAgZGF0YS5zdW1tYXJ5ID0gZGF0YS5zdW1tYXJ5T3JpZyArIHJlYXNvblN0cjsKICAgICAgICAgICAgLy8gTGltaXQgc3VtbWFyeSB0byAzMDAgY2hhcnMKICAgICAgICAgICAgaWYgKGRhdGEuc3VtbWFyeS5sZW5ndGggPiAzMDApIGRhdGEuc3VtbWFyeSA9IGRhdGEuc3VtbWFyeS5zdWJzdHIoMCwzMDAtMykgKyAnLi4uJzsKCiAgICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgIH07ICAgCiAgICAgICAgCiAgICAgICAgLy8gUG9wdWxhdGUgdGhlIGRpZmYKICAgICAgICBBcHAucGlwZU1vZHMuZGlmZiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5kaWZmLmVtcHR5KCkuYXBwZW5kKCc8ZGl2IGNsYXNzPSJkaWZmdGl0bGUiPicgKyBBcHAuZnVuY3MuZGlmZihBcHAub3JpZ2luYWxzLnRpdGxlLCBBcHAuaXRlbXMudGl0bGUsIHRydWUpICsgJzwvZGl2PicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPSJkaWZmYm9keSI+JyArIEFwcC5waXBlTW9kcy5yZXBsYWNlKHtib2R5OkFwcC5mdW5jcy5kaWZmKEFwcC5vcmlnaW5hbHMuYm9keSwgQXBwLml0ZW1zLmJvZHkpfSwgdHJ1ZSkuYm9keSArICc8L2Rpdj4nKTsKICAgICAgICAgICAgQXBwLmZ1bmNzLnNob3dEaWZmKCk7CiAgICAgICAgfQoKICAgICAgICAvLyBSZXBsYWNlIHRoZSBwcmV2aW91c2x5IG9taXR0ZWQgY29kZQogICAgICAgIEFwcC5waXBlTW9kcy5yZXBsYWNlID0gZnVuY3Rpb24oZGF0YSwgbGl0ZXJhbCkgewogICAgICAgICAgICBpZiAoIWRhdGEuYm9keSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBmb3IgKHZhciB0eXBlIGluIEFwcC5nbG9iYWxzLmNoZWNrc3IpIHsKICAgICAgICAgICAgICAgIHZhciBpID0gMDsKICAgICAgICAgICAgICAgIGRhdGEuYm9keSA9IGRhdGEuYm9keS5yZXBsYWNlKEFwcC5nbG9iYWxzLnBsYWNlSG9sZGVyQ2hlY2tzW3R5cGVdLCBmdW5jdGlvbihtYXRjaCkgewogICAgICAgICAgICAgICAgICAgIHZhciByZXBsYWNlID0gQXBwLmdsb2JhbHMucmVwbGFjZWRTdHJpbmdzW3R5cGVdW2krK107CiAgICAgICAgICAgICAgICAgICAgaWYobGl0ZXJhbCAmJiAvYmxvY2t8bHNlYy8udGVzdCh0eXBlKSkgeyAKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFmdGVyID0gcmVwbGFjZS5yZXBsYWNlKC9eXG5cbi8sJycpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJlcGVuZCA9IGFmdGVyICE9PSByZXBsYWNlID8gJzxzcGFuIGNsYXNzPSJhZGQiPlxuXG48L3NwYW4+PHNwYW4gY2xhc3M9ImRlbCI+YDwvc3Bhbj4nIDogJyc7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcHBlbmQgID0gYWZ0ZXIgIT09IHJlcGxhY2UgPyAnPHNwYW4gY2xhc3M9ImRlbCI+YDwvc3Bhbj4nIDogJyc7CiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrbGFzcyAgID0gL2xzZWMvLnRlc3QodHlwZSkgPyAnIGNsYXNzPSJsYW5nLW5vbmUgcHJldHR5cHJpbnQgcHJldHR5cHJpbnRlZCInIDogJyc7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcmVwZW5kICsgJzxwcmUnICsga2xhc3MgKyAnPjxjb2RlPicgKyBhZnRlci5yZXBsYWNlKC88L2csJyZsdDsnKS5yZXBsYWNlKC9eICAgIC9nbSwnJykgKyAnPC9jb2RlPjwvcHJlPicgKyBhcHBlbmQ7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIGlmKGxpdGVyYWwgJiYgL3F1b3RlLy50ZXN0KHR5cGUpKSByZXR1cm4gJzxibG9ja3F1b3RlPicgKyByZXBsYWNlLnJlcGxhY2UoLzwvZywnJmx0OycpLnJlcGxhY2UoL14+L2dtLCcnKSArICc8L2Jsb2NrcXVvdGU+JzsKICAgICAgICAgICAgICAgICAgICBpZihsaXRlcmFsKSByZXR1cm4gJzxjb2RlPicgKyByZXBsYWNlLnJlcGxhY2UoLzwvZywnJmx0OycpLnJlcGxhY2UoLyg/Ol5gfGAkKS9nLCcnKSArICc8L2NvZGU+JzsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVwbGFjZTsKICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9CiAgICAgICAgICAgIHJldHVybiBkYXRhOwogICAgICAgIH07CiAgICAgICAgCiAgICAgICAgLy8gSGFuZGxlIHBpcGUgb3V0cHV0CiAgICAgICAgQXBwLnBpcGVNb2RzLm91dHB1dCA9IGZ1bmN0aW9uKGRhdGEpIHsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMudGl0bGUudmFsKGRhdGEudGl0bGUpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5ib2R5LnZhbChkYXRhLmJvZHkucmVwbGFjZSgvXG57Myx9LywnXG5cbicpKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuc3VtbWFyeS52YWwoZGF0YS5zdW1tYXJ5KTsKICAgICAgICAgICAgQXBwLmdsb2JhbHMucm9vdC5maW5kKCcuYWN0dWFsLWVkaXQtb3ZlcmxheScpLnJlbW92ZSgpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5zdW1tYXJ5LmNzcyh7b3BhY2l0eToxfSk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmJ1dHRvbkluZm8udGV4dChBcHAuZ2xvYmFscy5jaGFuZ2VzKS5zaG93KCk7CiAgICAgICAgICAgIFN0YWNrRXhjaGFuZ2UuTWFya2Rvd25FZGl0b3IucmVmcmVzaEFsbFByZXZpZXdzKCk7CiAgICAgICAgfTsKCiAgICAgICAgLy8gSW5pdCBhcHAKICAgICAgICBBcHAuaW5pdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgY291bnQgPSAwOwogICAgICAgICAgICB2YXIgdG9vbGJhcmNoayA9IHNldEludGVydmFsKGZ1bmN0aW9uKCl7CiAgICAgICAgICAgICAgICBpZigrK2NvdW50ID09PSAxMCkgY2xlYXJJbnRlcnZhbCh0b29sYmFyY2hrKTsKICAgICAgICAgICAgICAgIGlmKCFBcHAuZ2xvYmFscy5yb290LmZpbmQoJy53bWQtYnV0dG9uLXJvdycpLmxlbmd0aCkgcmV0dXJuOwogICAgICAgICAgICAgICAgY2xlYXJJbnRlcnZhbCh0b29sYmFyY2hrKTsKICAgICAgICAgICAgICAgIEFwcC5mdW5jcy5wb3BTZWxlY3Rpb25zKCk7CiAgICAgICAgICAgICAgICBBcHAuZnVuY3MuY3JlYXRlQnV0dG9uKCk7CiAgICAgICAgICAgIH0sIDEwMCk7CiAgICAgICAgICAgIHJldHVybiBBcHA7CiAgICAgICAgfTsKCiAgICAgICAgcmV0dXJuIEFwcC5pbml0KCk7CiAgICB9CiAgICB0cnkgewogICAgICAgIHZhciB0ZXN0ID0gd2luZG93LmxvY2F0aW9uLmhyZWYubWF0Y2goLy5wb3N0cy4oXGQrKS5lZGl0Lyk7CiAgICAgICAgaWYodGVzdCkgZXh0ZW5kRWRpdG9yKCQoJ2Zvcm1bYWN0aW9uXj0iL3Bvc3RzLycgKyB0ZXN0WzFdICsgJyJdJykpOwogICAgICAgIGVsc2UgJChkb2N1bWVudCkuYWpheENvbXBsZXRlKGZ1bmN0aW9uKCkgeyAKICAgICAgICAgICAgdGVzdCA9IGFyZ3VtZW50c1syXS51cmwubWF0Y2goL3Bvc3RzLihcZCspLmVkaXQtaW5saW5lLyk7CiAgICAgICAgICAgIGlmKCF0ZXN0KSB7CiAgICAgICAgICAgICAgICB0ZXN0ID0gYXJndW1lbnRzWzJdLnVybC5tYXRjaCgvcmV2aWV3LmlubGluZS1lZGl0LXBvc3QvKTsKICAgICAgICAgICAgICAgIGlmKCF0ZXN0KSByZXR1cm47CiAgICAgICAgICAgICAgICB0ZXN0ID0gYXJndW1lbnRzWzJdLmRhdGEubWF0Y2goL2lkPShcZCspLyk7CiAgICAgICAgICAgICAgICBpZighdGVzdCkgcmV0dXJuOwogICAgICAgICAgICB9CiAgICAgICAgICAgIGV4dGVuZEVkaXRvcigkKCdmb3JtW2FjdGlvbl49Ii9wb3N0cy8nICsgdGVzdFsxXSArICciXScpKTsKICAgICAgICB9KTsKICAgICAgICBpZigkKCcjcG9zdC1mb3JtJykubGVuZ3RoKSAkKCcjcG9zdC1mb3JtJykuZWFjaChmdW5jdGlvbigpeyBleHRlbmRFZGl0b3IoJCh0aGlzKSk7IH0pOwogICAgICAgIC8vIFRoaXMgaXMgdGhlIHN0eWxpbmcgZm9yIHRoZSBkaWZmIG91dHB1dC4KICAgICAgICAkKCdib2R5JykuYXBwZW5kKCc8c3R5bGU+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnLmRpZmZ0aXRsZSB7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIGNvbG9yOiByZ2IoMzQsIDM0LCAzNCk7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIGZvbnQtc2l6ZTogMjRweDsnICsKICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgZm9udC13ZWlnaHQ6IG5vcm1hbDsnICsKICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgbGluZS1oZWlnaHQ6IDM2cHg7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIG1hcmdpbi1ib3R0b206IDEycHg7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnfScgKwogICAgICAgICAgICAgICAgICAgICAgICAgJy5kaWZmYm9keSB7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIHdoaXRlLXNwYWNlOiBwcmUtd3JhcDsnICsKICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgZm9udC1mYW1pbHk6ICJjb3VyaWVyIG5ldyIsICJsdWNpZGEgc2FucyB0eXBld3JpdGVyIiwgbW9ubywgbW9ub3NwYWNlJyArIAogICAgICAgICAgICAgICAgICAgICAgICAgJ30nICsKICAgICAgICAgICAgICAgICAgICAgICAgICcuYWRkIHsnICsKICAgICAgICAgICAgICAgICAgICAgICAgICcgICAgYmFja2dyb3VuZDogI0NGQzsnICsKICAgICAgICAgICAgICAgICAgICAgICAgICd9JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnLmRlbCB7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIGJhY2tncm91bmQ6ICNGQ0M7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnfScgKwogICAgICAgICAgICAgICAgICAgICAgICAgJzwvc3R5bGU+Jyk7CiAgICB9IGNhdGNoIChlKSB7CiAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICB9Cn0pKCk7CgovKiAKICAqIFRvIFRpdGxlIENhc2UgMi4xIOKAkyBodHRwOi8vaW5kaXZpZGVkLmNvbS9jb2RlL3RvLXRpdGxlLWNhc2UvCiAgKiBDb3B5cmlnaHQgwqkgMjAwOOKAkzIwMTMgRGF2aWQgR291Y2guIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4KICovCgpTdHJpbmcucHJvdG90eXBlLnRvVGl0bGVDYXNlID0gZnVuY3Rpb24oKXsKICB2YXIgc21hbGxXb3JkcyA9IC9eKGF8YW58YW5kfGFzfGF0fGJ1dHxieXxlbnxmb3J8aWZ8aW58bm9yfG9mfG9ufG9yfHBlcnx0aGV8dG98dnM/XC4/fHZpYSkkL2k7CgogIHJldHVybiB0aGlzLnJlcGxhY2UoL1tBLVphLXowLTlcdTAwQzAtXHUwMEZGXStbXlxzLV0qL2csIGZ1bmN0aW9uKG1hdGNoLCBpbmRleCwgdGl0bGUpewogICAgaWYgKGluZGV4ID4gMCAmJiBpbmRleCArIG1hdGNoLmxlbmd0aCAhPT0gdGl0bGUubGVuZ3RoICYmCiAgICAgIG1hdGNoLnNlYXJjaChzbWFsbFdvcmRzKSA+IC0xICYmIHRpdGxlLmNoYXJBdChpbmRleCAtIDIpICE9PSAiOiIgJiYKICAgICAgKHRpdGxlLmNoYXJBdChpbmRleCArIG1hdGNoLmxlbmd0aCkgIT09ICctJyB8fCB0aXRsZS5jaGFyQXQoaW5kZXggLSAxKSA9PT0gJy0nKSAmJgogICAgICB0aXRsZS5jaGFyQXQoaW5kZXggLSAxKS5zZWFyY2goL1teXHMtXS8pIDwgMCkgewogICAgICByZXR1cm4gbWF0Y2gudG9Mb3dlckNhc2UoKTsKICAgIH0KCiAgICBpZiAobWF0Y2guc3Vic3RyKDEpLnNlYXJjaCgvW0EtWl18XC4uLykgPiAtMSkgewogICAgICByZXR1cm4gbWF0Y2g7CiAgICB9CgogICAgcmV0dXJuIG1hdGNoLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbWF0Y2guc3Vic3RyKDEpOwogIH0pOwp9OwoKLy8gRnJvbSBodHRwczovL2dpdGh1Yi5jb20vRWFtb25OZXJib25uZS9hLXZzLWFuCnZhciBBdnNBblNpbXBsZT1mdW5jdGlvbihuKXtmdW5jdGlvbiBpKG4pe3ZhciByPXBhcnNlSW50KHQsMzYpfHwwLGY9ciYmci50b1N0cmluZygzNikubGVuZ3RoLHUsZTtmb3Iobi5hcnRpY2xlPXRbZl09PSIuIj8iYSI6ImFuIix0PXQuc3Vic3RyKDErZiksdT0wO3U8cjt1KyspZT1uW3RbMF1dPXt9LHQ9dC5zdWJzdHIoMSksaShlKX12YXIgdD0iMmguIzIuYTtpOyYxLk47KjQuYTtlO2k7bzsvOS5hO2U7aDEuby5pO2wxLi87bjEuby5vO3IxLmUuczEuLzswMS44OzEyLjFhOzAxLjA7MTIuODs5OzIuMzEuNzs0LjUuNi43LjguOS44YTswYS4wOzE7MjszOzQ7NTs2Ozc7ODs5OzExOyAuMjI7IC7igJMuMzE7IC40MjsgLuKAky41NTsgLiwuaC5rLm0uNjI7IC5rLjcyOyAu4oCTLjgyOyAuLC45MjsgLuKAky44OzwyLm0xLmQ7bzs9MS49MS5FO0A7QTY7QTE7QTEuUztpMTtyMTtvLm0xO2ExO3IxOyAubjE7ZDE7YTE7bDE7dTE7YzEuaTEuYTEubjtzMTt0MTt1MTtyMTtpMTthMTtzLnQxO2gxO2wxO2UxO3QxO2UxLnM7QjIuaDIuYTEuaTE7cjE7YS7DoTtvMS5yMS5kMS4gO0MzLmExLmkxLnMxLnMuaDQuYTIuaTEuczE7ZS5vMS5pO2wxLsOhO3IxLm8xLsOtO3UyLmk7cjEucjEuYTtvMS5uMS5nMS5qO0Q3LmExLm8xLnE7aTIubjEuYTEucztvMS50O3UxLmExLmwxLmM7w6ExLiA7w7I7w7k7xrA7RTc7VTE7Ui5iMTtvMTtsMTtpLm0xO3AxO2UxO3oubjE7YTE7bS5zMTtwNS5hMS5jO2U7aDtvO3I7dTEubDE7by53MTtpLkYxMS4gOyw7LjsvOzA7MTsyOzM7NDs1OzY7NzEuMC44Ozk7QWU7Qi5DLkQuRi5JMi5MLlIuSy5MLk0uTi5QLlEuUi5TLlQuQjtDMTtNLkQ7RTIuQztJO0YxO3IuSDtJMy5BMTtULlIxLiA7VTtKO0wzLkM7TjtQO007TzEuIDtQMTsuLlIyLkExLiA7UztTO1QxO1MuVTIuLDsuO1g7WTE7Vi5jO2YxLm8uaDvPgztHNy5lMS5yMS5uMS5lO2gxLmEzLmU7aTtvO2kxLmExLm4xLmc7bzIuZjEuIDt0MS50MS4gO3IxLmkxLmE7dzEuYTEucjEucjvDujtIcy4gOyY7LDsuMjtBLkkuMTsyOzM7NTs3O0IxO1AuQztEO0Y7RztIMTtJLkk2O0MuRy5OLlAuUzEuRDtULksxLjk7TDtNMTsuLk47TzIuIDtWO1A7UjE7VC5TMS5GLlQ7VjtlMi5pMS5yO3IxLnIxLm47bzIubjY7ZC5lMS5zO2cuay5vMjtsLnIxO2kxLmY7di51MS5yO0kzO0kyOyouSS5uMTtkMTtlMTtwMTtlMTtuMTtkMjtlMTtuMTtjMTtpLsOqLnMxO2wxO2ExO24xO2QxO3MuSjEuaTEuYTEubztMeS4gOyw7LjsxOzI7Mzs0Ozg7QTMuIDtQO1g7QjtDO0Q7RTIuIDtEO0YxO1QuRztIMS5ELkkxLlI7TDtNO047UDtSO1MxO20uVDtVMS4gO1YxO0MuVzEuVDtaO147YTEubzEuaTEuZztvMS5jMS5oMS5hMTtiLnA7dTEuczEuaDE7by7hu5k7TTE1LiA7JjssOy4xO0ExOy4xO1MuLzsxOzI7Mzs0OzU7Njs3Ozg7QWk7Qi5DLkQuRi5HLkouTC5NLk4uUC5SLlMuVC5WLlcuWC5ZLlouQjE7UzE7VC5DO0Q7RTMuUDE7Uy5XO247RjtHO0g7STQuIDs1OzY7VDE7TS5LO0w7TTtOO08xLlU7UDtRO1I7UztUMTtSLlUyLiA7VjtWO1g7YjEudTEubTtmO2g7bzIuRDEuZS5VMTsuLnAxLjM7czEuYztOeS4gOys7LjEuRS40Ozc7ODs6O0EzLkExO0YuSTtTMS5MO0I7QztEO0UzLkE7SDtTMS4gO0YxO1UuRztIO0k3LkMuRDEuIDtLLkwuTi5PLlMuSztMO00xO00uTjIuUjtUO1AxLk8xLlYxLi8xLkI7UjI7Si5ULlMxO1cuVDE7TDEuRC5VMS5TO1Y7VzIuQTtPMS5IO1g7WTMuQzEuTDtQO1U7YTEuczEuYTEubjt0MS5oO3Y7wrI7w5c7TzU7TjE7RS5sMTt2Lm4yO2MxLmUuZTEuaTtvMTtwLnUxO2kuUDEuaDIuaTEuYTtvMi5iMjtpLm8uaTtRMS5pMS5uMS5nMS54O1J6LiA7JjssOy4xO0ouLzsxOzQ7NjtBMy4gOy47RjE7VC5CMTtSLkM7RDtFMy4gO1MxLlA7VTtGO0c7SDEuUztJMi5BO0MxLiA7SjtLO0wxO1AuTTU7MS4yLjMuNS42Lk47TzIuSDtUMjtBLk8uUDtRO1IxO0YuUzQ7LC4uLj8uVC5UO1U0O0IuTS5OLlMuVjtYO2M7ZjE7TTEuLi5oMi5BO0I7w7I7UzExLiA7JjssOy40LkU7TTtPO1QxLi4zLkI7RDtNOzE7Mzs0OzU7Njs4Ozk7QTMuIDs4O1MyO0UuSS5CO0MzLkExLiA7UjIuQS5VLlQ7RDtFNi4gOzU7QzM7QS5PLlIuSTEuRi5PO1U7RjM7Ji5ILk8xLlMuRzE7RC5IMy4yOzM7TDtJMi4gO1MxLk8uSzIuSS5ZLkwzO0EyLiA7LjtJMS4gO08uTTM7QTEuIDtJLlUxLlIuTjUuQS5DMy5BLkIuQy5FLkYuTy5PNS4gO0ExLkk7RTtTMTtVLlY7UDc7QTc7QS5DLkQuTS5OLlIuUy5FMS4gO0k0O0MuRC5OLlIuTDE7Ty5PLlUuWS5RMS4gO1I7UzE7Vy5UOS5BMS4gO0M7RDtGO0k7TDtNO1M7VjtVNy5CLkwuTS5OLlAuUi5TLlY7VzEuUjtYMS5NO2gxLmkxLmcxLmExLm87cDEuaTEubzE7bi50Mi5CO2kxLmMxLmk7VDQuYTIuaTIuZzEuYS5zMS5jO3YxLmUxLnM7ZTEuYTEubTEucDt1MS5pMi5sO3I7w6A7VW0uLjEuTjEuLjEuQzsvMS4xOzExLiAuMjEuMTtMMS5UO00xLk47TjQuQzEuTDtEMi4gLlAuSztSMS4gLmE7YjI7YS5pLmQ7ZzEubDtpMS5nLmwyO2kueS5tO25vLiA7YTEubi5iO2M7ZDtlMTtzLmY7ZztoO2kyLmQ7bjtqO2s7bDttO247bztwO3E7cjtzO3Q7dTt2O3c7cDtyMzthLmUudTEuaztzMy4gO2g7dDE7ci50NC5oO247cjt0O3g7ejvDrTtXMi5QMS46NC5BMS5GO0kyLkI7TjEuSC5PMS5WO1IxLkYxLkMyLk4uVS5pMS5rMS5pMS5FMS5sMS5pO1g3O2EuZS5oLmkuby51LnkuWTMuZTEudDEuaDtwO3M7WzUuQTtFO0k7YTtlO18yLl8xLmk7ZTtgMy5hO2U7aTthNzsgLm0xO2ExO3IxLiAubjE7ZDI7IC7Emy5wMTtyMTt0LnIxO3QxO8OtLnUxO3MxO3MxO2kxLiAudjE7dTE7dC5kMy5hMS5zMS4gO2UyLm0xLiA7cjEuIDtpMi5jMS5oMS4gO2UxLnMxLmUyLm07cjtlODtjMTtvMTtuMTtvMTttMTtpMTthLmUxO3cubDE7aTE7dDE7ZTE7aS5tMTtwMTtlMTt6Lm4xO3QxO2UxO24xO2QuczI7YTEuIC50NDthMTsgLmUxOyAuaTE7bTE7YTE7ci5yMTt1MS50LnUxLnAxLiA7dy5mMy4gO007eTEuaTtoOS4gOyw7LjtDO2ExLnUxLnQxO2IuZTIuaTEucjE7YS5yMS5tMS5hMS5uO280Lm0yLmExOyAubTtuODsgLmIuZC5lMzsgLmQueS5nLmkuay52LnIxLnMxLiA7dTEucjtyMS4gO3QxO3QxO3AxOzouaTY7YjE7bi5lMTtyLm4yO2YyO2wxO3UxO8OqLm8xO2EuczE7dDE7YTE7bDE7YS5yMTsgLnMxOyAudS5rMS51MS4gO2wzLmMxLmQ7czEuIDt2MS5hO21hLiA7LDtSO2IxLmEuZTEuaTEubjtmO3A7dDEuYS51MS5sMS50MS5pMS5jMS5hMS5tMS5wMS5pO8OXO242LiA7VjtXO2QxOyAudDvDlztvODtjMjtoMTtvLnUxO3AuZDE7ZDE7eS5mMTsgLmcxO2cxO2kubm8uIDsnOyw7LzthO2I7YzEubztkO2UyLmk7cjtmO2c7aTtsO207bjtvO3I7czt0O3U7dzt5O3o74oCTO3IxO2kxO2cxO2UudDE7cjEuczt1MTtpLnIzLiA7JjtmO3M5Liw7PztSO2YyLmUuby5pMS5jMS5oO2wxLiA7cDIuMztpMS4gO3IxLmc7djMuYS5lLmkudDIuQTtTO3VjOyAuLi5iMi5lO2w7Zi5rMi5hO2k7bTE7YTEuIC5uMzthMzsgLm41LmE7YztuO3M7dDtyMTt5LmUyOyAuaS5pOC5jMi5vMS5yMS5wO3UxLm07ZDE7aTEubztnMS5uO2wxLmw7bTE7by5uO3MxLnM7djEubzE7Yy5yNTthLmUuaS5sLm8uczMuIDtoO3UxLnIyO2UucDM7YS5lLmkudDIubTt0O3YudzEuYTt4Yi4gOyc7LDsuOzg7YjtrO2w7bTE7YS50O3kxLiA7eTEubDt7MS5hO3wxLmE7wqMxLjg7w4A7w4E7w4Q7w4U7w4Y7w4k7w5I7w5M7w5Y7w5w7w6A7w6E7w6Y7w6g7w6kxO3QzLmE7bzt1O8OtO8O2O8O8MTsgLsSAO8SBO8SrO8SwO8WMO8WNO8WTO86pO86xO861O8+JO8+1O9C1O+KAkzIuZTtpO+KEkzsiO3JldHVybiBpKG4pLHtyYXc6bixxdWVyeTpmdW5jdGlvbih0KXt2YXIgaT1uLGY9MCx1LHI7ZG8gcj10W2YrK107d2hpbGUoIlwi4oCY4oCZ4oCc4oCdJCciLmluZGV4T2Yocik+PTApO2Zvcig7Oyl7aWYodT1pLmFydGljbGV8fHUsaT1pW3JdLCFpKXJldHVybiB1O3I9dFtmKytdfHwiICJ9fX19KHt9KQoKLy8gQWRhcHRlZCBmcm9tIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzY5Njk0ODYvMTY3NzkxMgpmdW5jdGlvbiBlc2NhcGVUYWcodGFnKSB7CiAgICAvLyBTZWUgaHR0cHM6Ly9yZWdleDEwMS5jb20vci95VzljRDQvMQogICAgdmFyIHJldGFnID0gdGFnLnJlcGxhY2UoLyg/OihcLSl8KFsrLiNdKSkvZywKICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gKG1hdGNoLCBoeXBoZW4sIG90aGVyKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZCA9IChoeXBoZW4pID8gIlsgXFwtXSIgOiAiXFwiK21hdGNoOwogICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVzY2FwZWQ7CiAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgcmV0dXJuICIoPzpcXHN8XFxifCQpIiArIHJldGFnICsgIig/Olxcc3xcXGJ8JCkiOyAgLy8gaGFjayAtIGVuY2xvc2UgdGFnIGluIHJlZ2V4cCBib3VuZGFyeSBjaGVja3MuIFdCTiB0byBkbyB0aGlzIGluIHRoZSB0YWdsaXN0IHJlZ2V4cC4KfQo="},{"name":"StackOverflow close votes shortcuts","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"user_agent":"","override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["*://stackoverflow.com/review/close*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1455673142158,"data":{}},"enabled":true,"position":15,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/CloseVoteShortcuts.user.js","uuid":"42ac7242-8cfb-4405-9d6d-05bf397b31c5","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBTdGFja092ZXJmbG93IGNsb3NlIHZvdGVzIHNob3J0Y3V0cwovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9rYXBwYTcxOTQvc3RhY2tvdmVyZmxvdy1jbG9zZS12b3Rlcy1zaG9ydGN1dHMKLy8gQHZlcnNpb24gICAgICAxLjAuMgovLyBAZGVzY3JpcHRpb24gIEEgc2NyaXB0IHRvIGFkZCBrZXlib2FyZCBzaG9ydGN1dHMgdG8gU3RhY2tPdmVyZmxvdydzIGNsb3NlIHZvdGVzIHJldmlldyBxdWV1ZQovLyBAYXV0aG9yICAgICAgIEFsYmlyZW8sIHJlbmUKLy8gQG1hdGNoICAgICAgICAqOi8vc3RhY2tvdmVyZmxvdy5jb20vcmV2aWV3L2Nsb3NlKgovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09CgovKmdsb2JhbCAkOmZhbHNlICwgZG9jdW1lbnQ6ZmFsc2UsIE11dGF0aW9uT2JzZXJ2ZXI6ZmFsc2UsICAqLwooZnVuY3Rpb24gKCkgewogICAgJ3VzZSBzdHJpY3QnOwoKICAgICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgpIHsKICAgICAgICB2YXIga2V5cyA9IHsKICAgICAgICAgICAgJzEnOiA0OSwKICAgICAgICAgICAgJzInOiA1MCwKICAgICAgICAgICAgJzMnOiA1MSwKICAgICAgICAgICAgJzQnOiA1MiwKICAgICAgICAgICAgJzUnOiA1MywKICAgICAgICAgICAgJzYnOiA1NCwKICAgICAgICAgICAgJzcnOiA1NSwKICAgICAgICAgICAgJzgnOiA1NiwKICAgICAgICAgICAgJzknOiA1NywKICAgICAgICAgICAgJzAnOiA0OAogICAgICAgIH0sCiAgICAgICAgICAgIGNvbmZpZ3VyYXRpb24gPSB7CiAgICAgICAgICAgICAgICAnYWN0aW9ucyc6IHsKICAgICAgICAgICAgICAgICAgICAnbGVhdmVPcGVuJzogeyAna2V5JzogJzEnLCAndmFsdWUnOiAnOCcgfSwKICAgICAgICAgICAgICAgICAgICAnY2xvc2UnOiB7ICdrZXknOiAnMicsICd2YWx1ZSc6ICc2JyB9LAogICAgICAgICAgICAgICAgICAgICdlZGl0JzogeyAna2V5JzogJzMnLCAndmFsdWUnOiAnNScgfSwKICAgICAgICAgICAgICAgICAgICAnc2tpcCc6IHsgJ2tleSc6ICc0JywgJ3ZhbHVlJzogJzEnIH0sCiAgICAgICAgICAgICAgICAgICAgJ25leHQnOiB7ICdrZXknOiAnMCcsICd2YWx1ZSc6ICcyNTQnIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAnY2xvc2VSZWFzb25zJzogewogICAgICAgICAgICAgICAgICAgICdkdXBsaWNhdGUnOiB7ICdrZXknOiAnMScsICd2YWx1ZSc6ICdEdXBsaWNhdGUnIH0sCiAgICAgICAgICAgICAgICAgICAgJ29mZlRvcGljJzogeyAna2V5JzogJzInLCAndmFsdWUnOiAnT2ZmVG9waWMnIH0sCiAgICAgICAgICAgICAgICAgICAgJ3VuY2xlYXInOiB7ICdrZXknOiAnMycsICd2YWx1ZSc6ICdVbmNsZWFyJyB9LAogICAgICAgICAgICAgICAgICAgICd0b29Ccm9hZCc6IHsgJ2tleSc6ICc0JywgJ3ZhbHVlJzogJ1Rvb0Jyb2FkJyB9LAogICAgICAgICAgICAgICAgICAgICdvcGluaW9uQmFzZWQnOiB7ICdrZXknOiAnNScsICd2YWx1ZSc6ICdPcGluaW9uQmFzZWQnIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICAnb2ZmVG9waWNSZWFzb25zJzogewogICAgICAgICAgICAgICAgICAgICdzdXBlclVzZXInOiB7ICdrZXknOiAnMScsICd2YWx1ZSc6ICc0JyB9LAogICAgICAgICAgICAgICAgICAgICdzZXJ2ZXJGYXVsdCc6IHsgJ2tleSc6ICcyJywgJ3ZhbHVlJzogJzcnIH0sCiAgICAgICAgICAgICAgICAgICAgJ3JlY29tbWVuZCc6IHsgJ2tleSc6ICczJywgJ3ZhbHVlJzogJzE2JyB9LAogICAgICAgICAgICAgICAgICAgICdtaW5pbWFsUHJvZ3JhbSc6IHsgJ2tleSc6ICc0JywgJ3ZhbHVlJzogJzEzJyB9LAogICAgICAgICAgICAgICAgICAgICd0eXBvJzogeyAna2V5JzogJzUnLCAndmFsdWUnOiAnMTEnIH0sCiAgICAgICAgICAgICAgICAgICAgJ21pZ3JhdGlvbic6IHsgJ2tleSc6ICc2JywgJ3ZhbHVlJzogJzInIH0sCiAgICAgICAgICAgICAgICAgICAgJ290aGVyJzogeyAna2V5JzogJzcnLCAndmFsdWUnOiAnMycgfQogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICdtaWdyYXRpb25SZWFzb25zJzogewogICAgICAgICAgICAgICAgICAgICdtZXRhJzogeyAna2V5JzogJzEnLCAndmFsdWUnOiAnbWV0YS5zdGFja292ZXJmbG93LmNvbScgfSwKICAgICAgICAgICAgICAgICAgICAnc3VwZXJVc2VyJzogeyAna2V5JzogJzInLCAndmFsdWUnOiAnc3VwZXJ1c2VyLmNvbScgfSwKICAgICAgICAgICAgICAgICAgICAndGV4JzogeyAna2V5JzogJzMnLCAndmFsdWUnOiAndGV4LnN0YWNrZXhjaGFuZ2UuY29tJyB9LAogICAgICAgICAgICAgICAgICAgICdkYmEnOiB7ICdrZXknOiAnNCcsICd2YWx1ZSc6ICdkYmEuc3RhY2tleGNoYW5nZS5jb20nIH0sCiAgICAgICAgICAgICAgICAgICAgJ3N0YXRzJzogeyAna2V5JzogJzUnLCAndmFsdWUnOiAnc3RhdHMuc3RhY2tleGNoYW5nZS5jb20nIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfTsKCiAgICAgICAgKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgdmFyIHN0YXRlcyA9IHsKICAgICAgICAgICAgICAgIGF0UXVlc3Rpb246IDEsCiAgICAgICAgICAgICAgICBhdENsb3NlUmVhc29uOiAyLAogICAgICAgICAgICAgICAgYXREdXBsaWNhdGU6IDMsCiAgICAgICAgICAgICAgICBhdE9mZlRvcGljOiA0LAogICAgICAgICAgICAgICAgYXRPdGhlclNpdGU6IDUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGVzLmF0UXVlc3Rpb247CgogICAgICAgICAgICBmdW5jdGlvbiBjbGlja0VsZW1lbnQoc2VsZWN0b3IpIHsKICAgICAgICAgICAgICAgICQoc2VsZWN0b3IpLmZvY3VzKCkuY2xpY2soKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gY2xpY2tBY3Rpb24oYWN0aW9uKSB7CiAgICAgICAgICAgICAgICBjbGlja0VsZW1lbnQoJy5yZXZpZXctYWN0aW9ucyBbZGF0YS1yZXN1bHQtdHlwZT0iJyArIGFjdGlvbiArICciXScpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjbGlja0Nsb3NlUmVhc29uKHJlYXNvbikgewogICAgICAgICAgICAgICAgY2xpY2tFbGVtZW50KCdbbmFtZT0iY2xvc2UtcmVhc29uIl1bdmFsdWU9IicgKyByZWFzb24gKyAnIl0nKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gY2xpY2tPZmZUb3BpY1JlYXNvbihyZWFzb24pIHsKICAgICAgICAgICAgICAgIGNsaWNrRWxlbWVudCgnW25hbWU9ImNsb3NlLWFzLW9mZi10b3BpYy1yZWFzb24iXVt2YWx1ZT0iJyArIHJlYXNvbiArICciXScpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjbGlja090aGVyU2l0ZShzaXRlKSB7CiAgICAgICAgICAgICAgICBjbGlja0VsZW1lbnQoJ1tuYW1lPSJtaWdyYXRpb24iXVt2YWx1ZT0iJyArIHNpdGUgKyAnIl0nKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gcmVzZXRTdGF0ZSgpIHsKICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGVzLmF0UXVlc3Rpb247CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGFjdGlvbkhhbmRsZXIoa2V5KSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5sZWF2ZU9wZW4ua2V5XToKICAgICAgICAgICAgICAgICAgICBjbGlja0FjdGlvbihjb25maWd1cmF0aW9uLmFjdGlvbnMubGVhdmVPcGVuLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICByZXNldFN0YXRlKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5hY3Rpb25zLmNsb3NlLmtleV06CiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZXMuYXRDbG9zZVJlYXNvbjsKICAgICAgICAgICAgICAgICAgICBjbGlja0FjdGlvbihjb25maWd1cmF0aW9uLmFjdGlvbnMuY2xvc2UudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5lZGl0LmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tBY3Rpb24oY29uZmlndXJhdGlvbi5hY3Rpb25zLmVkaXQudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIHJlc2V0U3RhdGUoKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Uga2V5c1tjb25maWd1cmF0aW9uLmFjdGlvbnMuc2tpcC5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrQWN0aW9uKGNvbmZpZ3VyYXRpb24uYWN0aW9ucy5za2lwLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICByZXNldFN0YXRlKCk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5hY3Rpb25zLm5leHQua2V5XToKICAgICAgICAgICAgICAgICAgICBjbGlja0FjdGlvbihjb25maWd1cmF0aW9uLmFjdGlvbnMubmV4dC52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgcmVzZXRTdGF0ZSgpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBjbG9zZVJlYXNvbkhhbmRsZXIoa2V5KSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLmR1cGxpY2F0ZS5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrQ2xvc2VSZWFzb24oY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMuZHVwbGljYXRlLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHN0YXRlcy5hdER1cGxpY2F0ZTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Uga2V5c1tjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy5vZmZUb3BpYy5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrQ2xvc2VSZWFzb24oY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMub2ZmVG9waWMudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGVzLmF0T2ZmVG9waWM7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMudW5jbGVhci5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrQ2xvc2VSZWFzb24oY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMudW5jbGVhci52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMudG9vQnJvYWQua2V5XToKICAgICAgICAgICAgICAgICAgICBjbGlja0Nsb3NlUmVhc29uKGNvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLnRvb0Jyb2FkLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Uga2V5c1tjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy5vcGluaW9uQmFzZWQua2V5XToKICAgICAgICAgICAgICAgICAgICBjbGlja0Nsb3NlUmVhc29uKGNvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLm9waW5pb25CYXNlZC52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIG9mZlRvcGljSGFuZGxlcihrZXkpIHsKICAgICAgICAgICAgICAgIHN3aXRjaCAoa2V5KSB7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMuc3VwZXJVc2VyLmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5zdXBlclVzZXIudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLnNlcnZlckZhdWx0LmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5zZXJ2ZXJGYXVsdC52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMucmVjb21tZW5kLmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5yZWNvbW1lbmQudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLm1pbmltYWxQcm9ncmFtLmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5taW5pbWFsUHJvZ3JhbS52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMudHlwby5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrT2ZmVG9waWNSZWFzb24oY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMudHlwby52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMubWlncmF0aW9uLmtleV06CiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSBzdGF0ZXMuYXRPdGhlclNpdGU7CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5taWdyYXRpb24udmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLm90aGVyLmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPZmZUb3BpY1JlYXNvbihjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5vdGhlci52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIG90aGVyU2l0ZUhhbmRsZXIoa2V5KSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKGtleSkgewogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5tZXRhLmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPdGhlclNpdGUoY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLm1ldGEudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5zdXBlclVzZXIua2V5XToKICAgICAgICAgICAgICAgICAgICBjbGlja090aGVyU2l0ZShjb25maWd1cmF0aW9uLm1pZ3JhdGlvblJlYXNvbnMuc3VwZXJVc2VyLnZhbHVlKTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Uga2V5c1tjb25maWd1cmF0aW9uLm1pZ3JhdGlvblJlYXNvbnMudGV4LmtleV06CiAgICAgICAgICAgICAgICAgICAgY2xpY2tPdGhlclNpdGUoY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLnRleC52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIGtleXNbY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLmRiYS5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrT3RoZXJTaXRlKGNvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5kYmEudmFsdWUpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBrZXlzW2NvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5zdGF0cy5rZXldOgogICAgICAgICAgICAgICAgICAgIGNsaWNrT3RoZXJTaXRlKGNvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5zdGF0cy52YWx1ZSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGtleUhhbmRsZXIoa2V5KSB7CiAgICAgICAgICAgICAgICBzd2l0Y2ggKHN0YXRlKSB7CiAgICAgICAgICAgICAgICBjYXNlIHN0YXRlcy5hdFF1ZXN0aW9uOgogICAgICAgICAgICAgICAgICAgIGFjdGlvbkhhbmRsZXIoa2V5KTsKICAgICAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICAgIGNhc2Ugc3RhdGVzLmF0Q2xvc2VSZWFzb246CiAgICAgICAgICAgICAgICAgICAgY2xvc2VSZWFzb25IYW5kbGVyKGtleSk7CiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIHN0YXRlcy5hdE9mZlRvcGljOgogICAgICAgICAgICAgICAgICAgIG9mZlRvcGljSGFuZGxlcihrZXkpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSBzdGF0ZXMuYXRPdGhlclNpdGU6CiAgICAgICAgICAgICAgICAgICAgb3RoZXJTaXRlSGFuZGxlcihrZXkpOwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9CgogICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnI3BvcHVwLWNsb3NlLXF1ZXN0aW9uIC5wb3B1cC1jbG9zZSBhJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgcmVzZXRTdGF0ZSgpOwogICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICQoZG9jdW1lbnQpLm9uKCdjbGljaycsICcjcG9wdXAtY2xvc2UtcXVlc3Rpb24gLnBvcHVwLXN1Ym1pdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgIHJlc2V0U3RhdGUoKTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAkKGRvY3VtZW50KS5vbigna2V5dXAnLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICAgICAgaWYgKGUua2V5Q29kZSA9PT0gMjcpIHsKICAgICAgICAgICAgICAgICAgICByZXNldFN0YXRlKCk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuOwogICAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICAgIGlmICgoZS50YXJnZXQudGFnTmFtZSA9PT0gJ0lOUFVUJyAmJiBlLnRhcmdldC50eXBlID09PSAndGV4dCcpIHx8IGUudGFyZ2V0LnRhZ05hbWUgPT09ICdURVhUQVJFQScpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm47CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIC8vIG51bXBhZCBoYW5kbGluZwogICAgICAgICAgICAgICAgaWYgKChlLmtleUNvZGUgPiA5NSkgJiYgKGUua2V5Q29kZSA8IDEwNikpIHsKICAgICAgICAgICAgICAgICAgICBlLmtleUNvZGUgPSBlLmtleUNvZGUgLSA0ODsgCiAgICAgICAgICAgICAgICB9CgogICAgICAgICAgICAgICAga2V5SGFuZGxlcihlLmtleUNvZGUpOwogICAgICAgICAgICB9KTsKICAgICAgICB9KCkpOwoKICAgICAgICAoZnVuY3Rpb24gKCkgewogICAgICAgICAgICB2YXIgbG9va3VwID0geyB9LCBvYnNlcnZlcjsKICAgICAgICAgICAgbG9va3VwW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5sZWF2ZU9wZW4udmFsdWVdID0gY29uZmlndXJhdGlvbi5hY3Rpb25zLmxlYXZlT3Blbi5rZXk7CiAgICAgICAgICAgIGxvb2t1cFtjb25maWd1cmF0aW9uLmFjdGlvbnMuY2xvc2UudmFsdWVdID0gY29uZmlndXJhdGlvbi5hY3Rpb25zLmNsb3NlLmtleTsKICAgICAgICAgICAgbG9va3VwW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5lZGl0LnZhbHVlXSA9IGNvbmZpZ3VyYXRpb24uYWN0aW9ucy5lZGl0LmtleTsKICAgICAgICAgICAgbG9va3VwW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5za2lwLnZhbHVlXSA9IGNvbmZpZ3VyYXRpb24uYWN0aW9ucy5za2lwLmtleTsKICAgICAgICAgICAgbG9va3VwW2NvbmZpZ3VyYXRpb24uYWN0aW9ucy5uZXh0LnZhbHVlXSA9IGNvbmZpZ3VyYXRpb24uYWN0aW9ucy5uZXh0LmtleTsKCiAgICAgICAgICAgIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24gKG11dGF0aW9ucykgewogICAgICAgICAgICAgICAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKG11dGF0aW9uKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGksIGosIG5vZGU7CiAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gMCwgaiA9IG11dGF0aW9uLmFkZGVkTm9kZXMubGVuZ3RoOyBpIDwgajsgaSA9IGkgKyAxKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUgPSAkKG11dGF0aW9uLmFkZGVkTm9kZXNbaV0pOwogICAgICAgICAgICAgICAgICAgICAgICBpZiAobm9kZS5wcm9wKCd0YWdOYW1lJykgPT09ICdJTlBVVCcgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnByb3AoJ3R5cGUnKSA9PT0gJ2J1dHRvbicgJiYKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLnZhbCgpLmluZGV4T2YoJ1snKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUudmFsKCdbJyArIGxvb2t1cFtub2RlLmRhdGEoJ3Jlc3VsdC10eXBlJyldICsgJ10gJyArIG5vZGUudmFsKCkpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgb2JzZXJ2ZXIub2JzZXJ2ZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucmV2aWV3LWFjdGlvbnMnKSwgeyAnY2hpbGRMaXN0JzogdHJ1ZSB9KTsKICAgICAgICB9KCkpOwoKICAgICAgICAoZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgdmFyIG9ic2VydmVyOwoKICAgICAgICAgICAgLy8gdGhlIG11dGF0aW9uIG9ic2VydmVycyBwaWNrcyB1cCB0aGlzIGNoYW5nZSBhcyB3ZWxsCiAgICAgICAgICAgIC8vIHRoaXMgZnVuY3Rpb24gcHJldmVudCBhZGRpbmcgYW5vdGhlciBbMV0gaWYgaXQgYWxyZWFkeSBoYXMgb25lCiAgICAgICAgICAgIGZ1bmN0aW9uIHNpbmdsZUFkZChlbGVtLCBrZXkpIHsKICAgICAgICAgICAgICAgIHZhciBhZGQgPSAnWycgKyBrZXkgKyAnXSAnOwogICAgICAgICAgICAgICAgLy9zdHJhbmdlbHkgc29tZSBlbGVtIGRvZXNuJ3QgY29udGFpbiBodG1sIGhlbmNlIHRoZSBudWxsIGNoZWNrLi4uCiAgICAgICAgICAgICAgICBpZiAoZWxlbS5odG1sKCkgIT09IG51bGwgJiYgZWxlbS5odG1sKCkuaW5kZXhPZihhZGQpICE9PSAwKSB7CiAgICAgICAgICAgICAgICAgICAgZWxlbS5odG1sKGFkZCArIGVsZW0uaHRtbCgpKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgLy8gbmV2ZXIgcHJvdmlkZSBhIG5vbi1udW1lcmljIGtleSAhCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZFNpYmxpbmdIZWxwZXIocm9vdCwgc2VsZWN0b3IsIGtleSkgewogICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSAkKHJvb3QpLmZpbmQoc2VsZWN0b3IpLm5leHQoKSwKICAgICAgICAgICAgICAgICAgICBrZXlOdW1iZXIgPSBwYXJzZUludChrZXksIDEwKSwKICAgICAgICAgICAgICAgICAgICBpOwogICAgICAgICAgICAgICAgLy8gaWYgYSBjdXN0b20gY2xvc2UgcmVhc29uIGhhcyBiZWVuIGdpdmVuCiAgICAgICAgICAgICAgICAvLyBtdWx0aXBsZSBlbGVtZW50cyBhcmUgZm91bmQKICAgICAgICAgICAgICAgIC8vIGluIHRoYXQgY2FzZSB3ZSBpdGVyYXRlIGFuZCBpbmNyZWFzZSB0aGUga2V5TnVtYmVyIGJ5IG9uZQogICAgICAgICAgICAgICAgLy8gdGhpcyB3b3JrcyBhcyBsb25nIGFzIHRoZSBjdXN0b20gcmVhc29uIGlzIHRoZSBsYXN0IG9uZS4uLgogICAgICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnQubGVuZ3RoOyBpID0gaSArIDEpIHsKICAgICAgICAgICAgICAgICAgICBzaW5nbGVBZGQoJChlbGVtZW50W2ldKSwga2V5TnVtYmVyLnRvU3RyaW5nKCkpOwogICAgICAgICAgICAgICAgICAgIGtleU51bWJlciA9IGtleU51bWJlciArIDE7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGFkZENvdXNpbkhlbHBlcihyb290LCBzZWxlY3Rvciwga2V5KSB7CiAgICAgICAgICAgICAgICB2YXIgZWxlbWVudCA9ICQocm9vdCkuZmluZChzZWxlY3RvcikucGFyZW50KCkubmV4dCgpLm5leHQoKTsKICAgICAgICAgICAgICAgIHNpbmdsZUFkZChlbGVtZW50LCBrZXkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBhZGRDbG9zZVJlYXNvbkhlbHBlcihyb290LCByZWFzb24sIGtleSkgewogICAgICAgICAgICAgICAgYWRkU2libGluZ0hlbHBlcihyb290LCAnW25hbWU9ImNsb3NlLXJlYXNvbiJdW3ZhbHVlPSInICsgcmVhc29uICsgJyJdJywga2V5KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gYWRkT2ZmVG9waWNSZWFzb25IZWxwZXIocm9vdCwgcmVhc29uLCBrZXkpIHsKICAgICAgICAgICAgICAgIGFkZFNpYmxpbmdIZWxwZXIocm9vdCwgJ1tuYW1lPSJjbG9zZS1hcy1vZmYtdG9waWMtcmVhc29uIl1bdmFsdWU9IicgKyByZWFzb24gKyAnIl0nLCBrZXkpOwogICAgICAgICAgICB9CgogICAgICAgICAgICBmdW5jdGlvbiBhZGRNaWdyYXRpb25IZWxwZXIocm9vdCwgcmVhc29uLCBrZXkpIHsKICAgICAgICAgICAgICAgIGFkZENvdXNpbkhlbHBlcihyb290LCAnW25hbWU9Im1pZ3JhdGlvbiJdW3ZhbHVlPSInICsgcmVhc29uICsgJyJdJywga2V5KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgZnVuY3Rpb24gYWRkSGVscGVycyhyb290KSB7CiAgICAgICAgICAgICAgICBhZGRDbG9zZVJlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy5kdXBsaWNhdGUudmFsdWUsIGNvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLmR1cGxpY2F0ZS5rZXkpOwogICAgICAgICAgICAgICAgYWRkQ2xvc2VSZWFzb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMub2ZmVG9waWMudmFsdWUsIGNvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLm9mZlRvcGljLmtleSk7CiAgICAgICAgICAgICAgICBhZGRDbG9zZVJlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy51bmNsZWFyLnZhbHVlLCBjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy51bmNsZWFyLmtleSk7CiAgICAgICAgICAgICAgICBhZGRDbG9zZVJlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLmNsb3NlUmVhc29ucy50b29Ccm9hZC52YWx1ZSwgY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMudG9vQnJvYWQua2V5KTsKICAgICAgICAgICAgICAgIGFkZENsb3NlUmVhc29uSGVscGVyKHJvb3QsIGNvbmZpZ3VyYXRpb24uY2xvc2VSZWFzb25zLm9waW5pb25CYXNlZC52YWx1ZSwgY29uZmlndXJhdGlvbi5jbG9zZVJlYXNvbnMub3BpbmlvbkJhc2VkLmtleSk7CiAgICAgICAgICAgICAgICBhZGRPZmZUb3BpY1JlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5zdXBlclVzZXIudmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLnN1cGVyVXNlci5rZXkpOwogICAgICAgICAgICAgICAgYWRkT2ZmVG9waWNSZWFzb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMuc2VydmVyRmF1bHQudmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLnNlcnZlckZhdWx0LmtleSk7CiAgICAgICAgICAgICAgICBhZGRPZmZUb3BpY1JlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5yZWNvbW1lbmQudmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLnJlY29tbWVuZC5rZXkpOwogICAgICAgICAgICAgICAgYWRkT2ZmVG9waWNSZWFzb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMubWluaW1hbFByb2dyYW0udmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLm1pbmltYWxQcm9ncmFtLmtleSk7CiAgICAgICAgICAgICAgICBhZGRPZmZUb3BpY1JlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy50eXBvLnZhbHVlLCBjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy50eXBvLmtleSk7CiAgICAgICAgICAgICAgICBhZGRPZmZUb3BpY1JlYXNvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLm9mZlRvcGljUmVhc29ucy5taWdyYXRpb24udmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLm1pZ3JhdGlvbi5rZXkpOwogICAgICAgICAgICAgICAgYWRkT2ZmVG9waWNSZWFzb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5vZmZUb3BpY1JlYXNvbnMub3RoZXIudmFsdWUsIGNvbmZpZ3VyYXRpb24ub2ZmVG9waWNSZWFzb25zLm90aGVyLmtleSk7CiAgICAgICAgICAgICAgICBhZGRNaWdyYXRpb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLm1ldGEudmFsdWUsIGNvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy5tZXRhLmtleSk7CiAgICAgICAgICAgICAgICBhZGRNaWdyYXRpb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLnN1cGVyVXNlci52YWx1ZSwgY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLnN1cGVyVXNlci5rZXkpOwogICAgICAgICAgICAgICAgYWRkTWlncmF0aW9uSGVscGVyKHJvb3QsIGNvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy50ZXgudmFsdWUsIGNvbmZpZ3VyYXRpb24ubWlncmF0aW9uUmVhc29ucy50ZXgua2V5KTsKICAgICAgICAgICAgICAgIGFkZE1pZ3JhdGlvbkhlbHBlcihyb290LCBjb25maWd1cmF0aW9uLm1pZ3JhdGlvblJlYXNvbnMuZGJhLnZhbHVlLCBjb25maWd1cmF0aW9uLm1pZ3JhdGlvblJlYXNvbnMuZGJhLmtleSk7CiAgICAgICAgICAgICAgICBhZGRNaWdyYXRpb25IZWxwZXIocm9vdCwgY29uZmlndXJhdGlvbi5taWdyYXRpb25SZWFzb25zLnN0YXRzLnZhbHVlLCBjb25maWd1cmF0aW9uLm1pZ3JhdGlvblJlYXNvbnMuc3RhdHMua2V5KTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgb2JzZXJ2ZXIgPSBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAobXV0YXRpb25zKSB7CiAgICAgICAgICAgICAgICBtdXRhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAobXV0YXRpb24pIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaSwgaiwgbm9kZTsKICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBqID0gbXV0YXRpb24uYWRkZWROb2Rlcy5sZW5ndGg7IGkgPCBqOyBpID0gaSArIDEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSA9IG11dGF0aW9uLmFkZGVkTm9kZXNbaV07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub2RlLnRhZ05hbWUgPT09ICdESVYnICYmIG5vZGUuaWQgPT09ICdwb3B1cC1jbG9zZS1xdWVzdGlvbicpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEhlbHBlcnMobm9kZSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfSk7CgogICAgICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5yZXZpZXctY29udGVudCcpLCB7ICdjaGlsZExpc3QnOiB0cnVlLCAnc3VidHJlZSc6IHRydWUgfSk7CiAgICAgICAgfSgpKTsKICAgIH0pOwp9KCkpOwo="},{"name":"Current Completed Reviews in Queue","options":{"comment":null,"compatopts_for_requires":true,"compat_wrappedjsobject":false,"compat_metadata":false,"compat_foreach":false,"compat_arrayleft":false,"compat_uW_gmonkey":false,"compat_forvarin":false,"noframes":null,"awareOfChrome":false,"run_at":null,"user_agent":"","override":{"use_includes":[],"orig_includes":[],"merge_includes":true,"use_matches":[],"orig_matches":["http://stackoverflow.com/review/*"],"merge_matches":true,"use_excludes":[],"orig_excludes":[],"merge_excludes":true,"orig_run_at":"document-idle","orig_noframes":null}},"storage":{"ts":1455673215280,"data":{}},"enabled":true,"position":16,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/CurrentQueueReviewsDone.user.js","uuid":"1ae23fcb-e8b9-43e0-bacc-14e8c3ed4798","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBDdXJyZW50IENvbXBsZXRlZCBSZXZpZXdzIGluIFF1ZXVlCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzU3ODQxMS9yZW5lCi8vIEB2ZXJzaW9uICAgICAgMC4yCi8vIEBkZXNjcmlwdGlvbiAgQWRkcyB0aGUgY3VycmVudCBudW1iZXIgb2YgcmV2aWV3cyB5b3UgaGF2ZSBjb21wbGV0ZWQgaW4gdGhlIHF1ZXVlIGluIGZyb250IG9mIHlvdXIgdG90YWwgcmV2aWV3cyBvbiB0aGUgcmV2aWV3IHRhYgovLyBAYXV0aG9yICAgICAgIFJlbmUsIFNPQ1ZSCi8vIEBtYXRjaCAgICAgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3Jldmlldy8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCi8vIHRoaXMgc2NyaXB0IGNvbWVzIGZyb20gdGhlIHJlcXVlc3QgaGVyZTogaHR0cDovL21ldGEuc3RhY2tleGNoYW5nZS5jb20vcS8yNTA1ODAvMjEzNjcxCi8vIHJlbmUgb3JpZ2luYWxseSBtYWRlIHRoaXM6IGh0dHA6Ly9tZXRhLnN0YWNrZXhjaGFuZ2UuY29tL2EvMjUwNjIyLzIxMzY3MQoKKGZ1bmN0aW9uKCQsIHdpbmRvdykgewoKICAgIHZhciBwYXJ0cywKICAgICAgICBzdGF0c3VybCwKICAgICAgICBjdXJyZW50aHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLAogICAgICAgIC8vIGhlcmUgd2UgcHV0IG91ciBzdGF0CiAgICAgICAgc3RhdCA9ICQoJzxkaXY+PC9kaXY+JykKICAgICAgICAuaHRtbCgnLi4uJm5ic3A7LyZuYnNwOycpCiAgICAgICAgLmNzcygnZmxvYXQnLCdsZWZ0JykKICAgICAgICAuY3NzKCdwYWRkaW5nLXRvcCcsJzEzcHgnKTsKCiAgICBmdW5jdGlvbiBidWlsZFVybCgpIHsKICAgICAgICAvLyBidWlsZCB0aGUgc3RhdHMgdXJsCiAgICAgICAgcGFydHMgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKTsKICAgICAgICBpZiAocGFydHMubGVuZ3RoPjMpIHsKICAgICAgICAgICBwYXJ0c1twYXJ0cy5sZW5ndGgtMV0gPSAnc3RhdHMnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBhcnRzLnB1c2goJ3N0YXRzJyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcvJyk7CiAgICB9CgogICAgc3RhdHN1cmwgPSBidWlsZFVybCgpOwoKICAgIC8vIGludGVnYXRlIGluIHRoZSByZXZpZXcgcGFnZQogICAgJCgnI2JhZGdlLXByb2dyZXNzJykucHJlcGVuZChzdGF0KTsKCiAgICAvLyBnZXQgdGhlIChmdWxsYmxvd24pIHN0YXRzIHBhZ2UgYW5kIGZpbmQgeW91ciBvd24gc3RhdAogICAgZnVuY3Rpb24gcmVmcmVzaHN0YXQoKSB7CiAgICAgICAgJC5nZXQoc3RhdHN1cmwsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgIHZhciBodG1sID0gJChkYXRhKSwKICAgICAgICAgICAgICAgIHRkID0gaHRtbC5maW5kKCd0ZC5yZXZpZXctc3RhdHMtY291bnQtY3VycmVudC11c2VyOmZpcnN0Jyk7CiAgICAgICAgICAgIC8vIHJlcGxhY2Ugb3VyIGN1cnJlbnQgc3RhdCB3aXRoIHRoZSBqdXN0IGxvYWRlZCBvbmUKICAgICAgICAgICAgc3RhdC5odG1sKHRkLnRleHQoKSArICcmbmJzcDsvJm5ic3A7Jyk7ICAgIAogICAgICAgIH0pLmZhaWwoZnVuY3Rpb24ocHJvbSwgZXJyb3IsIG1zZykgewogICAgICAgICAgICBkZWJ1Z2dlcjsKICAgICAgICAgICAgaWYgKG1zZyA9PT0gJ05vdCBGb3VuZCcpIHsKICAgICAgICAgICAgICAgIC8vIHRoZSB1cmwgaXMgbm90IGNvcnJlY3QsIHRyeSBhIG5ldyBvbmUKICAgICAgICAgICAgICAgIHN0YXRzdXJsID0gYnVpbGRVcmwoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIC8vIGNoZWNrIHJlZ3VsYXJseSAoZXZlcnkgNSBzZWNvbmRzKSBpZiB3ZSBkb25lIGEgcmV2aWV3IHlldAogICAgd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBpZiB0aGUgdXJsIGNoYW5nZWQsIGxldHMgZ2V0IHRoZSBuZXcgc3RhdAogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZiAhPT0gY3VycmVudGhyZWYpIHsKICAgICAgICAgICAgY3VycmVudGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgcmVmcmVzaHN0YXQoKTsKICAgICAgICB9CiAgICB9LCA1MDAwKTsgLy8gbm93IDUgc2Vjb25kcyBiZWNhdXNlIHdlIGhhcmRseSBldmVyIHJldmlldyBxdWlja2VyIHRoYW4gdGhhdAogICAgcmVmcmVzaHN0YXQoKTsgLy8gcnVuIG9uY2UgZm9yIGFuIGluaXRpYWwgdmFsdWUKCn0oJCB8fCB1bnNhZmVXaW5kb3cuJCwgd2luZG93IHx8IHVuc2FmZVdpbmRvdykpOwo="}]}