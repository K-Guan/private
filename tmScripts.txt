{"created_by":"Tampermonkey","version":"1","scripts":[{"name":"Stack Exchange CV Request Generator","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/\\w*.?(stackexchange.com|stackoverflow.com|serverfault.com|superuser.com|askubuntu.com|stackapps.com|mathoverflow.net)\\/q(uestions)?\\/\\d+/","/^https?:\\/\\/\\w*.?stackoverflow.com/tools/new-answers-old-questions.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831270},"enabled":true,"position":1,"file_url":"https://rawgit.com/SO-Close-Vote-Reviewers/UserScripts/master/SECloseVoteRequestGenerator.user.js","uuid":"92eb7581-a2c9-462d-af44-7eb8c903f8cb","source":""},{"name":"stackoverflow-comment-reply","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://stackoverflow.com/*","*://serverfault.com/*","*://superuser.com/*","*://meta.stackoverflow.com/*","*://meta.serverfault.com/*","*://meta.superuser.com/*","*://stackapps.com/*","*://*.stackexchange.com/*","*://askubuntu.com/*","*://meta.askubuntu.com/*","*://answers.onstartups.com/*","*://meta.answers.onstartups.com/*","*://mathoverflow.net/*","*://area51.stackexchange.com/proposals/*"],"use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831289},"enabled":true,"position":2,"file_url":"https://bitbucket.org/balpha/user-scripts/raw/tip/comment-reply-links/comment-reply-links.user.js","uuid":"b30320e8-9e48-4191-9a0a-15f6c81e1d21","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIHN0YWNrb3ZlcmZsb3ctY29tbWVudC1yZXBseQovLyBAbmFtZXNwYWNlICAgICAgc3RhY2tvdmVyZmxvdwovLyBAZGVzY3JpcHRpb24gICAgQWRkICJyZXBseSIgbGlua3MgdG8gY29tbWVudHMKLy8gQHZlcnNpb24gICAgICAgIDEuMQovLyBAbWF0Y2ggICAgICAgICAgKjovL3N0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9zZXJ2ZXJmYXVsdC5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL3N1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuc3RhY2tvdmVyZmxvdy5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuc2VydmVyZmF1bHQuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9tZXRhLnN1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL3N0YWNrYXBwcy5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL2Fza3VidW50dS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgKjovL21ldGEuYXNrdWJ1bnR1LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAqOi8vYW5zd2Vycy5vbnN0YXJ0dXBzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAqOi8vbWV0YS5hbnN3ZXJzLm9uc3RhcnR1cHMuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9tYXRob3ZlcmZsb3cubmV0LyoKLy8gQG1hdGNoICAgICAgICAgICo6Ly9hcmVhNTEuc3RhY2tleGNoYW5nZS5jb20vcHJvcG9zYWxzLyoKLy8gQGF1dGhvciAgICAgICAgIEJlbmphbWluIER1bWtlLXZvbiBkZXIgRWhlCi8vID09L1VzZXJTY3JpcHQ9PQoKLy8gVGhhbmtzIHRvIFNob2c5IGZvciB0aGlzIGlkZWEgZm9yIG1ha2luZyB0aGUgc2NyaXB0IHdvcmsgaW4gYm90aAovLyBDaHJvbWUgYW5kIEZpcmVmb3g6Ci8vIGh0dHA6Ly9tZXRhLnN0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80NjU2MgpmdW5jdGlvbiB3aXRoX2pxdWVyeShmKSB7CiAgICB2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7CiAgICBzY3JpcHQudHlwZSA9ICJ0ZXh0L2phdmFzY3JpcHQiOwogICAgc2NyaXB0LnRleHRDb250ZW50ID0gIigiICsgZi50b1N0cmluZygpICsgIikoalF1ZXJ5KSI7CiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHNjcmlwdCk7Cn07Cgp3aXRoX2pxdWVyeShmdW5jdGlvbigkKSB7CiAgICAgICAgCiAgICAkKGRvY3VtZW50KS5hamF4Q29tcGxldGUoZnVuY3Rpb24oKXsKICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiLmNvbW1lbnRzIikuZWFjaChwdXRfcmVwbHlfbGlua3MpOwogICAgICAgIH0sIDEwMCk7CiAgICB9KTsKICAgICAgICAKICAgIC8vIGV2ZW50IGhhbmRsZXIgZm9yIGEgY2xpY2sgb24gdGhlIHJlcGx5IGxpbmtzCiAgICBmdW5jdGlvbiByZXBseSgpIHsKICAgICAgICB2YXIgY29tbWVudGxpbmsgPSAkKHRoaXMpLmNsb3Nlc3QoIi5jb21tZW50cyIpLm5leHQoKS5jbGljaygpOwogICAgICAgIHZhciBjb21tZW50bGlua0lkID0gY29tbWVudGxpbmsuYXR0cigiaWQiKTsKICAgICAgICB2YXIgdXNlcm5hbWUgPSBnb29kaWZ5KCQodGhpcykucHJldigpLnRleHQoKS5yZXBsYWNlKC/imaYvLCAiIikpCiAgICAgICAgdmFyIGZvcm1pZCA9IGNvbW1lbnRsaW5rSWQucmVwbGFjZSgvXi4qLShcZCspJC8sICJhZGQtY29tbWVudC0kMSIpOwogICAgICAgIHZhciB0YSA9ICQoIiMiICsgZm9ybWlkICsgIiB0ZXh0YXJlYSIpWzBdOwogICAgICAgIHZhciBzdGFydCA9IHRhLnNlbGVjdGlvblN0YXJ0OwogICAgICAgIHZhciBlbmQgPSB0YS5zZWxlY3Rpb25FbmQ7CiAgICAgICAgdmFyIHNoaWZ0ID0gdXNlcm5hbWUubGVuZ3RoICsgMzsKICAgICAgICB0YS52YWx1ZSA9ICJAIiArIHVzZXJuYW1lICsgIjogIiArIHRhLnZhbHVlOwogICAgICAgIHRhLmZvY3VzKCk7CiAgICAgICAgdGEuc2VsZWN0aW9uU3RhcnQgPSBzdGFydCArIHNoaWZ0OwogICAgICAgIHRhLnNlbGVjdGlvbkVuZCA9IGVuZCArIHNoaWZ0OwogICAgfTsKCiAgICBmdW5jdGlvbiBwdXRfcmVwbHlfbGlua3MoKSB7CiAgICAgICAgJCh0aGlzKS5maW5kKCIuY29tbWVudDpub3QoOmhhcygucmVwbHktbGluaykpIC5jb21tZW50LXVzZXIiKS5lYWNoKGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgJCgiPHNwYW4gY2xhc3M9J3JlcGx5LWxpbmsnIHN0eWxlPSdjdXJzb3I6cG9pbnRlcjsnIHRpdGxlPSdyZXBseSc+ICZjcmFycjs8L3NwYW4+IikuY2xpY2socmVwbHkpLmluc2VydEFmdGVyKHRoaXMpOwogICAgICAgIH0pOwogICAgfQogICAgICAgICAgICAKICAgICQoIi5jb21tZW50cyIpLmVhY2gocHV0X3JlcGx5X2xpbmtzKTsKICAgIAogICAgZnVuY3Rpb24gZ29vZGlmeShzKSB7CiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvICsvZywgIiIpOwogICAgfSAgCiAgICAKfSk7"},{"name":"Stack Exchange like I like it (without tab feature)","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["/^https?:\\/\\/(chat|blog|careers)\\..*/"],"orig_includes":[],"orig_matches":["*://stackexchange.com/*","*://*.stackexchange.com/*/*","*://stackoverflow.com/*/*","*://*.stackoverflow.com/*/*","*://stackapps.com/*/*","*://serverfault.com/*/*","*://superuser.com/*/*","*://askubuntu.com/*/*","*://mathoverflow.net/*/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831303},"enabled":true,"position":3,"file_url":"https://github.com/calraith/gm_scripts/raw/master/se_like_I_like_it.user.js","uuid":"a490bb56-67fc-4b13-ba27-3ac98ef75e75","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFN0YWNrIEV4Y2hhbmdlIGxpa2UgSSBsaWtlIGl0ICh3aXRob3V0IHRhYiBmZWF0dXJlKQovLyBAbmFtZXNwYWNlICAgaHR0cDovL3N0YWNrYXBwcy5vcmcvCi8vIEBkZXNjcmlwdGlvbiBEb3VibGUtY2xpY2sgYSBjb2RlIGJsb2NrIHRvIHNlbGVjdCBhbGwgKyBlZGl0IGJveCBhdXRvIGluZGVudCAvIHRhYiBrZXkgYmVoYXZpb3IgZW5oYW5jZW1lbnRzCi8vIEBtYXRjaAkJKjovL3N0YWNrZXhjaGFuZ2UuY29tLyoKLy8gQG1hdGNoCQkqOi8vKi5zdGFja2V4Y2hhbmdlLmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vc3RhY2tvdmVyZmxvdy5jb20vKi8qCi8vIEBtYXRjaAkJKjovLyouc3RhY2tvdmVyZmxvdy5jb20vKi8qCi8vIEBtYXRjaAkJKjovL3N0YWNrYXBwcy5jb20vKi8qCi8vIEBtYXRjaAkJKjovL3NlcnZlcmZhdWx0LmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vc3VwZXJ1c2VyLmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vYXNrdWJ1bnR1LmNvbS8qLyoKLy8gQG1hdGNoCQkqOi8vbWF0aG92ZXJmbG93Lm5ldC8qLyoKLy8gQGV4Y2x1ZGUgICAgIC9eaHR0cHM/OlwvXC8oY2hhdHxibG9nfGNhcmVlcnMpXC4uKi8KLy8gQHZlcnNpb24gICAgIDEuNgovLyBAZG93bmxvYWRVUkwJaHR0cHM6Ly9naXRodWIuY29tL2NhbHJhaXRoL2dtX3NjcmlwdHMvcmF3L21hc3Rlci9zZV9saWtlX0lfbGlrZV9pdC51c2VyLmpzCi8vIEBncmFudCAgICAgICBHTV9pbmZvCi8vID09L1VzZXJTY3JpcHQ9PQoKCmZ1bmN0aW9uIHNlbGVjdEFsbCgpIHsKCXZhciByYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCk7CgkvLyBzZWxlY3QgcGFyZW50IGlmIHBhcmVudCA9PT0gPHByZT47IGVsc2Ugc2VsZWN0IHNlbGYKCXJhbmdlLnNlbGVjdE5vZGVDb250ZW50cyh0aGlzLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09ICdwcmUnID8gdGhpcy5jaGlsZE5vZGVzWzBdIDogdGhpcyk7Cgl2YXIgc2VsZWN0aW9uID0gd2luZG93LmdldFNlbGVjdGlvbigpOwoJc2VsZWN0aW9uLnJlbW92ZUFsbFJhbmdlcygpOwoJc2VsZWN0aW9uLmFkZFJhbmdlKHJhbmdlKTsKfQoKZnVuY3Rpb24gYWRkRGJsQ2xpY2soKSB7Cgl2YXIgY29kZSA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdjb2RlJyk7Cglmb3IgKHZhciBpPTA7IGk8Y29kZS5sZW5ndGg7IGkrKykgewoJCS8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgkJSWYgcGFyZW50IG5vZGUgaXMgPHByZT4sIGFkZCBsaXN0ZW5lciB0byBwYXJlbnQuICBUaGlzIGFsbG93cyBkb3VibGUtCgkJY2xpY2tpbmcgYW55d2hlcmUgd2l0aGluIGEgY29kZSBibG9jayB0byBzZWxlY3QgYWxsLCBhcyB3ZWxsIGFzIGRvdWJsZS0KCQljbGlja2luZyBpbmxpbmUgY29kZSBzbmlwcGV0cyB0aGUgcG9zdGVyIGVuY2xvc2VkIGluIGJhY2t0aWNrcy4KCQk9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSAqLwoJCXZhciBub2RlID0gKGNvZGVbaV0ucGFyZW50Tm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSAncHJlJyA/IGNvZGVbaV0ucGFyZW50Tm9kZSA6IGNvZGVbaV0pOwoJCW5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCBzZWxlY3RBbGwsIHRydWUpOwoJCW5vZGUuYWRkRXZlbnRMaXN0ZW5lcignZGJsY2xpY2snLCBzZWxlY3RBbGwsIHRydWUpOwoJCW5vZGUudGl0bGUgPSAnZG91YmxlLWNsaWNrIHRvIHNlbGVjdCBhbGwnOwoJfQp9CmFkZERibENsaWNrKCk7CgovLyBsaXN0ZW4gZm9yIHN0dWZmIGxpa2UgInNob3cgMSBtb3JlIGNvbW1lbnQiCnZhciBjcmVlcCA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGFkZERibENsaWNrKTsKY3JlZXAub2JzZXJ2ZShkb2N1bWVudCwge3N1YnRyZWU6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZX0pOwoKLyogZW5kIGRvdWJsZS1jbGljayBtb2RzICovCgovLyBJZiBvbiBodHRwOi8vc3RhY2tleGNoYW5nZS5jb20vLCBjaGVjayBmb3Igc2l0ZXMgbm90IGluY2x1ZGVkIGluIG1ldGFkYXRhIEBtYXRjaCBkaXJlY3RpdmVzCmlmICgvaHR0cHM/OlwvXC9zdGFja2V4Y2hhbmdlXC5jb20vaS50ZXN0KGxvY2F0aW9uLmhyZWYpICYmIEdNX2luZm8pIHsKCXZhciBYSFIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCXdpdGggKFhIUikgewoJCW9wZW4oIkdFVCIsICJodHRwOi8vc3RhY2tleGNoYW5nZS5jb20vc2l0ZXM/dmlldz1saXN0IiwgdHJ1ZSk7CgkJb25lcnJvciA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gZmFsc2U7IH07CgkJb25sb2FkID0gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9OwoJCW9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkgewoJCQlpZiAoWEhSLnJlYWR5U3RhdGUgPT0gNCkgewoJCQkJdmFyIGRvbSA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCgpOwoJCQkJZG9tLmRvY3VtZW50RWxlbWVudC5pbm5lckhUTUwgPSBYSFIucmVzcG9uc2VUZXh0OwoJCQkJdmFyIGxpc3QgPSBkb20uZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbGlzdC12aWV3LWNvbnRhaW5lcicpWzBdLmdldEVsZW1lbnRzQnlUYWdOYW1lKCdhJyk7CgkJCQl2YXIgbWF0Y2hlcyA9IEdNX2luZm8uc2NyaXB0Lm1hdGNoZXM7CgkJCQlmb3IgKHZhciBpPWZvdW5kPTA7IGk8bGlzdC5sZW5ndGg7IGkrKykgewoJCQkJCWlmICgvKHR3aXR0ZXJ8YmxvZykvaS50ZXN0KGxpc3RbaV0uaHJlZikpIGNvbnRpbnVlOwoJCQkJCWZvciAodmFyIGo9MDsgajxtYXRjaGVzLmxlbmd0aDsgaisrKSB7CgkJCQkJCXZhciByeHAgPSBuZXcgUmVnRXhwKCdeJyArIG1hdGNoZXNbal0ucmVwbGFjZSgvXC9cKiQvLCcnKS5yZXBsYWNlKC9bXC5cL1wqXS9nLCBmdW5jdGlvbihtKSB7CgkJCQkJCQlyZXR1cm4gKG0gPT0gJyonKSA/ICcuKicgOiAnXFwnICsgbTsKCQkJCQkJfSkgKyAnJCcsICdpJyk7CgkJCQkJCWlmIChyeHAudGVzdChsaXN0W2ldLmhyZWYpKSB7IGZvdW5kPTE7IGJyZWFrOyB9CgkJCQkJfQoJCQkJCWlmICghZm91bmQpIGNvbnNvbGUubG9nKCdOZXcgc3RhY2tleGNoYW5nZSBkb21haW46ICcgKyBsaXN0W2ldLmhyZWYpOwoJCQkJCWVsc2UgZm91bmQ9MDsKCQkJCX0KCQkJfQoJCX07CgkJc2VuZCgnJyk7Cgl9Cn0K"},{"name":"StackExchange obvious followed link color","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?\\:\\/\\/([a-z\\.]*\\.)?stackexchange\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?askubuntu\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?superuser\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?serverfault\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?stackoverflow\\.com\\/.*/","/https?\\:\\/\\/([a-z\\.]*\\.)?answers.onstartups\\.com\\/.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831318},"enabled":true,"position":4,"file_url":"https://greasyfork.org/scripts/3362-stackexchange-obvious-followed-link-color/code/StackExchange%20obvious%20followed%20link%20color.user.js","uuid":"6ea166e0-79ab-4e14-9f4e-fe17128833fc","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgU3RhY2tFeGNoYW5nZSBvYnZpb3VzIGZvbGxvd2VkIGxpbmsgY29sb3IKLy8gQG5hbWVzcGFjZSBodHRwOi8vb3N0ZXJtaWxsZXIub3JnLwovLyBAdmVyc2lvbiAxLjAwCi8vIEBkZXNjcmlwdGlvbiBDaGFuZ2UgdGhlIGNvbG9yIG9mIGZvbGxvd2VkIGxpbmtzIG9uIGFsbCBTdGFja0V4Y2hhbmdlIHNpdGVzIHNvIHRoZXkgdGhleSBhcmUgZWFzaWx5IGRpc3Rpbmd1aXNoYWJsZS4KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9zdGFja2V4Y2hhbmdlXC5jb21cLy4qLwovLyBAaW5jbHVkZSAvaHR0cHM/XDpcL1wvKFthLXpcLl0qXC4pP2Fza3VidW50dVwuY29tXC8uKi8KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9zdXBlcnVzZXJcLmNvbVwvLiovCi8vIEBpbmNsdWRlIC9odHRwcz9cOlwvXC8oW2EtelwuXSpcLik/c2VydmVyZmF1bHRcLmNvbVwvLiovCi8vIEBpbmNsdWRlIC9odHRwcz9cOlwvXC8oW2EtelwuXSpcLik/c3RhY2tvdmVyZmxvd1wuY29tXC8uKi8KLy8gQGluY2x1ZGUgL2h0dHBzP1w6XC9cLyhbYS16XC5dKlwuKT9hbnN3ZXJzLm9uc3RhcnR1cHNcLmNvbVwvLiovCi8vIEBncmFudCBub25lCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gYWRkQ3NzKGNzc1N0cmluZykgewogICAgdmFyIG5ld0NzcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7CiAgICBuZXdDc3MudHlwZSA9ICJ0ZXh0L2NzcyI7CiAgICBuZXdDc3MuaW5uZXJIVE1MID0gY3NzU3RyaW5nOwogICAgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXS5hcHBlbmRDaGlsZChuZXdDc3MpOwogICAgY29uc29sZS5sb2coImFwcGVuZGVkIGNzcyIpOwp9CgphZGRDc3MgKAogICAgJy5xdWVzdGlvbi1oeXBlcmxpbms6dmlzaXRlZCwgLnJlc3VsdC1saW5rIGE6dmlzaXRlZCB7Y29sb3I6ICMwMDAwOEIgISBpbXBvcnRhbnQ7fScKKTsg"},{"name":"Unclosed Request Review Script","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://chat.stackoverflow.com/rooms/41570/*","*://chat.stackoverflow.com/search?q=tagged%2Fcv-pls&Room=41570&page=*&pagesize=50&sort=newest"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831340},"enabled":true,"position":5,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/UnclosedRequestReview.user.js","uuid":"ea33379b-d41e-4b0a-8231-2ab1c5a6b70f","source":""},{"name":"Stack Exchange: Add Timeline and Revisions links to posts","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/questions/*","*://*.mathoverflow.net/questions/*","*://*.serverfault.com/questions/*","*://*.stackapps.com/questions/*","*://*.stackexchange.com/questions/*","*://*.stackoverflow.com/questions/*","*://*.superuser.com/questions/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831358},"enabled":true,"position":6,"file_url":"https://gist.github.com/BrockA/5761948/raw/Add_Timeline_Button_to_Stack_Exchange_questions.user.js","uuid":"88d06f2f-ef9a-464b-85ee-432a3c718aa2","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFN0YWNrIEV4Y2hhbmdlOiBBZGQgVGltZWxpbmUgYW5kIFJldmlzaW9ucyBsaW5rcyB0byBwb3N0cwovLyBAZGVzY3JpcHRpb24gQWRkcyBsaW5rcyB0byBwb3N0cyB0byBhbHdheXMgc2hvdyBoaXN0b3J5IGFuZCBsaW5rcyB0byBxdWVzdGlvbnMgdG8gc2hvdyB0aGUgVGltZWxpbmUiLgovLyBAbmFtZXNwYWNlICAgU3RhY2tFeGNoYW5nZQovLyBAbWF0Y2ggICAgICAgKjovLyouYXNrdWJ1bnR1LmNvbS9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyoubWF0aG92ZXJmbG93Lm5ldC9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyouc2VydmVyZmF1bHQuY29tL3F1ZXN0aW9ucy8qCi8vIEBtYXRjaCAgICAgICAqOi8vKi5zdGFja2FwcHMuY29tL3F1ZXN0aW9ucy8qCi8vIEBtYXRjaCAgICAgICAqOi8vKi5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvKgovLyBAbWF0Y2ggICAgICAgKjovLyouc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLyoKLy8gQG1hdGNoICAgICAgICo6Ly8qLnN1cGVydXNlci5jb20vcXVlc3Rpb25zLyoKLy8gQHZlcnNpb24gICAgIDEuMgovLyBAaGlzdG9yeSAgICAgMS4yIFVwZGF0ZWQgbWF0Y2ggbGlzdAovLyBAaGlzdG9yeSAgICAgMS4xIEFkZGVkIHJldmlzaW9ucyBsaW5rCi8vID09L1VzZXJTY3JpcHQ9PQoKZnVuY3Rpb24gYWRkVXRpbGl0eUxpbmtzICgkKSB7CgogICAgJCgiLnBvc3QtbWVudSIpLmVhY2ggKCBmdW5jdGlvbiAoSikgewogICAgICAgIHZhciBqVGhpcyAgID0gJCh0aGlzKTsKICAgICAgICB2YXIgaHJlZiAgICA9IGpUaGlzLmZpbmQgKCdhW2NsYXNzPSJzaG9ydC1saW5rIl0nKS5hdHRyICgiaHJlZiIpOwogICAgICAgIHZhciBpZE10Y2ggID0gaHJlZi5zcGxpdCAoL1txYV1cLyhcZCspLyk7CiAgICAgICAgaWYgKGlkTXRjaC5sZW5ndGggPiAyKSB7CiAgICAgICAgICAgIHZhciBpZCAgPSBpZE10Y2hbMV07CiAgICAgICAgICAgIGpUaGlzLmFwcGVuZCAoCiAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9ImxzZXAiPnw8L3NwYW4+PGEgaHJlZj0iL3Bvc3RzLycgKyBpZCArICcvcmV2aXNpb25zIj5yZXZpc2lvbnM8L2E+JwogICAgICAgICAgICApOwoKICAgICAgICAgICAgaWYgKEogPT09IDApIHsgIC8vLS0gUXVlc3Rpb24gb25seQogICAgICAgICAgICAgICAgalRoaXMuYXBwZW5kICgKICAgICAgICAgICAgICAgICAgICAnPHNwYW4gY2xhc3M9ImxzZXAiPnw8L3NwYW4+PGEgaHJlZj0iL3Bvc3RzLycgKyBpZCArICcvdGltZWxpbmUiPnRpbWVsaW5lPC9hPicKICAgICAgICAgICAgICAgICk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9ICk7CiAgICAkKCIucmV2Y2VsbDMudm0+ZGl2IikuZWFjaCAoZnVuY3Rpb24gKCkgewogICAgICAgIC8vLS0gTG9va3MgbGlrZSBhIHRpbWVib21iLi4uCiAgICAgICAgZ3VpZCA9ICQodGhpcykuZmluZCAoImEiKS5hdHRyICgiaHJlZiIpLm1hdGNoICgvXHd7OH0gKD86LVx3ezR9ICl7M30tXHd7MTJ9LylbMF07CiAgICAgICAgJCh0aGlzKS5wcmVwZW5kICgnPGEgaHJlZj0iI3JldicgKyBndWlkICsgJyI+bGluazwvYT48c3BhbiBjbGFzcz0ibHNlcCI+fDwvc3Bhbj4nKTsKICAgIH0gKTsKfQoKd2l0aFBhZ2VzX2pRdWVyeSAoYWRkVXRpbGl0eUxpbmtzKTsKCmZ1bmN0aW9uIHdpdGhQYWdlc19qUXVlcnkgKE5BTUVEX0Z1bmN0aW9uVG9SdW4pIHsKICAgIC8vLS0tIFVzZSBuYW1lZCBmdW5jdGlvbnMgZm9yIGNsYXJpdHkgYW5kIGRlYnVnZ2luZy4uLgogICAgdmFyIGZ1bmNUZXh0ICAgICAgICA9IE5BTUVEX0Z1bmN0aW9uVG9SdW4udG9TdHJpbmcgKCk7CiAgICB2YXIgZnVuY05hbWUgICAgICAgID0gZnVuY1RleHQucmVwbGFjZSAoL15mdW5jdGlvblxzKyhcdyspXHMqXCgoLnxcbnxccikrJC8sICIkMSIpOwogICAgdmFyIHNjcmlwdCAgICAgICAgICA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgKCJzY3JpcHQiKTsKICAgIHNjcmlwdC50ZXh0Q29udGVudCAgPSBmdW5jVGV4dCArICJcblxuIjsKICAgIHNjcmlwdC50ZXh0Q29udGVudCArPSAnalF1ZXJ5KGRvY3VtZW50KS5yZWFkeSggZnVuY3Rpb24gKCkgeycgKyBmdW5jTmFtZSArICcoalF1ZXJ5KTt9ICk7JzsKICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQgKHNjcmlwdCk7Cn07Cg=="},{"name":"Chat Reply Helper for Stack Exchange sites","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/chat\\.stackexchange\\.com/.*$/","/^https?:\\/\\/chat\\.stackoverflow\\.com/.*$/","/^https?:\\/\\/chat\\.meta\\.stackexchange\\.com/.*$/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831374},"enabled":true,"position":7,"file_url":"https://raw.githubusercontent.com/oliversalzburg/se-chat-reply-highlight/master/dist/se-chat-replyhelper.user.js","uuid":"4d7672e8-fd1e-4a91-a55f-fbe9bc041877","source":""},{"name":"Helpful Flag Percentage","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.stackexchange.com/users/flag-summary/*","*://*.stackoverflow.com/users/flag-summary/*","*://*.stackapps.com/users/flag-summary/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831385},"enabled":true,"position":8,"uuid":"a0dec57b-c225-47bc-8e4a-4677037b017f","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBIZWxwZnVsIEZsYWcgUGVyY2VudGFnZQovLyBAbmFtZXNwYWNlICAgIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vdXNlcnMvMTQ1NDUzOC8KLy8gQGF1dGhvciAgICAgICBlbmtpCi8vIEBtYXRjaCAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vdXNlcnMvZmxhZy1zdW1tYXJ5LyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5zdGFja292ZXJmbG93LmNvbS91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnN0YWNrYXBwcy5jb20vdXNlcnMvZmxhZy1zdW1tYXJ5LyoKLy8gPT0vVXNlclNjcmlwdD09Ci8qanNsaW50IGJyb3dzZXI6IHRydWUsIHdoaXRlOiB0cnVlKi8KLypqc2xpbnQgdGhpcyAqLwovKmdsb2JhbCAkLCBqUXVlcnkqLwokKGZ1bmN0aW9uICgpIHsKJ3VzZSBzdHJpY3QnOwoKICAgIHZhciBoZWxwZnVsRmxhZ3MgPSAwOwogICAgJCgidGQgPiBhOmNvbnRhaW5zKCdoZWxwZnVsJykiKS5wYXJlbnQoKS5wcmV2KCkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgaGVscGZ1bEZsYWdzICs9IHBhcnNlSW50KCQodGhpcykudGV4dCgpLnJlcGxhY2UoIiwiLCIiKSk7CiAgICB9KTsKCiAgICB2YXIgZGVjbGluZWRGbGFncyA9IDA7CiAgICAkKCJ0ZCA+IGE6Y29udGFpbnMoJ2RlY2xpbmVkJykiKS5wYXJlbnQoKS5wcmV2KCkuZWFjaChmdW5jdGlvbiAoKSB7CiAgICAgICAgZGVjbGluZWRGbGFncyArPSBwYXJzZUludCgkKHRoaXMpLnRleHQoKS5yZXBsYWNlKCIsIiwiIikpOwogICAgfSk7CgogICAgaWYgKGhlbHBmdWxGbGFncyA+IDApIHsKCiAgICAgICAgdmFyIHBlcmNlbnRIZWxwZnVsID0gTnVtYmVyKE1hdGgucm91bmQoKGhlbHBmdWxGbGFncyAvIChoZWxwZnVsRmxhZ3MgKyBkZWNsaW5lZEZsYWdzKSkgKiAxMDAgKyAnZTInKSArICdlLTInKTsKCiAgICAgICAgaWYgKHBlcmNlbnRIZWxwZnVsID4gMTAwICkgewogICAgICAgICAgICBwZXJjZW50SGVscGZ1bCA9IDEwMDsKICAgICAgICB9CgogICAgICAgIHZhciBwZXJjZW50Q29sb3I7CiAgICAgICAgaWYgKHBlcmNlbnRIZWxwZnVsID49IDkwKSB7CiAgICAgICAgICAgIHBlcmNlbnRDb2xvciA9ICJsaW1lZ3JlZW4iOwogICAgICAgIH0gZWxzZSBpZiAocGVyY2VudEhlbHBmdWwgPj0gODApIHsKICAgICAgICAgICAgcGVyY2VudENvbG9yID0gImRhcmtvcmFuZ2UiOwogICAgICAgIH0gZWxzZSBpZiAocGVyY2VudEhlbHBmdWwgPCA4MCkgewogICAgICAgICAgICBwZXJjZW50Q29sb3IgPSAicmVkIjsKICAgICAgICB9IAoKICAgICAgICB2YXIgY3NzID0gIjxzdHlsZT5cCiAgICAgICAgICAgICAgICAgICAgI3Byb2dyZXNzIHtcCiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tncm91bmQ6ICNjY2M7XAogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwcHg7XAogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogMjIwcHg7XAogICAgICAgICAgICAgICAgICAgICAgICBtYXJnaW46IDZweCAxMHB4IDEwcHggMDtcCiAgICAgICAgICAgICAgICAgICAgICAgIHBhZGRpbmc6IDBweDtcCiAgICAgICAgICAgICAgICAgICB9XAogICAgICAgICAgICAgICAgICAgICNwcm9ncmVzczphZnRlciB7XAogICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiAnJztcCiAgICAgICAgICAgICAgICAgICAgICAgIGRpc3BsYXk6IGJsb2NrO1wKICAgICAgICAgICAgICAgICAgICAgICAgYmFja2dyb3VuZDogIiArIHBlcmNlbnRDb2xvciArICI7XAogICAgICAgICAgICAgICAgICAgICAgICB3aWR0aDogIiArIHBlcmNlbnRIZWxwZnVsICsgIiU7XAogICAgICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IDEwMCU7XAogICAgICAgICAgICAgICAgICAgIH1cCiAgICAgICAgICAgICAgICAgICAgI3BlcmNlbnRIZWxwZnVsIHtcCiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmdpbi1ib3R0b206IDVweDtcCiAgICAgICAgICAgICAgICAgICAgfVwKICAgICAgICAgICAgICAgICAgICA8L3N0eWxlPiI7CgogICAgICAgICQoJ2hlYWQnKS5hcHBlbmQoY3NzKTsKCiAgICAgICAgJCgiI2ZsYWctc3RhdC1pbmZvLXRhYmxlIikuYmVmb3JlKCI8aDMgaWQ9J3BlcmNlbnRIZWxwZnVsJyB0aXRsZT0ncGVuZGluZywgYWdlZCBhd2F5IGFuZCBkaXNwdXRlZCBmbGFncyBhcmUgbm90IGNvdW50ZWQnPjxzcGFuIGlkPSdwZXJjZW50Jz4iICsgcGVyY2VudEhlbHBmdWwgKyAiJTwvc3Bhbj4gaGVscGZ1bDwvaDM+Iik7CiAgICAgICAgJCgic3BhbiNwZXJjZW50IikuY3NzKCJjb2xvciIsIHBlcmNlbnRDb2xvcik7CgogICAgICAgICQoIiNwZXJjZW50SGVscGZ1bCIpLmFmdGVyKCI8ZGl2IGlkPSdwcm9ncmVzcyc+PC9kaXY+Iik7CiAgICB9Cn0pOw=="},{"name":"Interesting Questions alternate highlighting","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.stackexchange.com/*","*://*.stackoverflow.com/*","*://*.superuser.com/*","*://*.serverfault.com/*","*://*.askubuntu.com/*","*://*.stackapps.com/*","*://*.mathoverflow.net/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831417},"enabled":true,"position":9,"file_url":"https://gist.github.com/shu8/415cd905568ad9667f46/raw/ffbc35151fbecce5436aa819bf282336c42b59fb/favoriteQuestions.user.js","uuid":"2a77d2d9-e7cf-4487-9acd-ecbcb7d8e4e3","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBJbnRlcmVzdGluZyBRdWVzdGlvbnMgYWx0ZXJuYXRlIGhpZ2hsaWdodGluZwovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly9zdGFja2V4Y2hhbmdlLmNvbS91c2Vycy80MzM3ODEwLyVFMSVCOSVBNyVEMCVCRCVDQSU4QSVDMyU5RgovLyBAdmVyc2lvbiAgICAgIDAuMgovLyBAZGVzY3JpcHRpb24gIENoYW5nZXMgU3RhY2sgRXhjaGFuZ2Ugd2Vic2l0ZXMgJ2Zhdm9yaXRlIHRhZ3MnIGhpZ2hsaWdodGluZyB0byBqdXN0IHRoZSB0YWcuCi8vIEBhdXRob3IgICAgICAg4bmn0L3KisOfCi8vIEBtYXRjaAkJICo6Ly8qLnN0YWNrZXhjaGFuZ2UuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLnN0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLnN1cGVydXNlci5jb20vKgovLyBAbWF0Y2ggCQkgKjovLyouc2VydmVyZmF1bHQuY29tLyoKLy8gQG1hdGNoIAkJICo6Ly8qLmFza3VidW50dS5jb20vKgovLyBAbWF0Y2gJCSAqOi8vKi5zdGFja2FwcHMuY29tLyoKLy8gQG1hdGNoCQkgKjovLyoubWF0aG92ZXJmbG93Lm5ldC8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KdmFyIHVzZXJzY3JpcHQgPSBmdW5jdGlvbigkKSB7CiAgICAkKHdpbmRvdykuYmluZCgibG9hZCIsIGZ1bmN0aW9uKCkgewogICAgICAgIAogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdzdXBlcnVzZXInKSA+IC0xKSB7IC8vc3VwZXJ1c2VyCiAgICAgICAgICAgIHZhciBiZXR0ZXJDU1MgPSB7CiAgICAgICAgICAgIAliYWNrZ3JvdW5kQ29sb3I6ICcjYTFlYWZmJywKICAgICAgICAgICAgICAgIGNvbG9yOiAnYmxhY2snICAgICAgICAgICAgICAgIAogICAgICAgIAl9OwogICAgICAgIH0KICAgICAgICBlbHNlIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZi5pbmRleE9mKCdzdGFja292ZXJmbG93JykgPiAtMSkgeyAvL3N0YWNrb3ZlcmZsb3cKICAgICAgICAJdmFyIGJldHRlckNTUyA9IHsKICAgICAgICAgICAgCWJhY2tncm91bmRDb2xvcjogJyNmZmVmYzYnLAogICAgICAgICAgICAJYm9yZGVyV2lkdGg6ICcwJyAgICAgICAgICAgICAgICAKICAgICAgICAJfTsKICAgICAgICB9CiAgICAgICAgZWxzZSBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignLnN0YWNrZXhjaGFuZ2UuY29tJykgPiAtMSkgewogICAgICAgICAgICBpZiAod2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignbWV0YScpID09PSAtMSkgeyAvL2JldGEgc2l0ZXMKICAgICAgICAgICAgICAgIHZhciBiZXR0ZXJDU1MgPSB7CiAgICAgICAgICAgIAliYWNrZ3JvdW5kQ29sb3I6ICcjYzNkYWZhJywKICAgICAgICAgICAgCWJvcmRlcldpZHRoOiAnMCcgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICB9OyAKICAgICAgICAgICAgfQogICAgICAgIH0KCiAgICAgICAgdmFyIHggPSAkKCIjaW50ZXJlc3RpbmdUYWdzIikudGV4dCgpOwogICAgICAgIHZhciBpbnRlcmVzdGluZyA9IHguc3BsaXQoJyAnKTsKICAgICAgICBpbnRlcmVzdGluZy5wb3AoKTsgLy9CZWNhdXNlIHRoZXJlJ3Mgb25lIGV4dHJhIHZhbHVlIGF0IHRoZSBlbmQKCiAgICAgICAgCgogICAgICAgICQoIi50YWdnZWQtaW50ZXJlc3RpbmcgPiAuc3VtbWFyeSA+IC50YWdzID4gLnBvc3QtdGFnIikuZmlsdGVyKGZ1bmN0aW9uKGluZGV4KSB7CiAgICAgICAgICAgIHJldHVybiBpbnRlcmVzdGluZy5pbmRleE9mKCQodGhpcykudGV4dCgpKSA+IC0xOwogICAgICAgIH0pLmNzcyhiZXR0ZXJDU1MpOwoKICAgICAgICAvLyAkKCIudGFnZ2VkLWludGVyZXN0aW5nIikucmVtb3ZlQ2xhc3MoInRhZ2dlZC1pbnRlcmVzdGluZyIpOwogICAgfSk7Cn07Cgp2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKZWwudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwplbC50ZXh0ID0gJygnICsgdXNlcnNjcmlwdCArICcpKGpRdWVyeSk7JzsKZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChlbCk7"},{"name":"Hide chat room description and tags","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://chat.stackexchange.com/*","*://chat.stackoverflow.com/*","*://chat.meta.stackexchange.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831440},"enabled":true,"position":10,"uuid":"513379ad-9b2c-4614-9efe-231a67d367a5","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIEhpZGUgY2hhdCByb29tIGRlc2NyaXB0aW9uIGFuZCB0YWdzCi8vIEBuYW1lc3BhY2UgICBtYWlkY2FmZQovLyBAbWF0Y2ggICAgICAgICo6Ly9jaGF0LnN0YWNrZXhjaGFuZ2UuY29tLyoKLy8gQG1hdGNoICAgICAgICAqOi8vY2hhdC5zdGFja292ZXJmbG93LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgKjovL2NoYXQubWV0YS5zdGFja2V4Y2hhbmdlLmNvbS8qCi8vIEB2ZXJzaW9uICAgICAxLjAuNAovLyBAZ3JhbnQgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCmZ1bmN0aW9uIGFkZEdsb2JhbFN0eWxlKGNzcykgewogIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKICBzdHlsZS5pbm5lckhUTUwgPSBjc3M7CiAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzdHlsZSk7Cn0KCmFkZEdsb2JhbFN0eWxlKCcjcm9vbWRlc2MsICNyb29tLXRhZ3Mge2Rpc3BsYXk6IG5vbmU7fScpOw=="},{"name":"character limits restriction","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/*","*://*.serverfault.com/*","*://*.stackapps.com/*","*://*.stackexchange.com/*","*://*.stackoverflow.com/*","*://*.superuser.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831454},"enabled":true,"position":11,"uuid":"0945c427-cc2b-481c-9195-8dfb244f8b4c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgICBjaGFyYWN0ZXIgbGltaXRzIHJlc3RyaWN0aW9uCi8vIEBuYW1lc3BhY2UgICAgICAgU3RhY2tFeGNoYW5nZQovLyBAZGVzY3JpcHRpb24gICAgIEJ5cGFzcyBjaGFyYWN0ZXIgbGltaXRzIHJlc3RyaWN0aW9uIGZvciBjb21tZW50cwovLyBAdmVyc2lvbiAgICAgICAgIDEuMAovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLmFza3VidW50dS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLnNlcnZlcmZhdWx0LmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAgKjovLyouc3RhY2thcHBzLmNvbS8qCi8vIEBtYXRjaCAgICAgICAgICAgKjovLyouc3RhY2tleGNoYW5nZS5jb20vKgovLyBAbWF0Y2ggICAgICAgICAgICo6Ly8qLnN0YWNrb3ZlcmZsb3cuY29tLyoKLy8gQG1hdGNoICAgICAgICAgICAqOi8vKi5zdXBlcnVzZXIuY29tLyoKLy8gPT0vVXNlclNjcmlwdD09Cgp2YXIgc2NyaXB0ID0gZnVuY3Rpb24oJCkgewogICAgJChkb2N1bWVudCkuZGVsZWdhdGUoJ3RleHRhcmVhW25hbWU9Y29tbWVudF0nICwgImZvY3VzIiwgZnVuY3Rpb24oKXsKICAgICAgICAgbSA9ICQodGhpcykudmFsKCkubGVuZ3RoCiAgICAgICAgIGZvcih2YXIgaT0wOyBpPCAoMTUgLSBtKTsgaSsrKXsKICAgICAgICAgJCh0aGlzKS52YWwoJCh0aGlzKS52YWwoKSArICJcdTIwMGIiKQogICAgICAgIH0KICAgIH0pCn07Cgp2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsKZWwudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOwplbC50ZXh0ID0gJygnICsgc2NyaXB0ICsgJykoalF1ZXJ5KTsnOwpkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKGVsKTs="},{"name":"Magic™Editor","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/\\w*.?(stackoverflow|stackexchange|serverfault|superuser|askubuntu|stackapps)\\.com\\/(questions|posts|review|tools)\\/(?!tagged\\/|new\\/).*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831467},"enabled":true,"position":12,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/Magic%E2%84%A2Editor.user.js","uuid":"c8fdd2ca-2370-4737-bb6b-437ca517e31b","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICAgIE1hZ2lj4oSiRWRpdG9yCi8vIEBhdXRob3IgICAgICAgICBDYW1lcm9uIEJlcm5oYXJkdCAoQXN0cm9DQikKLy8gQGRldmVsb3BlciAgICAgIEpvbmF0aGFuIFRvZGQgKGp0MGRkKQovLyBAZGV2ZWxvcGVyICAgICAgc2F0aHlhYmhhdAovLyBAY29udHJpYnV0b3IgICAgVW5paGVkcm9uCi8vIEBjb250cmlidXRvciAgICBUaW55IEdpYW50Ci8vIEBjb250cmlidXRvciAgICBNb2dzZGFkCi8vIEBncmFudCAgICAgICAgICBub25lCi8vIEBsaWNlbnNlICAgICAgICBNSVQKLy8gQG5hbWVzcGFjZSAgICAgIGh0dHA6Ly9naXRodWIuY29tL1NPLUNsb3NlLVZvdGUtUmV2aWV3ZXJzL1VzZXJTY3JpcHRzL01hZ2lj4oSiRWRpdG9yCi8vIEB2ZXJzaW9uICAgICAgICAxLjUuMi42NQovLyBAZGVzY3JpcHRpb24gICAgRml4IGNvbW1vbiBncmFtbWFyL3VzYWdlIGFubm95YW5jZXMgb24gU3RhY2sgRXhjaGFuZ2UgcG9zdHMgd2l0aCBhIGNsaWNrCi8vICAgICAgICAgICAgICAgICBGb3JrZWQgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vQXN0cm9DQi9TdGFjay1FeGNoYW5nZS1FZGl0b3ItVG9vbGtpdAovLyBAaW5jbHVkZSAgICAgICAgL15odHRwcz86XC9cL1x3Ki4/KHN0YWNrb3ZlcmZsb3d8c3RhY2tleGNoYW5nZXxzZXJ2ZXJmYXVsdHxzdXBlcnVzZXJ8YXNrdWJ1bnR1fHN0YWNrYXBwcylcLmNvbVwvKHF1ZXN0aW9uc3xwb3N0c3xyZXZpZXd8dG9vbHMpXC8oPyF0YWdnZWRcL3xuZXdcLykuKi8KLy8gPT0vVXNlclNjcmlwdD09CgooZnVuY3Rpb24oKSB7CiAgICAidXNlIHN0cmljdCI7CiAgICBmdW5jdGlvbiBleHRlbmRFZGl0b3Iocm9vdCkgewogICAgICAgIHZhciBBcHAgPSB7fTsKCiAgICAgICAgLy8gUGxhY2UgZWRpdCBpdGVtcyBoZXJlCiAgICAgICAgQXBwLml0ZW1zID0ge307CiAgICAgICAgQXBwLm9yaWdpbmFscyA9IHt9OwoKICAgICAgICAvLyBQbGFjZSBzZWxlY3RlZCBqUXVlcnkgaXRlbXMgaGVyZQogICAgICAgIEFwcC5zZWxlY3Rpb25zID0ge307CgogICAgICAgIC8vIFBsYWNlICJnbG9iYWwiIGFwcCBkYXRhIGhlcmUKICAgICAgICBBcHAuZ2xvYmFscyA9IHt9OwoKICAgICAgICAvLyBQbGFjZSAiY29uc3QiIGFwcCBkYXRhIGhlcmUKICAgICAgICBBcHAuY29uc3RzID0ge307CgogICAgICAgIC8vIFBsYWNlICJoZWxwZXIiIGZ1bmN0aW9ucyBoZXJlCiAgICAgICAgQXBwLmZ1bmNzID0ge307CgogICAgICAgIC8vIFRydWUgdG8gZGlzcGxheSBjb3VudHMgYW5kIC8gb3IgcnVsZSBuYW1lcyBpbiBFZGl0IFN1bW1hcnkKICAgICAgICBBcHAuZ2xvYmFscy5zaG93Q291bnRzID0gZmFsc2U7CiAgICAgICAgQXBwLmdsb2JhbHMuc2hvd1J1bGVzID0gZmFsc2U7CgogICAgICAgIEFwcC5nbG9iYWxzLnJvb3QgPSByb290OwoKICAgICAgICBBcHAuZ2xvYmFscy5yZWFzb25zID0ge307CgogICAgICAgIEFwcC5nbG9iYWxzLnJlcGxhY2VkU3RyaW5ncyA9IHsKICAgICAgICAgICAgImF1dG8iOiAgIFtdLAogICAgICAgICAgICAicXVvdGUiOiAgW10sCiAgICAgICAgICAgICJpbmxpbmUiOiBbXSwKICAgICAgICAgICAgImJsb2NrIjogIFtdLAogICAgICAgICAgICAibHNlYyI6ICAgW10sCiAgICAgICAgICAgICJsaW5rcyI6ICBbXSwKICAgICAgICAgICAgInRhZ3MiOiAgIFtdCiAgICAgICAgfTsKICAgICAgICBBcHAuZ2xvYmFscy5wbGFjZUhvbGRlcnMgPSB7CiAgICAgICAgICAgICJhdXRvIjogICAiX3hBdXRveEluc2VydHhUZXh0eFBsYWNleEhvbGRlcl8iLAogICAgICAgICAgICAicXVvdGUiOiAgIl94QmxvY2t4UXVvdGV4UGxhY2V4SG9sZGVyeF8iLAogICAgICAgICAgICAiaW5saW5lIjogIl94Q29kZXhJbmxpbmV4UGxhY2V4SG9sZGVyeF8iLAogICAgICAgICAgICAiYmxvY2siOiAgIl94Q29kZXhCbG9ja3hQbGFjZXhIb2xkZXJ4XyIsCiAgICAgICAgICAgICJsc2VjIjogICAiX3hMaW5reFNlY3Rpb254UGxhY2V4SG9sZGVyeF8iLAogICAgICAgICAgICAibGlua3MiOiAgIl94TGlua3hQbGFjZXhIb2xkZXJ4XyIsCiAgICAgICAgICAgICJ0YWdzIjogICAiX3hUYWd4UGxhY2V4SG9sZGVyeF8iCiAgICAgICAgfTsKICAgICAgICBBcHAuZ2xvYmFscy5wbGFjZUhvbGRlckNoZWNrcyA9IHsKICAgICAgICAgICAgImF1dG8iOiAgIC9feEF1dG94SW5zZXJ0eFRleHR4UGxhY2V4SG9sZGVyXy9naSwKICAgICAgICAgICAgInF1b3RlIjogIC9feEJsb2NreFF1b3RleFBsYWNleEhvbGRlcnhfL2dpLAogICAgICAgICAgICAiaW5saW5lIjogL194Q29kZXhJbmxpbmV4UGxhY2V4SG9sZGVyeF8vZ2ksCiAgICAgICAgICAgICJibG9jayI6ICAvX3hDb2RleEJsb2NreFBsYWNleEhvbGRlcnhfL2dpLAogICAgICAgICAgICAibHNlYyI6ICAgL194TGlua3hTZWN0aW9ueFBsYWNleEhvbGRlcnhfL2dpLAogICAgICAgICAgICAibGlua3MiOiAgL194TGlua3hQbGFjZXhIb2xkZXJ4Xy9naSwKICAgICAgICAgICAgInRhZ3MiOiAgIC9feFRhZ3hQbGFjZXhIb2xkZXJ4Xy9naQogICAgICAgIH07CiAgICAgICAgQXBwLmdsb2JhbHMuY2hlY2tzID0gewogICAgICAgICAgICAvLyAgICAgICAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9jSTZvSzIvMSBhdXRvbWF0aWNhbGx5IGluc2VydGVkIHRleHQKICAgICAgICAgICAgImF1dG8iOiAgIC9bXl0qXDxcIVwtXC0gRW5kIG9mIGF1dG9tYXRpY2FsbHkgaW5zZXJ0ZWQgdGV4dCBcLVwtXD4vZywKICAgICAgICAgICAgLy8gICAgICAgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvZlU1bEU2LzEgYmxvY2txdW90ZXMKICAgICAgICAgICAgInF1b3RlIjogIC9eXD4oPzooPyFcblxuKVteXSkrL2dtLAogICAgICAgICAgICAvLyAgICAgICAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9sTDZmSDMvMSBzaW5nbGUtbGluZSBpbmxpbmUgY29kZQogICAgICAgICAgICAiaW5saW5lIjogL2BbXmBcbl0rYC9nLAogICAgICAgICAgICAvLyAgICAgICAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9lQzdtRjcvMiBjb2RlIGJsb2NrcyBhbmQgbXVsdGlsaW5lIGlubGluZSBjb2RlLgogICAgICAgICAgICAiYmxvY2siOiAgL2BbXmBdK2B8Xig/Oig/OlsgXXs0fXxbIF17MCwzfVx0KS4rKD86W1xyXG5dPyg/IVxuXFMpKD86WyBdK1xuKSopKykrL2dtLAogICAgICAgICAgICAvLyAgICAgICAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci90WjRlWTMvNyBsaW5rLXNlY3Rpb25zIAogICAgICAgICAgICAibHNlYyI6ICAgLyg/OiAgKD86XFtcZFxdKTogXHcqOitcL1wvLipcbiopKy9nLAogICAgICAgICAgICAvLyAgICAgICAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci90WjRlWTMvMjAgbGlua3MgYW5kIHBhdGhuYW1lcwogICAgICAgICAgICAibGlua3MiOiAgL1xbW15cXVxuXStcXSg/OlwoW15cKVxuXStcKXxcW1teXF1cbl0rXF0pfCg/OlwvXHcrXC98LjpcXHxcdyo6XC9cL3xcLitcL1suL1x3XGRdK3woPzpcdytcLlx3Kyl7Mix9KVsuL1x3XGQ6Lz8jXFtcXUAhJCYnKCkqKyw7PVwtfiVdKi9nLAogICAgICAgICAgICAvLyAgICAgICAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9iRjBpUTAvMiAgIHRhZ3MgYW5kIGh0bWwgY29tbWVudHMgCiAgICAgICAgICAgICJ0YWdzIjogICAvXDxbXC9hLXpdK1w+fFw8XCFcLVwtW14+XStcLVwtXD58XFt0YWc6W1x3Li1dK1xdL2dpCiAgICAgICAgfTsKICAgICAgICBBcHAuZ2xvYmFscy5jaGVja3NyID0gKGZ1bmN0aW9uKG8xKXsKICAgICAgICAgICAgdmFyIG8yID0ge307CiAgICAgICAgICAgIHZhciBrPSBPYmplY3Qua2V5cyhvMSk7CiAgICAgICAgICAgIGZvcih2YXIgaSA9IGsubGVuZ3RoLTE7IGkgPj0gMDsgLS1pKSBvMltrW2ldXSA9IG8xW2tbaV1dOwogICAgICAgICAgICByZXR1cm4gbzI7CiAgICAgICAgfSkoQXBwLmdsb2JhbHMuY2hlY2tzKTsKCiAgICAgICAgLy8gQXNzaWduIG1vZHVsZXMgaGVyZQogICAgICAgIEFwcC5waXBlTW9kcyA9IHt9OwoKICAgICAgICAvLyBEZWZpbmUgb3JkZXIgaW4gd2hpY2ggbW9kcyBhZmZlY3QgIGhlcmUKICAgICAgICBBcHAuZ2xvYmFscy5vcmRlciA9IFsib21pdCIsICJjb2RlZml4IiwgImVkaXQiLCAiZGlmZiIsICJyZXBsYWNlIiwgIm91dHB1dCJdOwogICAgICAgIAogICAgICAgIC8vIERlZmluZSByZWFzb24gY29uc3RhbnQgc3RyaW5ncwogICAgICAgIEFwcC5jb25zdHMucmVhc29ucyA9IHsKICAgICAgICAgICAgbGVnYWxTTzogICAgICAgIidTdGFjayBPdmVyZmxvdycgaXMgdGhlIGxlZ2FsIG5hbWUiLAogICAgICAgICAgICBsZWdhbFNFOiAgICAgICAiJ1N0YWNrIEV4Y2hhbmdlJyBpcyB0aGUgbGVnYWwgbmFtZSIsCiAgICAgICAgICAgIHRpZHlUaXRsZTogICAgICJ0aWRpZWQgdGl0bGUiLAogICAgICAgICAgICB0cmFkZW1hcms6ICAgICAidHJhZGVtYXJrIGNhcGl0YWxpemF0aW9uIiwKICAgICAgICAgICAgYWNyb255bTogICAgICAgImFjcm9ueW0gY2FwaXRhbGl6YXRpb24iLAogICAgICAgICAgICBzcGVsbGluZzogICAgICAic3BlbGxpbmciLAogICAgICAgICAgICBncmFtbWFyOiAgICAgICAiZ3JhbW1hciIsCiAgICAgICAgICAgIG5vaXNlOiAgICAgICAgICJub2lzZSByZWR1Y3Rpb24iLAogICAgICAgICAgICBwdW5jdHVhdGlvbjogICAicHVuY3R1YXRpb24iLAogICAgICAgICAgICBsYXlvdXQ6ICAgICAgICAibGF5b3V0IiwKICAgICAgICAgICAgc2lsZW50OiAgICAgICAgIiIsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVW5yZXBvcnRlZCAvIHVuY291bnRlZAogICAgICAgICAgICB0aXRsZVNheXNBbGw6ICAicmVwbGljYXRlZCB0aXRsZSBpbiBib2R5IgogICAgICAgIH07CgogICAgICAgIAogICAgICAgIC8vIEdldCB0aGUgb3JpZ2luYWwgcG9zdCB0YWdzCiAgICAgICAgQXBwLmdsb2JhbHMudGFnbGlzdCA9IFtdOwogICAgICAgICQoJ2EucG9zdC10YWcnKS5lYWNoKCBmdW5jdGlvbigpewogICAgICAgICAgICB2YXIgbmV3dGFnID0gJCh0aGlzKS50ZXh0KCk7CiAgICAgICAgICAgIGlmIChBcHAuZ2xvYmFscy50YWdsaXN0LmluZGV4T2YobmV3dGFnKSA9PT0gLTEpIHsKICAgICAgICAgICAgICAgIEFwcC5nbG9iYWxzLnRhZ2xpc3QucHVzaChuZXd0YWcpOyAgICAgICAgICAgICAgICAKICAgICAgICAgICAgfQogICAgICAgIH0pOwoKICAgICAgICAvLyBEZWZpbmUgZWRpdCBydWxlcwogICAgICAgIEFwcC5lZGl0cyA9IHsKICAgICAgICAgICAgLy8gVGlkeSB0aGUgdGl0bGUKICAgICAgICAgICAgbm9uZWVkdG95ZWxsOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXigoPz0uKltBLVpdKVteYS16XSopJC9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKGlucHV0KSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0LnRyaW0oKS5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSArIGlucHV0LnRyaW0oKS5zdWJzdHIoMSkudG9Mb3dlckNhc2UoKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50aWR5VGl0bGUKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdGFnbGlzdDogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci93SDRvQTMvMjEKICAgICAgICAgICAgICAgIGV4cHI6IG5ldyBSZWdFeHAoICAiKD86Xig/OlsoXT8oPzpfeFRhZ3N4XykoPzphbmR8WyAsLiYrLy1dKSopK1s6LiBcKS1dKnxcYig/Ols6LiBcKC1dfGlufHdpdGh8dXNpbmd8Ynl8Zm9yKSooPzooPzpfeFRhZ3N4XykoPzphbmR8WyAsJisvKS1dKSopKyhbPy4hIF0qKSQpIgogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvX3hUYWdzeF8vZyxBcHAuZ2xvYmFscy50YWdsaXN0Lm1hcChlc2NhcGVUYWcpLmpvaW4oInwiKSksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vLnJlcGxhY2UoL1xcKD89W2JzU2REd1ddKS9nLCJcXCIpLCAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3BZMWhJMi8xIC0gV0JOIHRvIGZpZ3VyZSB0aGlzIG91dC4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dpJyksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxIiwKICAgICAgICAgICAgICAgIGRlYnVnOiBmYWxzZSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRpZHlUaXRsZQogICAgICAgICAgICB9LAogICAgICAgICAgICBzbzogewogICAgICAgICAgICAgICAgZXhwcjogL1xic3RhY2tccypvdmVyZmxvd1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJTdGFjayBPdmVyZmxvdyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5sZWdhbFNPCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJzdGFja1xzKmV4Y2hhbmdlXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlN0YWNrIEV4Y2hhbmdlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmxlZ2FsU0UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwYW5zaW9uU086IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilTT1xiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxU3RhY2sgT3ZlcmZsb3ciLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubGVnYWxTTwogICAgICAgICAgICB9LAogICAgICAgICAgICBleHBhbnNpb25TRTogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKVNFXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFTdGFjayBFeGNoYW5nZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5sZWdhbFNFCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8qCiAgICAgICAgICAgICoqIFRyYWRlbWFyayBuYW1lcwogICAgICAgICAgICAqKi8KICAgICAgICAgICAganNmaWRkbGU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmpzID9maWRkbGVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiSlNGaWRkbGUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1ldGVvcjogeyAgLy8gbXVzdCBhcHBlYXIgYmVmb3JlICJqYXZhc2NyaXB0IgogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKW1ldGVvciAqKGpzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoc3RyLHByZSx1cHBlcmNhc2UpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZml4ZWQgPSBwcmUgKyAiTWV0ZW9yIiArICh1cHBlcmNhc2UgPyB1cHBlcmNhc2UudG9VcHBlckNhc2UoKSA6ICcnKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZml4ZWQ7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGtub2Nrb3V0X2pzOiB7ICAvLyBtdXN0IGFwcGVhciBiZWZvcmUgImphdmFzY3JpcHQiCiAgICAgICAgICAgICAgICBleHByOiAvXGJrbm9ja291dFsuIF0/anNcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiS25vY2tvdXQuanMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNjcmlwdDogeyAgLy8gU3BlbGxpbmcgcnVsZSBvdXQtb2Ytb3JkZXIsIG11c3QgcnVuIGJlZm9yZSBqYXZhc2NyaXB0ICYgZ29vZ2xlX2FwcHNfc2NyaXB0CiAgICAgICAgICAgICAgICBleHByOiAvKHMpY1tyaV0rcHQ/KGluZ3xzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFjcmlwdCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGphdmFzY3JpcHQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XikoamF2YT9zY3I/aXB0P3xqc3xqYXZhIHNjcmlwdD8pXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxSmF2YVNjcmlwdCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAganF1ZXJ5OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJqcXVlP3JyP3lcYi9naSwgIC8vIGpxdXJ5LCBqcXVlcnJ5LCBqcXVycnkuLi4gfjYwMCBzcGVsbGluZyBtaXN0YWtlcwogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJqUXVlcnkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFuZ3VsYXI6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmFuZ3VsYXIoPzpqcyk/XGIoPyEtKS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiQW5ndWxhckpTIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBwaHA6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXBocFtcZF0/XGIoPyFcLmluaSkvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKWNcYig/OiN8XCtcKyk/L2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBqYXZhOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pamF2YVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMUphdmEiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNxbGl0ZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xic3FsaXRlKFxzKlswLTldKilcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiU1FMaXRlJDEiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFuZHJvaWQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmFuZHJvaWRcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiQW5kcm9pZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb3JhY2xlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJvcmFjbGVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiT3JhY2xlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICB3aW5kb3dzOiB7CiAgICAgICAgICAgICAgICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2pGOXpLMS84CiAgICAgICAgICAgICAgICBleHByOiAvXGIoPzp3aW4oPz0oPzpccysoPzoya3xbMC05Ll0rfGNlfG1lfG50fHhwfHZpc3RhfHNlcnZlcikpKXx3aW5kb3dzKSg/OlxzKygya3xbMC05Ll0rfGNlfG1lfG50fHhwfHZpc3RhfHNlcnZlcikpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKG1hdGNoLCB2ZXIpIHsKICAgICAgICAgICAgICAgICAgICB2ZXIgPSAhdmVyID8gJycgOiAnICcrdmVyCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2NlL2ksICdDRScpCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL21lL2ksICdNRScpCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL250L2ksICdOVCcpCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL3hwL2ksICdYUCcpCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLzJrL2ksICcyMDAwJykKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvdmlzdGEvaSwgJ1Zpc3RhJykKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvc2VydmVyL2ksICdTZXJ2ZXInKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ1dpbmRvd3MnICsgdmVyOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICB1bml4OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJ1bml4XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlVuaXgiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGxpbnV4OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJsaW51eFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJMaW51eCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd29yZHByZXNzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJ3b3JkID9wcmVzc1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJXb3JkUHJlc3MiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG15c3FsOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJteXNxbFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJNeVNRTCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbm9kZWpzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJub2RlXC4/anNcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiTm9kZS5qcyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXBhY2hlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJhcGFjaGUoW1xkXSk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkFwYWNoZSQxIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBnaXQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilnaXRcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFHaXQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdpdGh1YjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiZ2l0aHViXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkdpdEh1YiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZmFjZWJvb2s6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3Ivck8xdEg0LzIKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmYoPzphW2NzXWU/KT9iZT9vK2s/KHMpPy9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbihzdHIscykgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAiRmFjZWJvb2siICsgKHMgPyAiJ3MiIDogIiIpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBweXRob246IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnB5dGhvblxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJQeXRob24iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlvczogewogICAgICAgICAgICAgICAgZXhwcjogL1xiaW9zXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogImlPUyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW9zbnVtOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJpb3MoWzAtOV0pXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogImlPUyAkMSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdWJ1bnR1OiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3NUOHdWNS8yCiAgICAgICAgICAgICAgICBleHByOiAvXGJbdW9hXStuP2JbdW9hXSpbdG5dW291YV0qW3RudV1bb3VhXSpcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiVWJ1bnR1IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICB2Ym5ldDogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9iQjlwUDMvOAogICAgICAgICAgICAgICAgZXhwcjogLyg/OnZiXC5uZXR8XGJ2YnwoPzpbXlxiXHcuXXxeKVwubmV0KVxiKD86XHMqWzAtOV0rKT9ccyooPzpmcmFtZXdvcmt8Y29yZSk/L2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKHN0cikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHIucmVwbGFjZSgvKFteLl0pdmIvaSwgJyQxVkInKQogICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oW14uXSlhc3AvaSwgJyQxQVNQJykKICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvbmV0L2ksICdORVQnKQogICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9mcmFtZXdvcmsvaSwgJ0ZyYW1ld29yaycpCiAgICAgICAgICAgICAgICAgICAgLnJlcGxhY2UoL2NvcmUvaSwgJ0NvcmUnKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdmJhX3JlbGF0ZWQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKSg/OnZiYXx2YnN8dmJjfGV2Ynx2Ym98dmJwfHZiaWRlKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICB2YnNjcmlwdDogewogICAgICAgICAgICAgICAgZXhwcjogL1xidmJzY3JpcHQvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlZCU2NyaXB0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBleGNlbDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiZXhjZWxcYig/IVwtfFwuXHcpL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJFeGNlbCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVnZXg6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnJlZ2c/W2VhXT94KHApP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJSZWdFeCQxIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBwb3N0Z3Jlc3FsOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJwb3N0P2dyZXMqKHE/bHxzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiUG9zdGdyZVNRTCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcGF5cGFsOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJwYXlwYWxcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiUGF5UGFsIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICB0b21jYXQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnRvbWNhdChbMC05Ll0qKS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiVG9tY2F0JDEiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5ldGJlYW5zOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoPzpuZXRiZWFuP3xuZXQtYmVhbnxuZXQgYmVhbnxuZXRiZWVuKXM/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIk5ldEJlYW5zIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBuZ2lueDogewogICAgICAgICAgICAgICAgZXhwcjogL1xibmdpbnhcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBmaXJlZm94OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJmaXJlP2ZveFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJGaXJlZm94IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBzYWZhcmk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnNhZmFyaVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJTYWZhcmkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNocm9tZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiY2hyb21lXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkNocm9tZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ251OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJnbnVcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBnY2M6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKWdjY1xiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1hdmVuOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJtYXZlblxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJNYXZlbiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgeW91dHViZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xieW91dHViZVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJZb3VUdWJlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBhbWF6b246IHsKICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvZFIwcEo3LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhbWF6b24oPzogKT8oPzpyZWRzaGlmdHx3ZWIgc2VydmljZXN8Y2xvdWRmcm9udHxjb25zb2xlKT8pKCg/OiApPyg/OmVjMnxhd3N8czN8cmRzfHNxc3xpYW18ZWxifGVtcnx2cGMpKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbihzdHIsdGl0bGVjYXNlLHVwcGVyY2FzZSkgewogICAgICAgICAgICAgICAgICAgIHZhciBmaXhlZCA9IHRpdGxlY2FzZS50b1RpdGxlQ2FzZSgpICsgKHVwcGVyY2FzZSA/IHVwcGVyY2FzZS50b1VwcGVyQ2FzZSgpIDogJycpOwogICAgICAgICAgICAgICAgICAgIHJldHVybiBmaXhlZDsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgemVuZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiemVuZCgoPzogKT8oPzpmcmFtZXdvcmt8c3R1ZGlvfGd1YXJkKSk/XGIvZ2ksCiAgICAgICAgICAgICAgICAvL3JlcGxhY2VtZW50OiBTdHJpbmcudG9UaXRsZUNhc2UsICAvLyBEb2Vzbid0IHdvcmsgbGlrZSBidWlsdC1pbiB0b1VwcGVyQ2FzZSwgcmV0dXJucyAndW5kZWZpbmVkJy4gTG9hZCBvcmRlcj8KICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbihzdHIscHJvZCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHIudG9UaXRsZUNhc2UoKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICB0d2l0dGVyOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJ0d2l0dGVyXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlR3aXR0ZXIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJvb3RzdHJhcDogeyAgICAgLy8gImJvb3RzdHJhcCIgaXMgYWxzbyBhIGdlbmVyYWwgY29tcHV0aW5nIHRlcm0sIHNvIGV4cGVjdCBzb21lIGZhbHNlIHBvc2l0aXZlcwogICAgICAgICAgICAgICAgZXhwcjogL1xiYm9vdHN0P3I/YXBcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiQm9vdHN0cmFwIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBhcHBsZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiYXBwbGVcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJBcHBsZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXBob25lOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJpcGg/b25lP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJpUGhvbmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdvb2dsZTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9xVzhmSTgvMgogICAgICAgICAgICAgICAgZXhwcjogL1xiZ28rKD86ZytsZT98bGdlP3xnbD9lbCkoZXxlW2Ryc118aW5nKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKHN0cixzdWZmaXgpIHsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gIkdvb2dsIiArICgoc3VmZml4LnNlYXJjaCgvaW5nLykgPT0gLTEgKSA/ICJlIiA6ICIiKSArIHN1ZmZpeDsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ29vZ2xlX3ZlcmJlZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiZ29vZ2woPzplZHxpbmd8ZXIpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24oc3RyKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ci50b1RpdGxlQ2FzZSgpOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBzcHJlYWRzaGVldDogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9vSzR1VzMvMSAtIG11c3QgYXBwZWFyIGJlZm9yZSBnb29nbGVfdGhpbmdzCiAgICAgICAgICAgICAgICBleHByOiAvXGIocylbcHJdK1tlYV0rZHNoP2UrdCg/OmluZyk/KHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXByZWFkc2hlZXQkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBnb29nbGVfdGhpbmdzOiB7IC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvaVM1Zk8xLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmdvb2dsZVxiWyBcdF0qKD86bWFwcz98c2hlZXRzP3xkb2NzP3xkcml2ZXxzaXRlcz98Zm9ybXM/fGRvY3VtZW50cz98c3ByZWFkc2hlZXRzP3xpbWFnZXM/fHByZXNlbnRhdGlvbnM/fHBsYXkpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKHN0cikgewogICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHIudG9UaXRsZUNhc2UoKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ29vZ2xlX2FwcHNfc2NyaXB0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJnb29nbGVbLSBdPyg/OmFwcHM/KT9bLSBdP3NjcmlwdCg/OmluZ3xzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiR29vZ2xlIEFwcHMgU2NyaXB0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBibHVldG9vdGg6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmJsKD86dWV8b28pdG9vP3RoP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJCbHVldG9vdGgiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGxlbm92bzogewogICAgICAgICAgICAgICAgZXhwcjogL1xibGVubz92b1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJMZW5vdm8iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1hdGxhYjogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKW1hdGg/bGFiXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxTUFUTEFCIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBpbnRlcm5ldDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiaW50ZXJuZXRcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJJbnRlcm5ldCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgb2F1dGg6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3Ivc0EyY1E1LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYm9hdXRoKD86KD86ICkqKFxkKSg/IVwuXGQpfCg/OiApKihbXGQuXSspKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiT0F1dGgkMSAkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2ViX3NlcnZpY2VzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJ3ZWIgc2VydmljZXNcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJXZWIgc2VydmljZXMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9wZW5jdjogewogICAgICAgICAgICAgICAgZXhwcjogL1xib3BlbmN2XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIk9wZW5DViIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcnVieTogewogICAgICAgICAgICAgICAgZXhwcjogL1xicnVieVxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlJ1YnkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJhaWxzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJyYWlsc1xiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlJhaWxzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBncmFpbHM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmdyYWlsc1xiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkdyYWlscyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VidmVyc2lvbjogewogICAgICAgICAgICAgICAgZXhwcjogL1xic3VidmVyc1tpb10qblxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIlN1YnZlcnNpb24iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGphdmFmeDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiamF2YWZ4XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkphdmFGWCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVscGhpOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJkZWxwaGlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiRGVscGhpIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBkb3RuZXRudWtlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJkb3RuZXRudWtlXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkRvdE5ldE51a2UiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNpbHZlcmxpZ2h0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJzaWx2P2VybCg/OmlnaHR8aXRlKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJTaWx2ZXJsaWdodCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2NpcHk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilzY2lweVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMVNjaVB5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBudW1weTogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKW51bXB5XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxTnVtUHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9wZW5zc2w6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilvcGVuc3NsXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxT3BlblNTTCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZHJ1cGFsOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pZHJ1cGFsXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxRHJ1cGFsIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBzYWFzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pc2Fhc1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMVNhYVMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGd3dDogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKWd3dFstIF0obW9zYWljfGRlc2lnbmVyKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAoc3RyLHByZSx0aXRsZWNhc2UpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgZml4ZWQgPSBwcmUgKyAiR1dUIiArICh0aXRsZWNhc2U/ICcgJyt0aXRsZWNhc2UudG9UaXRsZUNhc2UoKSA6ICcgJyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpeGVkOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBnbWFpbDogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKWdtYWlsKHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMUdtYWlsJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHhhbXBwOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4peGFtK3ArXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxWEFNUFAiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGdhbGF4eTogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKWdhbGF4eVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMUdhbGF4eSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbW9uZ286IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18Xiltb25nbyg/OlxzPyhkYikpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKHN0cixwcmUsdXBwZXJjYXNlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZpeGVkID0gcHJlICsgIk1vbmdvIiArICh1cHBlcmNhc2UgPyB1cHBlcmNhc2UudG9VcHBlckNhc2UoKSA6ICcnKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gZml4ZWQ7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHB5bW9uZ286IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilweW1vbmdvXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxUHlNb25nbyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2NhbGE6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilzY2FsYVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMVNjYWxhIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBtaWNyb3NvZnQ6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9kSjV0RTMvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKFttTV1pY3Jvc29mdD98W21NXWlyY29zb2Z0fE1bU3Ndb2Z0KVxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIk1pY3Jvc29mdCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW50ZWxsaXNlbnNlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJpbnRlbGw/aXNlbltzY11lP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJJbnRlbGxpU2Vuc2UiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNhc3M6IHsgIC8vIFN5bnRhY3RpY2FsbHkgQXdlc29tZSBTdHlsZSBTaGVldHMKICAgICAgICAgICAgICAgIGV4cHI6IC9cYnNhc3NcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiU2FzcyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaGVyb2t1OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJoZXJva3VcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiSGVyb2t1IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBvc194OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJvcyA/eFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJPUyBYIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBlbF9jYXBpdGFuOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJlbCA/Y2FwaT90YW5cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiRWwgQ2FwaXRhbiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaGFkb29wOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJoYWQrbytwK1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJIYWRvb3AiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRqYW5nbzogewogICAgICAgICAgICAgICAgZXhwcjogL1xiZGphbmdvXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkRqYW5nbyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdGNsOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pdGNsXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxVGNsIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBmbGlja3I6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmZsaWNrcig/IVwuXHcpL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJGbGlja3IiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBvaTogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pcG9pXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHZtd2FyZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xidm13YXJlP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJWTXdhcmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGhvcnRvbndvcmtzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4paG9ydG9uID93b3Jrc1stIF0oc2FuZGJveHxkYXRhIHBsYXRmb3JtfHBob2VuaXh8aGl2ZSk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKHN0cixwcmUsdGl0bGVjYXNlKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZpeGVkID0gcHJlICsgIkhvcnRvbndvcmtzIiArICh0aXRsZWNhc2U/ICcgJyt0aXRsZWNhc2UudG9UaXRsZUNhc2UoKSA6ICcgJyk7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpeGVkOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnRyYWRlbWFyawogICAgICAgICAgICB9LAogICAgICAgICAgICBhbWJhcmk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmFtYmFyaVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJBbWJhcmkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudHJhZGVtYXJrCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVjbGlwc2U6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmVjbGlbcHNdK2VcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiRWNsaXBzZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy50cmFkZW1hcmsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgLyoKICAgICAgICAgICAgKiogQWNyb255bXMgLSB0byBiZSBjYXBpdGFsaXplZCAoZXhjZXB0IHNvbWV0aW1lcyB3aGVuIHBhcnQgb2YgYSBmaWxlIG5hbWUpCiAgICAgICAgICAgICoqLwogICAgICAgICAgICB4X2h0bWw6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKSg6P2d8aHR8eGE/fHhodHxzZnxjc2h0KW1sW1xkLl0qXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBjc3M6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXM/Y3NzXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBqc29uOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18Xilqc29uXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBhamF4OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJhamF4XGIvZywgICAgIC8vIExlYXZlICJBamF4IiBhbG9uZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9Bc3Ryb0NCL1N0YWNrLUV4Y2hhbmdlLUVkaXRvci1Ub29sa2l0L2lzc3Vlcy80NQogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJBSkFYIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3FsOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18XilzcWxcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHVybGk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih1cltsaV0pKHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKG1hdGNoLHVwcGVyLGxvd2VyKSB7IHJldHVybiB1cHBlci50b1VwcGVyQ2FzZSgpICsgKGxvd2VyP2xvd2VyLnRvTG93ZXJDYXNlKCk6JycpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBhc3A6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18Xilhc3BcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBkZjogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKXBkZihzKT8vZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxUERGJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBhcGk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XilhcGkocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxQVBJJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBzc2w6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXNzbFxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBucG06IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYm5wbShzKT9cYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJOUE0kMSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ0cDogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pW3N0XT9mdHBzP1xiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBpcGE6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKWlwYVxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBhdmw6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKWF2bFxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBjbGlfY2dpOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18XiljW2xnXWlcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGxsOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18XilkbGxcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgbXAzX21wNDogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKW1wKDN8NCkocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxTVAkMiQzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ3VpOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pZ3VpKHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMUdVSSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3RwOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18XilzdHBcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRjcDogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pdGNwXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICB3cGY6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXdwZlxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgaHR0cDogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4paHR0cHM/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICB3b2ZmOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18Xil3b2ZmXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICB0dGY6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXR0ZlxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXB2X246IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmlwKHZbNDZdKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiSVAkMSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZxX2RuX3M6IHsgIC8vIEZRRE4sIEROLCBETlMKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKSg/OmZxKT9kbnM/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBpY21wOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJpY21wXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICByc3ZwOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJyc3ZwXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBzbm1wOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJzbm1wXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBjcHU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmNwdShzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiQ1BVJDEiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICByc3M6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXJzcz9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG12YzogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pbXZjXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBtdm46IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKW12blxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXNjaWk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18Xilhc2NjP2lpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMUFTQ0lJIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgZ3NvYXA6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18Xilnc29hcFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWdTT0FQIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgc29hcDogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKXNvYXBcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNzdjogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKWNzdlxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW1hZ2VfdHlwZXM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Ll18XikoZ2lmfGpwZT9nfGJtcHxwbmcpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICB5YW1sOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4peWFtbFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgc210cDogewogICAgICAgICAgICAgICAgZXhwcjogL1xic210cFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgcGhwbXlhZG1pbjogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKXBocG15YWRtaW5cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFwaHBNeUFkbWluIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgcGhwdW5pdDogewogICAgICAgICAgICAgICAgZXhwcjogLyhbXlxiXHcuXXxeKXBocHVuaXRcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFQSFBVbml0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgbWtsOiB7CiAgICAgICAgICAgICAgICBleHByOiAvKFteXGJcdy5dfF4pbWtsXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICB4c2w6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXhzbHQ/KD8hOilcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGpwYTogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4panBhXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICBqdm06IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKWp2bVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGlucTogewogICAgICAgICAgICAgICAgZXhwcjogLyg/OlteXGJcdy5dfF4pbGlucVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCkgeyByZXR1cm4gbWF0Y2gudG9VcHBlckNhc2UoKTsgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmFjcm9ueW0KICAgICAgICAgICAgfSwKICAgICAgICAgICAgbWQ1OiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD86W15cYlx3Ll18XiltZDVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHhmYV94c2Q6IHsgIC8vIFhNTCBGb3JtcyBBcmNoaXRlY3R1cmUKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXhmYXx4c2RcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHdzZGw6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKXdzZGxcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiAobWF0Y2gpIHsgcmV0dXJuIG1hdGNoLnRvVXBwZXJDYXNlKCk7IH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5hY3JvbnltCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGhkcDogeyAgLy8gSGFkb29wIHJlbGF0ZWQgYWNyb255bXMKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpbXlxiXHcuXXxeKWgoPzpkcHxkZnN8c20pXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBtYXRjaC50b1VwcGVyQ2FzZSgpOyB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuYWNyb255bQogICAgICAgICAgICB9LAogICAgICAgICAgICAvKgogICAgICAgICAgICAqKiBTcGVsbGluZyAtIENvcnJlY3QgY29tbW9uIHNwZWxsaW5nIGVycm9ycy4gKEluY2x1ZGluZyBhcG9zdHJvcGhlcywgd2hpY2ggYXJlIHJlYWxseSBncmFtbWFyLikKICAgICAgICAgICAgKiogQWNrbm93bGVkZ2VtZW50OiBBIHN1YnNldCBvZiB0ZXJtcyB3ZXJlIGFkYXB0ZWQgZnJvbSBQZXRlciBNb3J0ZW5zZW4ncyBsaXN0CiAgICAgICAgICAgICoqIChodHRwOi8vcHZtLXByb2Zlc3Npb25hbGVuZ2luZWVyaW5nLmJsb2dzcG90LmRlLzIwMTEvMDQvd29yZC1saXN0LWZvci1lZGl0aW5nLXN0YWNrLWV4Y2hhbmdlLmh0bWwpCiAgICAgICAgICAgICoqLwogICAgICAgICAgICB2b3Rpbmc6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihkb3dufHVwKVxXdm90L2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXZvdGUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3VjY2VlZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpdWNbY3NdP2VlP2QoZWR8cyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdWNjZWVkJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc291cmNlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocylvcmNlKHN8ZCk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb3VyY2UkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBzdGFuZGFyZGl6ZTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci92TjdwTTAvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpdGFuZGFyaShbc3pdKD86ZXxlc3xlZHxhdGlvbikpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdGFuZGFyZGkkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBkaWZmZXJlbnQ6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IveE84alUyLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihkKWlmZj9lP3JlP24odHxjZXM/KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWlmZmVyZW4kMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwZXJzb25hbGx5OiB7IC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3Ivb0w5YU0xLzIKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihwKWVyc28oPzpubHxubHxuYWwpKGx5KT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlcnNvbmFsJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHJvYmxlbTogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3lBOGpNNy82CiAgICAgICAgICAgICAgICBleHByOiAvXGIocCkoPzpvcj98cm98csOOwr98cjApYig/OmxlfGVsfGV8cmV8bHxbfF1lKW1lPyhzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyb2JsZW0kMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB3cml0dGVuOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIodylyaXRlblxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXJpdHRlbiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBtYXliZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKG0pKD86YWJ5fHlhYmUpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxYXliZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwc2V1ZG86IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihwKXN1ZWRvXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxc2V1ZG8iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXBwbGljYXRpb246IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKXBwP2xbaWFdY2EoPzp0aXxpdClvblxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXBwbGljYXRpb24iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2FsZW5kYXI6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKWFsW2VhXW5kW2FlXXJcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFhbGVuZGFyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvbW1pdDogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9rWTZzTjgvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGMpb21tP2l0PyhzfHRlZHx0ZXJzP3x0aW5nKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvbW1pdCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGF1dG9jb21wbGV0ZTogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3JaOWdXNS8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSl1dG8/WyAtXT9jbz9tP3A/bD9ldGU/KHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXV0b2NvbXBsZXRlJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgeW91OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoeSlvK3U/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb3UiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZG9lc25fdDogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3NMMHVPOS81CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZCkoPzpvc2U/W15cd10qbj8uP3R8b2Vucy4/dHxvZXNuP1teXHddKnR8b2VzdClcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvZXNuJ3QiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY291bGRuX3Rfd291bGRuX3Rfc2hvdWxkbl90OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoY3x3fHNoKW8/dWw/ZG5bICdgwrRdKnRcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvdWxkbid0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRpZG5fdDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGQpaWRbXlx3XSpuP3RcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFpZG4ndCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBkb25fdDogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9uVDJqVjYvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGQpKD86b25bXlx3J10qdHxvW24nXStvP3QpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb24ndCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBoYXZlbl90OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoaCkoPzphdmVudHxhdlteXHddKnR8YXZlW15cd10/dClcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFhdmVuJ3QiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2Fzbl90OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIodylhc1teXHddKm4/dFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWFzbid0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIC8vYXBvc3Ryb3BoZV9kOiB7ICAgLy8gVG9vIG1hbnkgZmFsc2UgcG9zaXRpdmVzCiAgICAgICAgICAgIC8vICAgIGV4cHI6IC9cYihoZXxzaGV8d2hvfHlvdSlbXlx3XSooZClcYi9naSwKICAgICAgICAgICAgLy8gICAgcmVwbGFjZW1lbnQ6ICIkMSckMiIsCiAgICAgICAgICAgIC8vICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIC8vfSwKICAgICAgICAgICAgYXBvc3Ryb3BoZV9sbDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHRoZXl8d2hhdHx3aG98eW91KVteXHddKihsbClcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEnJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXBvc3Ryb3BoZV9yZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHRoZXl8d2hhdHx5b3UpW15cd10qKHJlKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMSckMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhcG9zdHJvcGhlX3M6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9iTjVwQTMvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGhlfHNoZXx0aGF0fHRoZXJlfHdoYXR8d2hlcmV8aGVyZSlbXlx3XSoocylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEnJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXRfczogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGl0KVteXHddKHMpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxJyQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFwb3N0cm9waGVfdDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGFyZW58Y2FufGNvdWxkbnxkaWRufGRvZXNufGRvbnxoYXNufGhhdmVufGlzbnxtaWdodG58bXVzdG58c2hhbnxzaG91bGRufHdvbnx3b3VsZG4pW15cd10qKHQpKD86W15cd110KSpcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEnJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXBvc3Ryb3BoZV9udDogewogICAgICAgICAgICAgICAgZXhwcjogL1snYMK0XW50XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIm4ndCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBkb2Vzbl90X3dvcms6IHsgIC8vID40SyBpbnN0YW5jZXMgb2YgdGhpcyAoT2N0IDIwMTUpCiAgICAgICAgICAgICAgICBleHByOiAvXGIoZClvZXNuW15cd110ICh3b3JrfGxpa2V8dGhpbmt8d2FudHxwdXR8c2F2ZXxsb2FkfGdldHxoZWxwfG1ha2Upc1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9lc24ndCAkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwcm9iYWJseTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci96VTNxWjAvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApcig/Om9sbD98b2JiP2x8bz9iYWJsP3xhYmFibCl5XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcm9iYWJseSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBrZXlib2FyZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGspZXk/Ym9hP3JkXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZXlib2FyZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB1cjogewogICAgICAgICAgICAgICAgZXhwcjogL1xidXJcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAieW91ciIsIC8vIE1heSBhbHNvIGJlICJ5b3UgYXJlIiwgYnV0IGxlc3MgY29tbW9uIG9uIFNPCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB1OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJ1XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogInlvdSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBncjg6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmdyOFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJncmVhdCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjdXo6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmN1elxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJiZWNhdXNlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9mYzogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKG8pZmNcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFmIGNvdXJzZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBudm06IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihuKXZtXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZXZlciBtaW5kIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJ0dzogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGIpdHcsP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXkgdGhlIHdheSwiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3J5OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocylvP3IreVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9ycnkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYW55MTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpbnkxXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbnlvbmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWxsd2F5czogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpbGx3YXlzXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbHdheXMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhwZWN0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZSlzcGVjdChzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF4cGVjdCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVtcGxveWVlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZSltcGxveWVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFtcGxveWVlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJldHJpZXZlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocilldHJlaXYoZXxlZHxlc3xpbmd8YWx8YWJsZSlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFldHJpZXYkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBzdWNjZXNzOiB7IC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvaEsydkc0LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKXVjYz9lc3M/KGZ1bHxmdWxseSk/bD9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1Y2Nlc3MkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhbnlvbmVzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlueW9uZXNcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFueW9uZSdzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGxlbmd0aDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGwpZW4oPzpnaD90fHRoKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVuZ3RoIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGhlaWdodDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGgpKD86ZWl8aXxpZSkoPzpndHx0aHxnaHRofGd0aClcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlaWdodCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB3aWR0aDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpaXQ/ZGg/dFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWlkdGgiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2VudGVyZWQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKWVudCg/OnJlZHxlcmQpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZW50ZXJlZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjZW50ZXI6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKWVudHJlXGIvZ2ksICAgIC8vICJDZW50cmUiIGlzIGEgd29yZCwgaG93ZXZlciBpbiBtb3N0IGNhc2VzIG9uIFNPICJjZW50ZXIiIGlzIG1lYW50CiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZW50ZXIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWludF9pc250OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJhaW4nP3RcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiaXNuJ3QiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY29vcmRpbmF0ZXM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKW9yZGluYXRlKHN8ZCk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb29yZGluYXRlJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYXJndW1lbnQ6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvaVUydks5LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKXJnP1t1ZV0rbWVudChzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyZ3VtZW50JDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXRlcmF0ZTogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2lMNmJWMy8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoaSkoPzp0dGVyfHRhcilhdChlW2RzXT98aW5nfGlvbnxpb25zKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXRlcmF0JDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmVsb3c6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKWVsbG93XGIvZ2ksICAgICAgICAgIC8vICJCZWxsb3ciIGlzIGEgd29yZCwgYnV0IGV4dHJlbWVseSB1bmNvbW1vbiBvbiBTdGFja092ZXJmbG93LmNvbS4KICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlbG93IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVuY3J5cHQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihlbnxkZSljcmlwdChzfGluZyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxY3J5cHQkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBmb3JtYXR0aW5nOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZilvcm1hdGluZ1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9ybWF0dGluZyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwcm9jZXNzOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocClyb2Nlcyhlc3xlZCk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcm9jZXNzJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHJvZ3JhbTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApcm9ncj9hbW0/ZT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyb2dyYW0iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHJvZ3JhbW1pbmc6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihwKXJvZ3JhbShpbmd8ZWR8ZXIpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcm9ncmFtbSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHByb2dyYW1tYXRpY2FsbHk6IHsgIC8vIDQwSysgICBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3ZGMmpROC8yCiAgICAgICAgICAgICAgICBleHByOiAvXGIocClyb2dyYW0rYXQraWNhP2wreVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXJvZ3JhbW1hdGljYWxseSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBiZWFyX3dpdGhfbWU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKWFyZSAod2l0aCBtW2V5XXxpdHxpbiBtaW5kKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVhciAkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB3ZWlyZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpaWVyZChuZXNzfGx5KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVpcmQkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBiZWxpZXZlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYillbGVpdmUocnxzfGQpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVsaWV2ZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBpZWNlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocCllaWNlKHN8ZCk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaWVjZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNhbXBsZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpbWFwbGUoc3xkKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFhbXBsZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlYWxseTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9zTzR6RDkvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHIpKD86ZWxseXxlYWx5KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVhbGx5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZpbmFsbHlfOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZilpbmFsbD95XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaW5hbGx5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJlaGF2aW91cjogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3JVMWVCNy8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYillaGE/aT92aT9vKHJ8dXJ8cnN8dXJzKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVoYXZpbyQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHVuZm9ydHVuYXRlbHk6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih1KW5mb3J0dT9uYT90bHlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFuZm9ydHVuYXRlbHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2hldGhlcjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpaD9ldGg/ZXJcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFoZXRoZXIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdGhyb3VnaDogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9nUTBkWjEvNAogICAgICAgICAgICAgICAgZXhwcjogL1xiKHQpKD86aHJ1fHJvdWdofGhyb3VnKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhyb3VnaCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB0aHJvdWdob3V0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIodCkoPzpocnVvdXR8cm91Z2hvdXQpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaHJvdWdob3V0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJyZWFrdGhyb3VnaDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGIpcmVha1xzK3Rocm91Z2gocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcmVha3Rocm91Z2gkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB0aG91Z2g6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih0KSg/OmhvfGhvdXxob2doKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhvdWdoIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFsdGhvdWdoOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlsKD86dGhvfHRob3V8dGhvZ2h8dG91Z2gpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbHRob3VnaCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB0aG91Z2h0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIodClyP291Z2h0KHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhvdWdoJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdGhyb3dpbmc6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih0KWhyb3VnaGluZ1xiL2dpLCAgICAgICAvLyBQZXRlciBzYXlzIHRoaXMgaXMgInRob3JvdWdobHkiLCBidXQgYSBzdXJ2ZXkgb2YgU08gcXVlc3Rpb25zIGluZGljYXRlcyAidGhyb3dpbmciCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaHJvd2luZyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhX2xvdDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpbG90XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxIGxvdCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBvbmVfcl90d29fcjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHJlZmV8cHJlZmV8b2NjdSlyKGVkfGluZylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyciQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG9jY3VyOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIobyljY3VyZShzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFjY3VyJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHJlZmVyYWJseTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApcmVmZXJyYWJseVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXJlZmVyYWJseSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjb21tYW5kX2xpbmU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKSg/Om9tbT9hbmRsaW5lfG1kbGluZT8pXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb21tYW5kLWxpbmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmVuZWZpdHM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKWVuaWZpdHNcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlbmVmaXRzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGF1dGhvcml6YXRpb246IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvcFE4bUQ5LzEKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cYlx3Li1dKShhKXV0aFxiL2dpLCAgICAgICAgICAgLy8gVGhpcyBtYXkgYmUgdG9vIGFtYmlndW91cywgY291bGQgYWxzbyBtZWFuICJhdXRoZW50aWNhdGlvbiIKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEkMnV0aG9yaXphdGlvbiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwZXJzaXN0ZW50OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocCllcnNpc3Rhbih0fGNlKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVyc2lzdGVuJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWNjZXNzOiB7ICAvLyBtdXN0IGNvbWUgYmVmb3JlIF9pYmlsaXR5IHRvIGNhdGNoIGFjY2Vzc2liaWxpdHkgd2l0aCBzcGVsbGluZyB2YXJpYXRpb25zICoqIGJ1dCBkb2VzIG5vdCBmaXggYWNlc3NhYmlsaXR5PwogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpYytlK3MrKC4qKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWNjZXNzJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgX2libGU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjb21wYXR8aW5jb21wYXR8YWNjZXNzKWFibGVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFpYmxlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIF9pYmlsaXR5OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoY29tcGF0fGluY29tcGF0fGFjY2VzcylhYmlsaT90KHl8aWVzKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWliaWxpdCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNlcGFyYXRlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocyllcGU/cmF0ZT8oZHxseXxzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlcGFyYXRlJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc2VwYXJhdGlvbjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpZXBlcmF0aW9uKHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVwYXJhdGlvbiQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZmluaXRlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZCllZmluKD86YXRlP3xpdGU/fGFsfHRlP3xldCkobHkpP1xiL2dpLCAgLy8gQ2F0Y2hlcyBjb3JyZWN0IHNwZWxsaW5nLCB0b28uCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZWZpbml0ZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRlZmluaXRpdmU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihkKWVmaW5hP3RpdmUobHkpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVmaW5pdGl2ZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGluZGVwZW5kZW50OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoaSluZGVwZW5kYW50KGx5KT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFuZGVwZW5kZW50JDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVjb21tZW5kOiB7IC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvcFA5bEI3LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihyKWVjb21tP1thb11uZChhdGlvbik/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZWNvbW1lbmQkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjb21wYXRpYmlsaXR5OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYylvbXBhdGFiaWxpdHlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvbXBhdGliaWxpdHkkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwczogewogICAgICAgICAgICAgICAgZXhwcjogL1xicHNcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJQUyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBvazogewogICAgICAgICAgICAgICAgZXhwcjogL1xib2tcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJPSyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBiYWNrX2VuZDogeyAgLy8gSW50ZXJlc3RpbmcgZmFjdDogYmFja2VuZCAzeCBtb3JlIGNvbW1vbiB0aGFuIGJhY2stZW5kCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYilhY2tlbmRcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWFjay1lbmQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZnJvbnRfZW5kOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZilyb250ZW5kXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyb250LWVuZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBkYXRhX3R5cGU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihkKWF0YXR5cGVcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWF0YSB0eXBlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFsbG90dGVkOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlsK290K2VkXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFsbG90dGVkIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV2ZXJ5X3RpbWU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihlKXZlP3J5dGltZVxiL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdmVyeSB0aW1lIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN0cmFpZ2h0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocyl0cmFpZz9oP3RcYi9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXRyYWlnaHQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc3RyYWlnaHRmb3J3YXJkOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocyl0cmFpZz9oP3RbIC1dP2Zvcj93YXJkXGIvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF0cmFpZ2h0Zm9yd2FyZCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwcmVjZWRpbmc6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihwKXJlY2VlZGluZ1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXJlY2VkaW5nIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG5vX29uZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKG4pby0/b25lXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbyBvbmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGVfZmFjdG86IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihkKWUtP2ZhY3RvXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZSBmYWN0byIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhY2NvbW1vZGF0ZTogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2NMM21EOS8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSkoPzpjK29tfGNvbSspb2RhdGVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFjY29tbW9kYXRlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGtpbmRfb2Y6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihrKWluZGFcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFpbmQgb2YiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2FudF90bzogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpYW5uP2FcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFhbnQgdG8iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc29ydF9vZjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpb3J0YVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9ydCBvZiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBnb3RfdG86IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9ySzZ4UjUvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGhhdmVccyspPyhnKW90dGFcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEkMm90IHRvIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRvbnRfa25vdzogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3JLNnhSNS8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoZClbdW9dbm4/b1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9uJ3Qga25vdyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBnb2luZ190bzogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGcpW291XW5uP2FcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvaW5nIHRvIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNyYXNoZXM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKXJhc2hzXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcmFzaGVzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBhdHRlcm46IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihwKWF0Pyg/OnRybnx0cmVufHRlcm4pKHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWF0dGVybiQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ1bmN0aW9uXzogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3hGM2pVMy8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoZil1W25jdGldK29ubj8oc3xpbmd8ZWR8YWwpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVuY3Rpb24kMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBzeW50YXg6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKVt5aV1udFthZV0/eFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXludGF4IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvcnJlY3Q6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKW9ycj9lY1t0eV0vZ2ksICAvLyBObyBcYiBhdCBlbmQsIHRvIGluY2x1ZGUgY29ycmVjdGlvbiwgY29ycmVjdGluZywgY29ycmVjdGVkCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb3JyZWN0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvcnJlY3RseTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGMpb3JyP2VjKD86bHQ/fHQ/bCl5XGIvaWcsCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb3JyZWN0bHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW50ZWdlcjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGkpbnRlP3I/Z2VyKHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW50ZWdlciQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNldmVyYWw6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKWVyP3ZbZWFdP3JbYWVdP2xcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFldmVyYWwiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc29sdXRpb246IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKW91P2x1P3RpP29uXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb2x1dGlvbiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBzb21lYm9keTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpb21ib2R5XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb21lYm9keSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBldmVyeXRoaW5nOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZSl2ZT9yW3lpXT90aGluZ1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXZlcnl0aGluZyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBidXR0b246IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKVt1b10rdHQ/W291XW5cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1dHRvbiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBiZWZvcmU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKWU/Zm8/cmU/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZWZvcmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXhhbXBsZTogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3VVNGJINS8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoZSkoPzp4c2FtcGxlfHhhbWxlfHg/YW1wW2xlXXsxLTJ9fHhlbXBsZSlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF4YW1wbGUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc29tZXdoZXJlOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2FVMm5QNS8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIocylvbWU/KD86ID93aGVyZT98d1tlYV0rcmU/KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9tZXdoZXJlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHdpdGg6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci94TzVkUDMvMgogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpKD86aGl0aHxpaHQpKD89KG91P3R8aW4pP1xiKS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFpdGgiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2l0aG91dDogeyAgLy8gQWZ0ZXIgJ3dpdGgnIHJ1bGUsIG9ubHkgbmVlZCB0byBjaGVjayAnb3V0JwogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpaXRob3U/dFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWl0aG91dCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICByZXByb2R1Y2libGU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihyKWVwcm9kdWN0P1tpYV1ibGVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlcHJvZHVjaWJsZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB1bm5lY2Vzc2FyeTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHUpbm4/ZWNjP2Vzcz9hcnlcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFubmVjZXNzYXJ5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHJlcXVpcmU6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvblM2a001LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihyKWVxdWllP3JlPyhkfHN8bWU/bnRzPyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZXF1aXJlJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWRkcmVzczogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpZGQ/cmVzcz8oZXN8ZWR8aW5nKT9lP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWRkcmVzcyQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBhc3N3b3JkOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocClhc3M/d28/cmQ/KHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWFzc3dvcmQkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBtZXRob2Q6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihtKWVbdGhdK1tvZXVdK2Qocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZXRob2QkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBwcm9wZXJ0eTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApcm9wZT9ydFtpZXldP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXJvcGVydHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHJvcGVydGllczogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApcm9wZT9ydFtpZXldK3NcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFyb3BlcnRpZXMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2lyZWxlc3M6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih3KWlyZT9sZT9zcz9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFpcmVsZXNzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBvc3NpYmxlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIocClvc3M/W2FpXT9ibGVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvc3NpYmxlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZpZWxkc195aWVsZHM6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvY0o4ck00LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihmfHkpKD86ZWk/fGllPylsP2Qoc3xpbmd8ZWQpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWllbGQkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBleGVjdXRlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZSl4W2VpXT9jdXRlKHN8ZClcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF4ZWN1dGUkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhbGdvcml0aG06IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKWxnbz9yW2l5XT90aD9baXlhXT9tKHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWxnb3JpdGhtJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdmVyc2lvbjogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3dFOHVEMC8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIodillcig/OnNbaW9dKnxpbyluKHN8aW5nfGVkKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlcnNpb24kMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB3aGljaDogeyAgLy8gMjIsNzcyIG9mIHRoZXNlIGFzIG9mIDEyLU5vdi0yMDE1IQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpKD86aWNofGhpYylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFoaWNoIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGRpc2FwcGVhcjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGQpaXM/YXBlYT9yKGluZ3xlZHxzKT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFpc2FwcGVhciQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJlY2F1c2U6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKWVjW2FvXXU/c2U/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZWNhdXNlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNob3VsZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpKD86aG9sZHxob3VkfGh1bGR8aHVkfG91bGQpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaG91bGQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgdG90YWxseTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHQpb3RhP2xsP3lcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvdGFsbHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGFtYmRhOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIobClhbVtiZF0rYVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWFtYmRhIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvbW1hbmQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKW9tKD86bT9hZHxhbmR8bW5kKShlZHxzfGluZ3xlcnM/fG8pP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9tbWFuZCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRoZXJlZm9yZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHQpaGVyZT9mb3JlP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhlcmVmb3JlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBhcmFtZXRlcjogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApYXJhP21bZWFdbj90ZXIocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxYXJhbWV0ZXIkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBqdXN0OiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoaikoPzp1c3RlfHVzKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVzdCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBmdWxmaWxsOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZil1bGw/XHM/ZmlsbFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVsZmlsbCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjb21pbmc6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKW9tbWluZ1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9taW5nIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRyaWVkOiB7ICAvLyA4LDU0MCBvZiB0aGVzZSEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih0KXJ5ZShkfHMpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcmllJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmFzaWNhbGx5OiB7ICAvLyA3LDkyNCBvZiB0aGVzZSEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKWFzaWNhP2wreVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWFzaWNhbGx5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvbXBsZXRlbHk6IHsgIC8vIDQsNzkzIGV4YW1wbGVzISAgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3Ivb0c3bkg2LzIKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKW9tcGw/ZXRlP2w/ZT95XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb21wbGV0ZWx5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG1pc3JlYWQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihtKWlzK1sgLV0/cmVhP2RcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFpc3JlYWQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZGF0YWJhc2U6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihkKWF0YWJhZXM/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxYXRhYmFzZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBvdXRwdXQ6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvYlA5a1kyLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihvKXV0ID9wdXQrKD86ZWQpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXV0cHV0IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHVzZWZ1bDogeyAgLy8gMTEsNTQyICAidXNlZnVsbCIKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih1KXNlKD86ZnVsbHwgZnVsKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXNlZnVsIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNsYXNzZXM6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKWxhKHNlfHNzKXNcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFsYXNzZXMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZW5nbGlzaDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiZW5nbGlzYz9oP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJFbmdsaXNoIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGluaGVyaXRhbmNlOiB7ICAvLyAxNzAwIHggaW5oZXJpdGVuY2UKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihpKW5oZXJpdFthZV1uW2NzXWU/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbmhlcml0YW5jZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhZHZpY2U6IHsgIC8vIDkwMDAgeCBhZHZpY2VzCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlkdmljZXNcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFkdmljZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB3aGVuOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIodyloW2VhXW5lP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhlbiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhbmRfdGhlbjogeyAgIC8vIDE2SyBpbnN0YW5jZXMgb2YgdGhpcyEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKW5kLD8gdGhhP25cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFuZCB0aGVuIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHVuX2luaXRpYWxpemU6IHsgLy8gPjRLIGluc3RhbmNlcyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2xZMmhZMS8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoKD86dW4tP3xyZS0/KT9pKW4/aT90W2lhXStsaT9benNdKGV8ZWR8W2VvXXJ8ZXN8aW5nKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uKG1hdGNoLCBwcmVmaXgsIHN1ZmZpeCkgewogICAgICAgICAgICAgICAgICAgIHJldHVybiAocHJlZml4KyduaXRpYWxpeicrc3VmZml4KS5yZXBsYWNlKCItIiwiIik7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY2hhcmFjdGVyOiB7IC8vIDM1MDArIGluc3RhbmNlcywgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9sRzFxSDAvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGMpKD86aGFyfGg/YXJhYz9oP3Rlcikoc3xpc3RpY3M/fGlbenNdZSk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaGFyYWN0ZXIkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBmb3VuZDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGYpaW5kZWRcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvdW5kIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHR1cGxlOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3pQN3pNMi8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIodClvP3VwK2U/bGU/KHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVwbGUkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBpX3JlYWQ6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihJfEkndmV8d2V8dGhleSkgcmVkXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxIHJlYWQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY3VzdG9taXplOiB7ICAvLyBodHRwOi8vZ3JhbW1hcmlzdC5jb20vc3BlbGxpbmcvY3VzdG9taXNlLWN1c3RvbWl6ZS8KICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKXVbc3RdK1tvdWldbWlbenNdKGUpPy9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1c3RvbWl6JDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgY3VzdG9taXphYmxlOiB7ICAvLyBDb21tb24gZXJyb3JzIGFyZSB0byByZXRhaW4gJ2UnLCBhbmQvb3IgdG8gdXNlIGlibGUsIG5vdCBhYmxlCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYyl1c3RvbWl6W2VhXSsodGlvbnM/fGJsZXxiaWxpdHl8YmlsaXRpZXMpL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVzdG9taXphJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYWNyb3NzOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncwogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpYytyb3MrXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxY3Jvc3MiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW1tZWRpYXRlOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncwogICAgICAgICAgICAgICAgZXhwcjogL1xiKGkpbStlZFtpYV0rdGU/bD8obHkpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW1tZWRpYXRlJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZXZlcnlfdGltZTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9kQjZqQzIvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGUpdltlcnldK3RpbWU/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdmVyeSB0aW1lIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFjaGlldmU6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvYloycUoxLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKWNoW2VpXSt2ZT8oc3xkfG1lbnQpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWNoaWV2ZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFwcGFyZW50OiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2RPM2FINC8yCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlwK2FyW2FlXW50PyhseSk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcHBhcmVudCQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGFwcGVhcjogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9vTDhsSTEvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpcCtbZWFdK3JlPyhzfGVkfGluZyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcHBlYXIkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhcHBlYXJhbmNlOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2VQMmJGOS8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlwK1tlYV0rcltlYV0rbmNlKHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXBwZWFyYW5jZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJlZ2lubmluZzogeyAgLy8gaHR0cDovL3d3dy5veGZvcmRkaWN0aW9uYXJpZXMuY29tL3dvcmRzL2NvbW1vbi1taXNzcGVsbGluZ3MgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9zVDRnUTAvMgogICAgICAgICAgICAgICAgZXhwcjogL1xiKGIpZWdpP24raW4/Zy9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlZ2lubmluZyIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBiZWxpZXZlOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3BNMWNDNi8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYillP2xbZWldK3YoZXxpbmd8YWJsZSkvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZWxpZXYkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBjb2xsZWFndWU6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IveE44cUQ5LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKW9sK1tlYV0rZ3VlKHMpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW9sbGVhZ3VlJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaW1wbGVtZW50OiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3pXMWFTNS8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIoaSltcGw/W2VpXT9tZW50L2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW1wbGVtZW50IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHNpbXVsdGFuZW91czogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9pQjBtRTcvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpaW11W2x0XSthbltpZW91XStzZT8vZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaW11bHRhbmVvdXMiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZW52aXJvbm1lbnQ6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvcUQ1elU2LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihlKW52aT9ybz9bbm10XStlbnQvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxbnZpcm9ubWVudCIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBleGlzdGVuY2U6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvbUg3aEE2LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihlKXhpc3RbYWVdbltjc11lL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXhpc3RlbmNlIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ1cnRoZXI6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzIGh0dHBzOi8vcmVnZXgxMDEuY29tL3Ivc0U2blkzLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihmKSg/OnV8W2F1XXIpdGg/ZXIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdXJ0aGVyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGppc3Q6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzCiAgICAgICAgICAgICAgICBleHByOiAvXGJqaXN0IG9mXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogImdpc3Qgb2YiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbm90aWNlYWJsZTogeyAgLy8gaHR0cDovL3d3dy5veGZvcmRkaWN0aW9uYXJpZXMuY29tL3dvcmRzL2NvbW1vbi1taXNzcGVsbGluZ3MKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihuKW90aWNhYmwoZXx5KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMW90aWNlYWJsJDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcHVibGljbHk6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzCiAgICAgICAgICAgICAgICBleHByOiAvXGIocCl1YmxpY2E/bCp5XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdWJsaWNseSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICByZWNlaXZlOiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncwogICAgICAgICAgICAgICAgZXhwcjogL1xiKHIpZWNpZXYoZVtyZHNdP3xpbmcpL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVjZWl2JDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVmZXJyZWQ6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzICBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2tFMG9aNS81CiAgICAgICAgICAgICAgICBleHByOiAvXGIocillZmVyKD8hc3xlbmNcdyp8clx3KikoPz1cdykvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZWZlcnIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcmVtZW1iZXI6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzCiAgICAgICAgICAgICAgICBleHByOiAvXGIocillKD86bWJlcnxtZWJlcnxtZW1lcikvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZW1lbWJlciIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBzZW5zZTogeyAgLy8gaHR0cDovL3d3dy5veGZvcmRkaWN0aW9uYXJpZXMuY29tL3dvcmRzL2NvbW1vbi1taXNzcGVsbGluZ3MKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKWVuY2UvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZW5zZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBzdXBlcnNlZGU6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzICBodHRwczovL3JlZ2V4MTAxLmNvbS9yL21BNW5DMS8xCiAgICAgICAgICAgICAgICBleHByOiAvKHMpdXBlcmNlZChlW3NkXT98aW5nKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVwZXJzZWQkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBzdXJwcmlzZTogeyAgLy8gaHR0cDovL3d3dy5veGZvcmRkaWN0aW9uYXJpZXMuY29tL3dvcmRzL2NvbW1vbi1taXNzcGVsbGluZ3MgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvdVM4b1M0LzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihzKXVyP3ByaVtzY3pdKGVbZHNdP3xpbmcoPzpseSk/KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVycHJpcyQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvbm5lY3Rpb246IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3Ivck8yd0gwLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihjKW9uK2VbY3R4XStpP29uKHMpPy9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvbm5lY3Rpb24kMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhZGRpdGlvbmFsOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2lNNHhWNS8yCiAgICAgICAgICAgICAgICBleHByOiAvXGIoYSlkK2kuP3Rpbz9uW2FsXSs/KGx5KT9cYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFkZGl0aW9uYWwkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICBhdXRvbWF0aWM6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvZlUyaEYxLzIKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhKSg/OnV0b1ttYV0rW3RpY10rfHRvbWF0aWMpKD8hZXxbaW9dK24pL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXV0b21hdGljIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGF1dG9tYXRpY2FsbHk6IHsgIC8vIDZLKwogICAgICAgICAgICAgICAgZXhwcjogL1xiKGEpdXRvbWF0aWNbYWx5XStcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1dG9tYXRpY2FsbHkiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcnVubmluZzogeyAgLy8gMksrCiAgICAgICAgICAgICAgICBleHByOiAvXGIocil1bitpbj9nXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxdW5uaW5nIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV2ZW5fdGhvdWdoOiB7ICAvLyAyLjdLKwogICAgICAgICAgICAgICAgZXhwcjogL1xiKGUpdmVudGg/b3U/W2doXStcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF2ZW4gdGhvdWdoIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRvbW9ycm93OiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncwogICAgICAgICAgICAgICAgZXhwcjogL1xiKHQpb20rb3Irb3dcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFvbW9ycm93IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHRydWx5OiB7ICAvLyBodHRwOi8vd3d3Lm94Zm9yZGRpY3Rpb25hcmllcy5jb20vd29yZHMvY29tbW9uLW1pc3NwZWxsaW5ncyAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci95VjRyWjkvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHQpcnVlP2wrZT95XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxcnVseSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB1bnRpbDogeyAgLy8gaHR0cDovL3d3dy5veGZvcmRkaWN0aW9uYXJpZXMuY29tL3dvcmRzL2NvbW1vbi1taXNzcGVsbGluZ3MgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvdEs4clY1LzIKICAgICAgICAgICAgICAgIGV4cHI6IC9cYig/Oih1KW50aT9sK3wodClpbCspXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogZnVuY3Rpb24gKG1hdGNoLGYxLGYyKSB7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZjaGFyID0gZjF8fGYyOwogICAgICAgICAgICAgICAgICAgIHJldHVybiAoKGZjaGFyLnRvVXBwZXJDYXNlKCkgPT0gZmNoYXIpID8gIlUiIDogInUiKSArICJudGlsIjsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICB3aGVyZTogeyAgLy8gTXVzdCBwcmVjZWRlICJ3aGVyZXZlciIKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih3KWhlclxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhlcmUiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgd2hlcmV2ZXI6IHsgIC8vIGh0dHA6Ly93d3cub3hmb3JkZGljdGlvbmFyaWVzLmNvbS93b3Jkcy9jb21tb24tbWlzc3BlbGxpbmdzICBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2lKNGJHMS8xCiAgICAgICAgICAgICAgICBleHByOiAvXGIodyloZXJlID9ldmVyXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxaGVyZXZlciIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICByZXNldDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHIpZXNldCtlZFxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWVzZXQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmVnaW46IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IveFo5aUMzLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihiKWVnK2luPyhuaW5nfG5lcik/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZWdpbiQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHVwZGF0ZTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9yRjZmWjIvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiKHUpW3BkXSthdChlfGVkfGVyfGVzfGluZylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFwZGF0JDIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgcXVlc3Rpb246IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvdEM1eU44LzIKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihxKVt1ZXNdK3RbaW9dK25lPy9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1ZXN0aW9uIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHZhcmlhYmxlOiB7ICAvLyBoaHR0cHM6Ly9yZWdleDEwMS5jb20vci9zSTNsVDUvMQogICAgICAgICAgICAgICAgLy90aGFua3MgS3lsbCAtIGh0dHA6Ly9jaGF0LnN0YWNrb3ZlcmZsb3cuY29tL3RyYW5zY3JpcHQvbWVzc2FnZS8yOTM1MjEzNyMyOTM1MjEzNwogICAgICAgICAgICAgICAgZXhwcjogL1xiKHYpW2FpXStyW2lhXStiW2xlXSsocyk/XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxYXJpYWJsZSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZ1bmN0aW9uXzogeyAgLy8gaGh0dHBzOi8vcmVnZXgxMDEuY29tL3Ivc0kzbFQ1LzEKICAgICAgICAgICAgICAgIC8vdGhhbmtzIEt5bGwgLSBodHRwOi8vY2hhdC5zdGFja292ZXJmbG93LmNvbS90cmFuc2NyaXB0L21lc3NhZ2UvMjkzNTIyMDMjMjkzNTIyMDMKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihmKVt1bl0rY3RbaW9dK24/L2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMXVuY3Rpb24iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuc3BlbGxpbmcKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYmVpbmc6IHsgIC8vIDQsNjAwKwogICAgICAgICAgICAgICAgZXhwcjogL1xiKGIpZWVpbmdcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlaW5nIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNwZWxsaW5nCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGhhcHBlbjogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9qSDhyRTUvMgogICAgICAgICAgICAgICAgLy8gdGhhbmtzIFByYXZlZW4gLSBodHRwOi8vY2hhdC5zdGFja292ZXJmbG93LmNvbS90cmFuc2NyaXB0L21lc3NhZ2UvMjk0Mjc3MTcjMjk0Mjc3MTcKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihoKWFwK2U/bihlP2R8c3xpbmcpP1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6IGZ1bmN0aW9uIChtYXRjaCxmQ2hhcixzdWZmaXgpIHsKICAgICAgICAgICAgICAgICAgICBzdWZmaXggPSBzdWZmaXggfHwgJyc7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZDaGFyKyJhcHBlbiIrc3VmZml4LnJlcGxhY2UoL15kLywnZWQnKTsKICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zcGVsbGluZwogICAgICAgICAgICB9LAogICAgICAgICAgICAvKgogICAgICAgICAgICAqKiBHcmFtbWFyIC0gQ29ycmVjdCBjb21tb24gZ3JhbW1hdGljYWwgZXJyb3JzLgogICAgICAgICAgICAqKi8KICAgICAgICAgICAgc3RhcnRfd2l0aF9zbzogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9nUDF4QTIvMgogICAgICAgICAgICAgICAgZXhwcjogL14oPzpva2F5XGJ8b2tcYnxzb1xifFsgXHQsLV0pKy9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgYV92c19hbjogeyAgLy8gU2VlIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xLzM0NDQwMzA3LzE2Nzc5MTIKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihhfGFuKSAoW1woXCIn4oCc4oCYYDwtXSpcdyopXGIvZ2ltLCAgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvbkUxeUE0LzUKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbiggbWF0Y2gsIGFydGljbGUsIGZvbGxvd2luZyApIHsKICAgICAgICAgICAgICAgICAgICB2YXIgaW5wdXQgPSBmb2xsb3dpbmcucmVwbGFjZSgvXltcc1woXCIn4oCc4oCYYDwtXSt8XHMrJC9nLCAiIik7Ly9zdHJpcCBpbml0aWFsIHB1bmN0dWF0aW9uIHN5bWJvbHMKICAgICAgICAgICAgICAgICAgICB2YXIgcmVzID0gQXZzQW5PdmVycmlkZV8oaW5wdXQpIHx8IEF2c0FuU2ltcGxlLnF1ZXJ5KGlucHV0KTsKICAgICAgICAgICAgICAgICAgICB2YXIgbmV3QXJ0aWNsZSA9IGFydGljbGVbMF0gKyByZXMuc3Vic3RyKDEpOyAgLy8gUHJlc2VydmUgZXhpc3RpbmcgY2FwaXRhbGl6YXRpb24KICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3QXJ0aWNsZSsnICcrZm9sbG93aW5nOwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIC8vIEhhY2sgYWxlcnQ6IER1ZSB0byB0aGUgdGVjaG5pY2FsIG5hdHVyZSBvZiBTTyBzdWJqZWN0cywgbWFueSBjb21tb24gdGVybXMKICAgICAgICAgICAgICAgICAgICAvLyBhcmUgbm90IHdlbGwtcmVwcmVzZW50ZWQgaW4gdGhlIGRhdGEgdXNlZCBieSBBdnNBblNpbXBsZSwgc28gd2UgbmVlZCB0bwogICAgICAgICAgICAgICAgICAgIC8vIHByb3ZpZGUgYSB3YXkgdG8gb3ZlcnJpZGUgaXQuCiAgICAgICAgICAgICAgICAgICAgLy8gTk9URTogQXZzQW5TaW1wbGUgaXMgc3VzY2VwdGlibGUgdG8gdW5pY29kZSBtZXNzLXVwOyBpZiB5b3Ugc3VkZGVubHkgc2VlIG1hbnkKICAgICAgICAgICAgICAgICAgICAvLyB3b3JkcyBzdGFydGluZyB3aXRoIHZvd2VscyBiZWluZyBpbmNvcnJlY3RseSB0cmVhdGVkLCBjaGVjayB0aGF0IHRoZSBzY3JpcHQKICAgICAgICAgICAgICAgICAgICAvLyBoYXMgbm90IGhhZCBhIHVuaWNvZGUgc3Vic3RpdHV0aW9uIGVycm9yLiAoR2l0IGRpZCB0aGlzIGRvIG1lLCBvbmNlLikKICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBBdnNBbk92ZXJyaWRlXyhmd29yZCkgewogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhjZXB0aW9uc0FfID0gL14oPzp1aXM/fGRhdGF8amF2YXxmb3JtXHcqKS9pOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhjZXB0aW9uc0FuXyA9IC8oPzpeW2xyXXZhbHVlfGFcYnxzcWwpL2k7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoZXhjZXB0aW9uc0FfLnRlc3QoZndvcmQpID8gYXJ0aWNsZVswXSA6CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXhjZXB0aW9uc0FuXy50ZXN0KGZ3b3JkKSA/IGFydGljbGVbMF0rIm4iIDogZmFsc2UpOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGZpcnN0Y2FwczogewogICAgICAgICAgICAgICAgLy8gICAgaHR0cHM6Ly9yZWdleDEwMS5jb20vci9xUjVmTzkvNDAKICAgICAgICAgICAgICAgIC8vIFJlZ2V4IGZpbmRzIGFsbCBzZW50ZW5jZXM7IHJlcGxhY2VtZW50IG11c3QgZGV0ZXJtaW5lIHdoZXRoZXIgaXQgbmVlZHMgdG8gY2FwaXRhbGl6ZS4KICAgICAgICAgICAgICAgIGV4cHI6IC8oKFtBLVpfYS16XXxcZCg/IVxkKlwuICkpKFxTKikpKCg/Oig/OmV0Y1wufGlcLmVcLnxlXC5nXC58dnNcLnxcLlwuXC58XHcrXC4oPyFbXHMiKV0pfFsqLV0rfFxuKD8hWyBcdF0qXG58ICooPzpbKi1dfFxkK1wuKSl8W14uPyFcbl0/KSkrKD86KFsuPyFdKSg/PVtccyIpXXwkKXxcblxufFxuKD89ICpbKi1dKXxcbig/PSAqXGQrXC4pfCQpKS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbihzZW50ZW5jZSwgZldvcmQsIGZDaGFyLCBmV29yZFBvc3QsIHNlbnRlbmNlUG9zdCwgZW5kcHVuYykgeyAKICAgICAgICAgICAgICAgICAgICB2YXIgY2FwQ2hhciA9IGZDaGFyLnRvVXBwZXJDYXNlKCk7CiAgICAgICAgICAgICAgICAgICAgaWYgKHNlbnRlbmNlID09PSAidW5kZWZpbmVkInx8Y2FwQ2hhciA9PSBmQ2hhcikgcmV0dXJuIHNlbnRlbmNlOyAgLy8gTVVTVCBtYXRjaCBzZW50ZW5jZSwgb3IgZ2V0cyBjb3VudGVkIGFzIGEgY2hhbmdlLgogICAgICAgICAgICAgICAgICAgIGlmICghZldvcmQpIGZXb3JkID0gJyc7CiAgICAgICAgICAgICAgICAgICAgdmFyIGZXb3JkQ2hhcnMgPSBmV29yZC5zcGxpdCgnJyk7CiAgICAgICAgICAgICAgICAgICAgLy8gTGVhdmUgc29tZSB3b3JkcyBhbG9uZTogZmlsZW5hbWVzLCBjYW1lbENhc2UKICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpPTA7IGk8ZldvcmRDaGFycy5sZW5ndGg7IGkrKykgewogICAgICAgICAgICAgICAgICAgICAgICBpZiAoZldvcmRDaGFyc1tpXS5zZWFyY2goL1suXy9dL2cpICE9PSAtMSB8fAogICAgICAgICAgICAgICAgICAgICAgICAgICAgKGZXb3JkQ2hhcnNbaV0uc2VhcmNoKC9bYS16XS9naSkgIT09LTEgJiYgZldvcmRDaGFyc1tpXSA9PSBmV29yZENoYXJzW2ldLnRvVXBwZXJDYXNlKCkpKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbnRlbmNlOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlID0gY2FwQ2hhciArIGZXb3JkUG9zdCArIHNlbnRlbmNlUG9zdDsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gdXBkYXRlOwogICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaTogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3VPN3FHMC8yCiAgICAgICAgICAgICAgICBleHByOiAvXGJpXGIoPyFcLmUpL2csICAvLyBpIGJ1dCBub3QgaS5lLgogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJJIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaV9hcG9zdHJvcGhlOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGJpWydgwrTigJldL2dpLCAgLy8gaS1hcG9zdHJvcGhlIG9ubHkKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiSSciLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuZ3JhbW1hcgogICAgICAgICAgICB9LAogICAgICAgICAgICBpX2xsOiB7ICAvLyBNdXN0IE5PVCBjb252ZXJ0IGlsbCB0byBJJ2xsCiAgICAgICAgICAgICAgICBleHByOiAvXGJpIGxsXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIkknbGwiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuZ3JhbW1hcgogICAgICAgICAgICB9LAogICAgICAgICAgICBpbTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKD86aSAqbSg/OiBhbSk/fGknYW18aWFtKVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJJJ20iLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuZ3JhbW1hcgogICAgICAgICAgICB9LAogICAgICAgICAgICBpdmU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmlbJ2DCtOKAmSBdKnZbJ2DCtOKAmSBdKmVcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiSSd2ZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGllOiB7ICAvLyBodHRwOi8vZW5nbGlzaC5zdGFja2V4Y2hhbmdlLmNvbS9xdWVzdGlvbnMvMzAxMDYvY2FuLWktc3RhcnQtYS1zZW50ZW5jZS13aXRoLWktZQogICAgICAgICAgICAgICAgZXhwcjogL1xiKGl8SSlcLj9lWy5cc10rL2csICAgLy8gQ2FyZWZ1bCBoZXJlOyBJRSBpcyBJbnRlcm5ldCBFeHBsb3JlcgogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMS5lLiAiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuZ3JhbW1hcgogICAgICAgICAgICB9LAogICAgICAgICAgICBlZzogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3FIMm9UMC83CiAgICAgICAgICAgICAgICBleHByOiAvXGIoZSlcLj9nWy4sOyA6XSsvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxLmcuICIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGV0YzogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9kRTdjVjEvNAogICAgICAgICAgICAgICAgZXhwcjogL1xiZXRjKD86XC4rKT8vZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiZXRjLiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHB5c2Fua3k6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oW15cIV0pWyFdezV9KD8hXCEpL2csCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxISIsCiAgICAgICAgICAgICAgICByZWFzb246IHdpbmRvdy5hdG9iKCdJa1pwZG1VZ1pYaGpiR0Z0WVhScGIyNGdiV0Z5YTNNc0lIUm9aU0J6ZFhKbElITnBaMjRnYjJZZ1lXNGdhVzV6WVc1bElHMXBibVFpJykKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbXVsdGlwbGVzeW1ib2xzOiB7ICAvLyAgICBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2JFOXpNNi82CiAgICAgICAgICAgICAgICBleHByOiAvKFxiW2NDXVwrXCt8PXsxLDN9KD8hPSkpfChbXlx3XHMqIy5cLV86XFtcXVw8Lz5dKVwyezEsfS9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMSQyIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaV93YW50OiB7IC8vaHR0cHM6Ly9yZWdleDEwMS5jb20vci9pRDJ0VTAvMQogICAgICAgICAgICAgICAgZXhwcjogL1xiSVsnYSBdKm0gd2FudGluZ1xiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICJJIHdhbnQiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuZ3JhbW1hcgogICAgICAgICAgICB9LAogICAgICAgICAgICBveGZvcmRfY29tbWE6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci94TjBtRjYvNgogICAgICAgICAgICAgICAgZXhwcjogLygoPzpbXHcnLV0rLFxzKykrKD86W1x3Jy1dK1xzKXswLDJ9W1x3Jy1dKykoXHMrKGFuZHxvcilccytbXHcnLV0rKS9nLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMSwkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGlfaGF2ZV9maW5kOiB7CiAgICAgICAgICAgICAgICBleHByOiAvXGIoSXx5b3UpIGhhdmUgZmluZFxiKD8hWyhdfFwuXHcpL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMSBoYXZlIGZvdW5kIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbGV0X3Nfc2F5OiB7ICAvLyA2MEshCiAgICAgICAgICAgICAgICBleHByOiAvXGIobClldHMgKHNheXxzZWV8bG9va3xqdXN0fHB1dHxoYXZlfGxlYXZlfGdpdmV8d3JpdGUpXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZXQncyAkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN1Z2dlc3RfbWU6IHsgIC8vIDM2SwogICAgICAgICAgICAgICAgZXhwcjogL1xiKHMpdVtnal0rZXN0KHMpPyBtZS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDF1Z2dlc3QkMiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBlcmZlY3RseTogeyAgLy8gMzZLCiAgICAgICAgICAgICAgICBleHByOiAvXGIocClbcmVdK2ZlY3RseS9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFlcmZlY3RseSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ncmFtbWFyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHdvcmtzX3BlcmZlY3RseTogeyAgLy8gMTNLKyBwb3N0cwogICAgICAgICAgICAgICAgZXhwcjogL1xiKHcpb3JrKHMpPyBwW2VyXStmZWN0XGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb3JrJDIgcGVyZmVjdGx5IiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmdyYW1tYXIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZG9lc250X3dvcms6IHsgIC8vIDkwMCsgcG9zdHMKICAgICAgICAgICAgICAgIGV4cHI6IC9cYihkKW9uJ3Qgd29ya3MvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxb2Vzbid0IHdvcmsiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMuZ3JhbW1hcgogICAgICAgICAgICB9LAogICAgICAgICAgICAvKgogICAgICAgICAgICAqKiBOb2lzZSByZWR1Y3Rpb24gLSBSZW1vdmUgZmx1ZmYgdGhhdCBhZGRzIG5vdGhpbmcgb2YgdGVjaG5pY2FsIHZhbHVlIHRvIHBvc3RzLgogICAgICAgICAgICAqKi8KICAgICAgICAgICAgaGVscDogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKGgpKD86W2VhXWw/cCkoPyFbLV0pXGIvZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxZWxwIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNpbGVudAogICAgICAgICAgICB9LAogICAgICAgICAgICB0aGFua3M6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYih0KSg/OmFua3N8aHh8YW54KVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMWhhbmtzIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNpbGVudAogICAgICAgICAgICB9LAogICAgICAgICAgICB0aWE6IHsgIC8vIGNvbW1vbiBhY3JvbnltOyBzaG91bGQgb25seSByZW1vdmUgInRoYW5rcyBpbiBhZHZhbmNlIiBhdCBlbmQgb2YgcG9zdAogICAgICAgICAgICAgICAgZXhwcjogL1xidGlhJC9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLm5vaXNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHBsZWFzZTogewogICAgICAgICAgICAgICAgZXhwcjogL1xiKHApKD86bHorfGxzZT98bD9lYXNlPylcYi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDFsZWFzZSIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5zaWxlbnQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZWRpdHVwZGF0ZTogewogICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci90VDJwSzYvOQogICAgICAgICAgICAgICAgZXhwcjogLyhbLV8qXStbXHQgXSpcYihlZGl0fHVwZGF0ZSlcYihbXHQgXSojP1swLTldKyk/W1x0IF0qOipbXHQgXSpbLV8qXSs6KnxbXHQgXSpcYihlZGl0fHVwZGF0ZSlcYihbXHQgXSojP1swLTldKyk/XHMqOitbXHQgXSopL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubm9pc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgLy8gaHR0cDovL21ldGEuc3RhY2tleGNoYW5nZS5jb20vcXVlc3Rpb25zLzI5NTAvc2hvdWxkLWhpLXRoYW5rcy10YWdsaW5lcy1hbmQtc2FsdXRhdGlvbnMtYmUtcmVtb3ZlZC1mcm9tLXBvc3RzLzkzOTg5IzkzOTg5CiAgICAgICAgICAgIHNhbHV0YXRpb246IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci95UzlsTjgvMTAKICAgICAgICAgICAgICAgIGV4cHI6IC9eXHMqKD86ZGVhcnM/XGIuKiR8Z3JlZXRpbmdzP1xiLiokfCg/OmhpKD86eWEpKnxoZWwrbyt8aGV5YT98aGFpfGcnP2RheXxnb29kXHM/KD86ZXZlbmluZ3xtb3JuaW5nfGRheXxhZnRlcm5vb24pfGFob3l8Zm9sa3N8Z3V5cylbLFxzXSooPzpccysoPzphbGx8Z3V5c3xmb2xrc3xmcmllbmRzP3x0aGVyZXxldmVyeW9uZXxwZW9wbGV8bWF0ZXk/cz98YnVkKyh5fGllcykpKikpKD86WywuIT86IF0qfCQpL2dtaSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLm5vaXNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGJhZHBocmFzZXM6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9nRTJoSDYvMTYKICAgICAgICAgICAgICAgIGV4cHI6IC9bXlxuLiE/Ol0qKD86dGhhbmtzfHRoYW5rWyAtXXlvdXxwbGVhc2V8aGVscHxzdWdnZXN0KD86aW9ucykpXGIoPzpbIC4/IV0qJHxbXlxuLiE/Ol0qXGIoPzpoZWxwfGFwK3JlY2lhdFx3KnxtZXxhZHZhblx3KnxhID9sb3QpXGJbXlxuLiE/Ol0qKVsuIT9fKl0qL2dpbSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLm5vaXNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGltbmV3OiB7CiAgICAgICAgICAgICAgICBleHByOiAvKD8hIClbXHdcc10qXGJpWycgXT9hP20gKyg/OmtpbmRhfHJlYWxseSkgKm5ld1x3KiArKD86dG98aW4pICpcdyogKig/OmFuZHxbOywuIT9dKT8gKi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiIiwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLm5vaXNlCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGNvbXBsaW1lbnRhcnlDbG9zZTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9oTDNrVDUvNQogICAgICAgICAgICAgICAgZXhwcjogL15ccyooPzooPzpraW5kKD86ZXN0KSogfGJlc3QgKSpyZWdhcmRzP3xjaGVlcnM/fGdyZWV0aW5ncz98dGhhbmtzfHRoYW5rIHlvdSlcYiw/LipbXHJcbl17MCwyfS4qKD86Wy4hPzogXSp8JCkvZ2ltLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubm9pc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgc29ycnk0ZW5nbGlzaDogeyAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3BHM29ENi84CiAgICAgICAgICAgICAgICBleHByOiAvW15cbi4hP10qKChzb3JyeXxhcCtvbG9nLip8Zm9yZ2l2ZSlcYlteLiE/OlxuXHJdK1xiKChiYWR8bXl8cG9vcikgZW5nbGlzaCl8KGVuZ2xpc2hbXi4hPzpcblxyXSspXGIodG9uZ3VlfGxhbmd1YWdlKSlcYlteLiE/OlxuXHJdKig/OlsuIT86XypdKSovZ2ksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ub2lzZQogICAgICAgICAgICB9LAogICAgICAgICAgICBob3BlX3RoaXNfaGVscHM6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IveUYxdVkwLzEKICAgICAgICAgICAgICAgIGV4cHI6IC9eXHMqaT8gP1xiaG9wZVxiW15cbi4hPzpdKmhlbHBzP1teXG4uIT86XSpbLC4hPzogKCleLV0qJC9nbWksCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5ub2lzZQogICAgICAgICAgICB9LAogICAgICAgICAgICBlbnRlcl9jb2RlX2hlcmU6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC9cYmVudGVyICg/OmNvZGV8aW1hZ2UgZGVzY3JpcHRpb258bGluayBkZXNjcmlwdGlvbikgaGVyZVxiL2dpLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIiLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubm9pc2UKICAgICAgICAgICAgfSwKICAgICAgICAgICAgLyoKICAgICAgICAgICAgKiogTGF5b3V0ICAtIE1pbmltaXplIHdoaXRlc3BhY2UgKHdoaWNoIGlzIGNvbXByZXNzZWQgYnkgbWFya3VwKS4KICAgICAgICAgICAgKiogICAgICAgICAgIE11c3QgZm9sbG93IG5vaXNlIHJlZHVjdGlvbi4KICAgICAgICAgICAgKiogICAgICAgICAgIExlYWRpbmcgYW5kIHRyYWlsaW5nIHNwYWNlcyBhcmUgcGFydCBvZiBNYXJrZG93biBmb3JtYXR0aW5nOyBsZWF2ZSB0aGVtLgogICAgICAgICAgICAqKi8KICAgICAgICAgICAgc3BhY2VfdGhlbl9zeW1ib2w6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvZk42bEw3LzYKICAgICAgICAgICAgICAgIGV4cHI6IC8oW14gXG5cclxbXCldKShcKCg/IVwpKSkvZ20sCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxICQyIiwKICAgICAgICAgICAgICAgIGRlYnVnOiBmYWxzZSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmxheW91dAogICAgICAgICAgICB9LAogICAgICAgICAgICBub19zcGFjZV9iZWZvcmVfc3ltYm9sOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL3FCOWxTMC8yCiAgICAgICAgICAgICAgICBleHByOiAvKD86KF4gKyl8WyBdKz8oWyw/ITopXSt8Wy5dKyg/IVtcU10pKSkvZ20sCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxJDIiLAogICAgICAgICAgICAgICAgZGVidWc6IGZhbHNlLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubGF5b3V0CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIHN5bWJvbF90aGVuX3NwYWNlOiB7ICAvLyBodHRwczovL3JlZ2V4MTAxLmNvbS9yL2lEOWFTMS82CiAgICAgICAgICAgICAgICBleHByOiAvKD86XGIpKFssPyE6KV0rfFsuXXszfSkoPzpcYikoPyFbXGRdKS9nbSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiJDEgIiwKICAgICAgICAgICAgICAgIGRlYnVnOiBmYWxzZSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLmxheW91dAogICAgICAgICAgICB9LAogICAgICAgICAgICBzcGFjZV9zeW1ib2xfc3BhY2U6IHsKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzpcYnwgKykoWyZdKSg/OiB8XGIpKD8hW1xkXSkvZywKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiAiICQxICIsCiAgICAgICAgICAgICAgICBkZWJ1ZzogZmFsc2UsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5sYXlvdXQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgbXVsdGlwbGVzcGFjZXM6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9oWTloUTMvMwogICAgICAgICAgICAgICAgZXhwcjogLyg/IV4pWyBdezIsfSg/ISA/JCkvZ20sCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiAiLAogICAgICAgICAgICAgICAgZGVidWc6IGZhbHNlLAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMubGF5b3V0CiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIG51bWJlcmVkX2xpc3Q6IHsgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9tSTFhVjMvMwogICAgICAgICAgICAgICAgZXhwcjogLyhbXG5ccl18XikrXCg/KFsgXHRdKltcZF0rKVspLjotXSAqL2dtLAogICAgICAgICAgICAgICAgcmVwbGFjZW1lbnQ6ICIkMSQxJDIuICIsCiAgICAgICAgICAgICAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5sYXlvdXQKICAgICAgICAgICAgfSwKICAgICAgICAgICAgLy8gRElTQUJMRUQgdGVtcG9yYXJpbHkgLSBzZWUgSXNzdWUgIzExNQogICAgICAgICAgICAvL2JsYW5rbGluZXM6IHsgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvZUE1aEEyLzIKICAgICAgICAgICAgLy8gICAgZXhwcjogL14oPzogKltcblxyXGZdKSt8KD86ICpbXG5cclxmXSkrJHwoKD86ICpbXG5cclxmXSl7Mn0pKD86KD86ICpbXG5cclxmXSkpKy9nLAogICAgICAgICAgICAvLyAgICByZXBsYWNlbWVudDogIiQxIiwKICAgICAgICAgICAgLy8gICAgZGVidWc6IGZhbHNlLAogICAgICAgICAgICAvLyAgICByZWFzb246IEFwcC5jb25zdHMucmVhc29ucy5sYXlvdXQKICAgICAgICAgICAgLy99LAogICAgICAgICAgICB0cmFpbGluZ19zcGFjZTogeyAgLy8gaHR0cHM6Ly9yZWdleDEwMS5jb20vci9pUTB5UjgvMQogICAgICAgICAgICAgICAgZXhwcjogLyhbXiBdKVsgXXsxfSQvZ20sCiAgICAgICAgICAgICAgICByZXBsYWNlbWVudDogIiQxIiwKICAgICAgICAgICAgICAgIGRlYnVnOiBmYWxzZSwKICAgICAgICAgICAgICAgIHJlYXNvbjogQXBwLmNvbnN0cy5yZWFzb25zLnNpbGVudAogICAgICAgICAgICB9LAogICAgICAgICAgICAvLyBUaGUgdGl0bGUgc2F5cyBpdCBhbGwKICAgICAgICAgICAgdGhldGl0bGVzYXlzaXRhbGw6IHsKICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvYlgxcUI0LzMKICAgICAgICAgICAgICAgIGV4cHI6IC8oPzp0aGUgKT90aXRsZSBzYXlzICg/Oml0IGFsbHxldmVyeXRoaW5nKVsuPyFdKi9naSwKICAgICAgICAgICAgICAgIHJlcGxhY2VtZW50OiBmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHJldHVybiBBcHAuc2VsZWN0aW9ucy50aXRsZS52YWwoKS5yZXBsYWNlKC9bLj8hXSokLywiPyBcblxuIik7CiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgcmVhc29uOiBBcHAuY29uc3RzLnJlYXNvbnMudGl0bGVTYXlzQWxsCiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAvLyBUaGlzIGlzIHdoZXJlIHRoZSBtYWdpYyBoYXBwZW5zOiB0aGlzIGZ1bmN0aW9uIHRha2VzIGEgZmV3IHBpZWNlcyBvZiBpbmZvcm1hdGlvbiBhbmQgYXBwbGllcyBlZGl0cyB0byB0aGUgcG9zdAogICAgICAgIEFwcC5mdW5jcy5maXhJdCA9IGZ1bmN0aW9uKGlucHV0LCBlZGl0KSB7CiAgICAgICAgICAgIHZhciBleHByZXNzaW9uID0gZWRpdC5leHByOwogICAgICAgICAgICB2YXIgcmVwbGFjZW1lbnQgPSBlZGl0LnJlcGxhY2VtZW50OwogICAgICAgICAgICB2YXIgcmVhc29uaW5nID0gZWRpdC5yZWFzb247CiAgICAgICAgICAgIHZhciBkZWJ1ZyA9IGVkaXQuZGVidWc7CiAgICAgICAgICAgIAogICAgICAgICAgICBpZiAoZGVidWcpIHsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGlucHV0KTsKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKGV4cHJlc3Npb24udG9TdHJpbmcoKSk7CiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygicmVwbGFjZW1lbnQ6ICciK3JlcGxhY2VtZW50KyInIik7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgbm90aGluZyB0byBzZWFyY2gsIGV4aXQKICAgICAgICAgICAgaWYgKCFpbnB1dCkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICAvLyBTY2FuIHRoZSBwb3N0IHRleHQgdXNpbmcgdGhlIGV4cHJlc3Npb24gdG8gc2VlIGlmIHRoZXJlIGFyZSBhbnkgbWF0Y2hlcwogICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IGlucHV0Lm1hdGNoKGV4cHJlc3Npb24pOwogICAgICAgICAgICBpZiAoZGVidWcpIGNvbnNvbGUubG9nKG1hdGNoZXMsIGV4cHJlc3Npb24uZXhlYyhpbnB1dCkpOwogICAgICAgICAgICBpZiAoIW1hdGNoZXMpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgdmFyIGNvdW50ID0gMDsgIC8vICMgcmVwbGFjZW1lbnRzIHRvIGRvCiAgICAgICAgICAgIGlucHV0ID0gaW5wdXQucmVwbGFjZShleHByZXNzaW9uLCBmdW5jdGlvbihiZWZvcmUpeyAKICAgICAgICAgICAgICAgIHZhciBhZnRlciA9IGJlZm9yZS5yZXBsYWNlKGV4cHJlc3Npb24sIHJlcGxhY2VtZW50KTsKICAgICAgICAgICAgICAgIGlmKGFmdGVyICE9PSBiZWZvcmUpICsrY291bnQ7IAogICAgICAgICAgICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZyhiZWZvcmUsIGFmdGVyLCBhZnRlciAhPT0gYmVmb3JlLCBjb3VudCk7CiAgICAgICAgICAgICAgICByZXR1cm4gYWZ0ZXI7CiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBpZiAoIWNvdW50KSB7CiAgICAgICAgICAgICAgICAvLyBTZWVtcyBsaWtlIG5vIHJlcGxhY2VtZW50cywgY2hlY2suCiAgICAgICAgICAgICAgICAvLyBJbiBzb21lIGNhc2VzLCB0aGUgZXhwcmVzc2lvbiBtYXRjaGVzIG9uIHRoZSBpbml0aWFsIGlucHV0LCBidXQKICAgICAgICAgICAgICAgIC8vIGZhaWxzIHRvIG9uIHRoZSBpbmRpdmlkdWFsIG1hdGNoZXMuIEluIHRoYXQgY2FzZSwgd2UgY2FuJ3QgY291bnQKICAgICAgICAgICAgICAgIC8vIHRoZSB0b3RhbCBjaGFuZ2VzIGFjY3VyYXRlbHksIGJ1dCB3ZSBjYW4gc3RpbGwgY29tcGxldGUgdGhlCiAgICAgICAgICAgICAgICAvLyByZXBsYWNlbWVudCBvbiB0aGUgaW5pdGlhbCBpbnB1dC4KICAgICAgICAgICAgICAgIHZhciBhZnRlciA9IGlucHV0LnJlcGxhY2UoZXhwcmVzc2lvbiwgcmVwbGFjZW1lbnQpOwogICAgICAgICAgICAgICAgaWYgKGRlYnVnKSBjb25zb2xlLmxvZygiemVyby1jb3VudDogIiwgaW5wdXQsIGFmdGVyLCBhZnRlciAhPT0gaW5wdXQpOwogICAgICAgICAgICAgICAgaWYoYWZ0ZXIgIT09IGlucHV0KSB7CiAgICAgICAgICAgICAgICAgICAgKytjb3VudDsgCiAgICAgICAgICAgICAgICAgICAgaW5wdXQgPSBhZnRlcjsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gY291bnQgPiAwID8gewogICAgICAgICAgICAgICAgcmVhc29uOiByZWFzb25pbmcsCiAgICAgICAgICAgICAgICBmaXhlZDogU3RyaW5nKGlucHV0KSwKICAgICAgICAgICAgICAgIGNvdW50OiBjb3VudAogICAgICAgICAgICB9IDogZmFsc2U7CiAgICAgICAgfTsKCiAgICAgICAgLy8gUG9wdWxhdGUgb3IgcmVmcmVzaCBET00gc2VsZWN0aW9ucwogICAgICAgIEFwcC5mdW5jcy5wb3BTZWxlY3Rpb25zID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnJlZG9CdXR0b24gICAgID0gQXBwLmdsb2JhbHMucm9vdC5maW5kKCdbaWRePSJ3bWQtcmVkby1idXR0b24iXScpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5ib2R5ICAgICAgICAgICA9IEFwcC5nbG9iYWxzLnJvb3QuZmluZCgnW2lkXj0id21kLWlucHV0Il0nKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMudGl0bGUgICAgICAgICAgPSBBcHAuZ2xvYmFscy5yb290LmZpbmQoJ1tjbGFzcyo9InRpdGxlLWZpZWxkIl0nKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuc3VtbWFyeSAgICAgICAgPSBBcHAuZ2xvYmFscy5yb290LmZpbmQoJ1tpZF49ImVkaXQtY29tbWVudCJdLCAuZWRpdC1jb21tZW50Jyk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnRhZ0ZpZWxkICAgICAgID0gQXBwLmdsb2JhbHMucm9vdC5maW5kKCIudGFnLWVkaXRvciIpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5zdWJtaXRCdXR0b24gICA9IEFwcC5nbG9iYWxzLnJvb3QuZmluZCgnW2lkXj0ic3VibWl0LWJ1dHRvbiJdJyk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmhlbHBCdXR0b24gICAgID0gQXBwLmdsb2JhbHMucm9vdC5maW5kKCdbaWRePSJ3bWQtaGVscC1idXR0b24iXScpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5lZGl0b3IgICAgICAgICA9IEFwcC5nbG9iYWxzLnJvb3QuZmluZCgnLnBvc3QtZWRpdG9yJyk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnByZXZpZXcgICAgICAgID0gQXBwLmdsb2JhbHMucm9vdC5maW5kKCcud21kLXByZXZpZXcnKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMucHJldmlld01lbnUgICAgPSBBcHAuZ2xvYmFscy5yb290LmZpbmQoJy5wcmV2aWV3LW9wdGlvbnMnKS5hcHBlbmQoJyZuYnNwOyZuYnNwOycpOwogICAgICAgICAgICBpZighQXBwLnNlbGVjdGlvbnMucHJldmlld01lbnUubGVuZ3RoKSB7CiAgICAgICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3TWVudSAgID0gJCgnPGRpdiBjbGFzcz0icHJldmlldy1vcHRpb25zIHBvc3QtbWVudSIgc3R5bGU9Im1hcmdpbi10b3A6NXB4O21hcmdpbi1ib3R0b206OHB4OyIvPicpLmluc2VydEJlZm9yZShBcHAuc2VsZWN0aW9ucy5wcmV2aWV3KTsKICAgICAgICAgICAgICAgIHZhciBwcmV2aWV3VG9nZ2xlVGV4dCA9IEFwcC5zZWxlY3Rpb25zLnByZXZpZXcuaXMoJzp2aXNpYmxlJykgPyAnaGlkZSBwcmV2aWV3JyA6ICdzaG93IHByZXZpZXcnOwogICAgICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMucHJldmlld1RvZ2dsZSA9ICQoJzxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImhpZGUtcHJldmlldyIgc3R5bGU9Im1hcmdpbi1sZWZ0Oi0ycHg7Ij4nICsgcHJldmlld1RvZ2dsZVRleHQgKyAnPC9hPicpLmNsaWNrKEFwcC5mdW5jcy50b2dnbGVQcmV2aWV3KS5hcHBlbmRUbyhBcHAuc2VsZWN0aW9ucy5wcmV2aWV3TWVudSk7CiAgICAgICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3TWVudS5hcHBlbmQoJyZuYnNwOyZuYnNwOycpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMucHJldmlld1RvZ2dsZSAgPSBBcHAuZ2xvYmFscy5yb290LmZpbmQoJy5oaWRlLXByZXZpZXcnKS5vZmYoJ2NsaWNrJykuYXR0cignaHJlZicsJ2phdmFzY3JpcHQ6dm9pZCgwKScpLmNsaWNrKEFwcC5mdW5jcy50b2dnbGVQcmV2aWV3KTsKICAgICAgICAgICAgfQogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5kaWZmVG9nZ2xlICAgICA9ICQoJzxhIGhyZWY9ImphdmFzY3JpcHQ6dm9pZCgwKSIgY2xhc3M9ImhpZGUtcHJldmlldyIgc3R5bGU9Im1hcmdpbi1sZWZ0Oi0ycHg7Ij5zaG93IGRpZmY8L2E+JykuY2xpY2soQXBwLmZ1bmNzLnRvZ2dsZURpZmYpLmFwcGVuZFRvKEFwcC5zZWxlY3Rpb25zLnByZXZpZXdNZW51KTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuZGlmZiAgICAgICAgICAgPSAkKCc8ZGl2IGNsYXNzPSJ3bWQtcHJldmlldyIvPicpLmhpZGUoKS5hcHBlbmRUbyhBcHAuc2VsZWN0aW9ucy5lZGl0b3IpOwogICAgICAgIH07CgogICAgICAgIEFwcC5mdW5jcy5zaG93UHJldmlldyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5kaWZmLmhpZGUoKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuZGlmZlRvZ2dsZS50ZXh0KCdzaG93IGRpZmYnKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMucHJldmlldy5zaG93KCk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnByZXZpZXdUb2dnbGUudGV4dCgnaGlkZSBwcmV2aWV3Jyk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIEFwcC5mdW5jcy5zaG93RGlmZiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3LmhpZGUoKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMucHJldmlld1RvZ2dsZS50ZXh0KCdzaG93IHByZXZpZXcnKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuZGlmZi5zaG93KCk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmRpZmZUb2dnbGUudGV4dCgnaGlkZSBkaWZmJyk7CiAgICAgICAgfQogICAgICAgIAogICAgICAgIEFwcC5mdW5jcy50b2dnbGVQcmV2aWV3ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmRpZmYuaGlkZSgpOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5kaWZmVG9nZ2xlLnRleHQoJ3Nob3cgZGlmZicpOwogICAgICAgICAgICBpZigvaGlkZS8udGVzdChBcHAuc2VsZWN0aW9ucy5wcmV2aWV3VG9nZ2xlLnRleHQoKSkpIHJldHVybiBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3VG9nZ2xlLnRleHQoJ3Nob3cgcHJldmlldycpLCBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3LnRvZ2dsZSgpLCB0cnVlOwogICAgICAgICAgICBpZigvc2hvdy8udGVzdChBcHAuc2VsZWN0aW9ucy5wcmV2aWV3VG9nZ2xlLnRleHQoKSkpIHJldHVybiBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3VG9nZ2xlLnRleHQoJ2hpZGUgcHJldmlldycpLCBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3LnRvZ2dsZSgpLCB0cnVlOwogICAgICAgIH0KICAgICAgICAKICAgICAgICBBcHAuZnVuY3MudG9nZ2xlRGlmZiA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5wcmV2aWV3LmhpZGUoKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMucHJldmlld1RvZ2dsZS50ZXh0KCdzaG93IHByZXZpZXcnKTsKICAgICAgICAgICAgaWYoL2hpZGUvLnRlc3QoQXBwLnNlbGVjdGlvbnMuZGlmZlRvZ2dsZS50ZXh0KCkpKSByZXR1cm4gQXBwLnNlbGVjdGlvbnMuZGlmZlRvZ2dsZS50ZXh0KCdzaG93IGRpZmYnKSwgQXBwLnNlbGVjdGlvbnMuZGlmZi50b2dnbGUoKSwgdHJ1ZTsKICAgICAgICAgICAgaWYoL3Nob3cvLnRlc3QoQXBwLnNlbGVjdGlvbnMuZGlmZlRvZ2dsZS50ZXh0KCkpKSByZXR1cm4gQXBwLnNlbGVjdGlvbnMuZGlmZlRvZ2dsZS50ZXh0KCdoaWRlIGRpZmYnKSwgQXBwLnNlbGVjdGlvbnMuZGlmZi50b2dnbGUoKSwgdHJ1ZTsKICAgICAgICB9CiAgICAgICAgCiAgICAgICAgLy8gUG9wdWxhdGUgZWRpdCBpdGVtIHNldHMgZnJvbSBET00gc2VsZWN0aW9ucwogICAgICAgIEFwcC5mdW5jcy5wb3BJdGVtcyA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgaSA9IEFwcC5pdGVtcywgcyA9IEFwcC5zZWxlY3Rpb25zOwogICAgICAgICAgICBbJ3RpdGxlJywgJ2JvZHknLCAnc3VtbWFyeSddLmZvckVhY2goZnVuY3Rpb24odikgewogICAgICAgICAgICAgICAgaVt2XSA9IHNbdl0ubGVuZ3RoID8gc1t2XS52YWwoKSA6ICcnOwogICAgICAgICAgICB9KTsKICAgICAgICB9OwoKICAgICAgICAvLyBQb3B1bGF0ZSBvcmlnaW5hbCBpdGVtIHNldHMgZnJvbSBlZGl0IGl0ZW1zIGZvciB0aGUgZGlmZgogICAgICAgIEFwcC5mdW5jcy5wb3BPcmlnaW5hbHMgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGkgPSBBcHAub3JpZ2luYWxzLCBzID0gQXBwLml0ZW1zOwogICAgICAgICAgICBbJ3RpdGxlJywgJ2JvZHknLCAnc3VtbWFyeSddLmZvckVhY2goZnVuY3Rpb24odikgewogICAgICAgICAgICAgICAgaVt2XSA9IHNbdl07CiAgICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICAKICAgICAgICAvLyBJbnNlcnQgZWRpdGluZyBidXR0b24KICAgICAgICBBcHAuZnVuY3MuY3JlYXRlQnV0dG9uID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIGlmICghQXBwLnNlbGVjdGlvbnMucmVkb0J1dHRvbi5sZW5ndGgpIHJldHVybiBmYWxzZTsKCiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmJ1dHRvbldyYXBwZXIgPSAkKCc8bGkgY2xhc3M9IndtZC1tYWdpYy1lZGl0Ii8+Jyk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmJ1dHRvbkZpeCA9ICQoJzxpbWcgc3JjPSIvL2kuc3RhY2suaW1ndXIuY29tL09tNXBMLnBuZyIgY2xhc3M9IndtZC1idXR0b24gVG9vbGtpdEZpeCIgdGl0bGU9IkZpeCB0aGUgY29udGVudCEiIC8+Jyk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmJ1dHRvbkluZm8gPSAkKCc8ZGl2IGNsYXNzPSJUb29sa2l0SW5mbyI+Jyk7CgogICAgICAgICAgICAvLyBCdWlsZCB0aGUgYnV0dG9uCiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmJ1dHRvbldyYXBwZXIuYXBwZW5kKEFwcC5zZWxlY3Rpb25zLmJ1dHRvbkZpeCk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmJ1dHRvbldyYXBwZXIuYXBwZW5kKEFwcC5zZWxlY3Rpb25zLmJ1dHRvbkluZm8pOwoKICAgICAgICAgICAgLy8gSW5zZXJ0IGJ1dHRvbgogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5yZWRvQnV0dG9uLmFmdGVyKEFwcC5zZWxlY3Rpb25zLmJ1dHRvbldyYXBwZXIpOwoKICAgICAgICAgICAgLy8gQXR0YWNoIHRoZSBldmVudCBsaXN0ZW5lciB0byB0aGUgYnV0dG9uCiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLmJ1dHRvbkZpeC5jbGljayhBcHAuZnVuY3MuZml4RXZlbnQpOwogICAgICAgICAgICAKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuYnV0dG9uV3JhcHBlci5jc3MoewogICAgICAgICAgICAgICAgJ3Bvc2l0aW9uJzogJ3JlbGF0aXZlJywKICAgICAgICAgICAgICAgICdsZWZ0JzogJzQxMHB4JywKICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaycsCiAgICAgICAgICAgICAgICAnb3ZlcmZsb3cnOiAndmlzaWJsZScsCiAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzU1JScsCiAgICAgICAgICAgICAgICAnd2hpdGUtc3BhY2UnOiAnbm93cmFwJwogICAgICAgICAgICB9KTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuYnV0dG9uRml4LmNzcyh7CiAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAnc3RhdGljJywKICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaycsCiAgICAgICAgICAgICAgICAnd2lkdGgnOiAnYXV0bycsCiAgICAgICAgICAgICAgICAnaGVpZ2h0JzogJzEwMCUnCiAgICAgICAgICAgIH0pOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5idXR0b25JbmZvLmNzcyh7CiAgICAgICAgICAgICAgICAncG9zaXRpb24nOiAnc3RhdGljJywKICAgICAgICAgICAgICAgICdkaXNwbGF5JzogJ2lubGluZS1ibG9jaycsCiAgICAgICAgICAgICAgICAndmVydGljYWwtYWxpZ24nOiAnYm90dG9tJywKICAgICAgICAgICAgICAgICdtYXJnaW4tbGVmdCc6ICc1cHgnLAogICAgICAgICAgICAgICAgJ2ZvbnQtc2l6ZSc6ICcxMnB4JywKICAgICAgICAgICAgICAgICdjb2xvcic6ICcjNDI0MjQyJywKICAgICAgICAgICAgICAgICdiYWNrZ3JvdW5kJzogJyNlZWUnLAogICAgICAgICAgICAgICAgJ2JvcmRlci1yYWRpdXMnOiAnM3B4JywKICAgICAgICAgICAgICAgICdwYWRkaW5nJzogJzNweCA2cHgnCiAgICAgICAgICAgIH0pLmhpZGUoKTsKICAgICAgICB9OwoKICAgICAgICBBcHAuZnVuY3MuZml4RXZlbnQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgcmV0dXJuIEFwcC5mdW5jcy5wb3BJdGVtcygpLCBBcHAucGlwZShBcHAuaXRlbXMsIEFwcC5waXBlTW9kcywgQXBwLmdsb2JhbHMub3JkZXIpLCBmYWxzZTsKICAgICAgICB9OwoKICAgICAgICBBcHAuZnVuY3MuZGlmZiA9IGZ1bmN0aW9uKGExLCBhMikgewogICAgICAgICAgICB2YXIgc3RyaW5ncyA9IFtdOwogICAgICAgICAgICBmdW5jdGlvbiBtYWFrUmlqKHR5cGUsIHJpaikgewogICAgICAgICAgICAgICAgaWYgKCF0eXBlKSByZXR1cm4gc3RyaW5ncy5wdXNoKHJpai5yZXBsYWNlKC9cPC9nLCAnJmx0OycpKSwgdHJ1ZTsKICAgICAgICAgICAgICAgIGlmICh0eXBlID09PSAnKycpIHJldHVybiBzdHJpbmdzLnB1c2goJzxzcGFuIGNsYXNzPSJhZGQiPicgKyByaWoucmVwbGFjZSgvXDwvZywgJyZsdDsnKS5yZXBsYWNlKC8oPz1cbikvZywn4oa1JykgKyAnPC9zcGFuPicpLCB0cnVlOwogICAgICAgICAgICAgICAgaWYgKHR5cGUgPT09ICctJykgcmV0dXJuIHN0cmluZ3MucHVzaCgnPHNwYW4gY2xhc3M9ImRlbCI+JyArIHJpai5yZXBsYWNlKC9cPC9nLCAnJmx0OycpLnJlcGxhY2UoLyg/PVxuKS9nLCfihrUnKSArICc8L3NwYW4+JyksIHRydWU7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZ1bmN0aW9uIGdldERpZmYobWF0cml4LCBhMSwgYTIsIHgsIHkpIHsKICAgICAgICAgICAgICAgIGlmICh4ID4gMCAmJiB5ID4gMCAmJiBhMVt5IC0gMV0gPT09IGEyW3ggLSAxXSkgewogICAgICAgICAgICAgICAgICAgIGdldERpZmYobWF0cml4LCBhMSwgYTIsIHggLSAxLCB5IC0gMSk7CiAgICAgICAgICAgICAgICAgICAgbWFha1JpaihmYWxzZSwgYTFbeSAtIDFdKTsKICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgaWYgKHggPiAwICYmICh5ID09PSAwIHx8IG1hdHJpeFt5XVt4IC0gMV0gPj0gbWF0cml4W3kgLSAxXVt4XSkpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZ2V0RGlmZihtYXRyaXgsIGExLCBhMiwgeCAtIDEsIHkpOwogICAgICAgICAgICAgICAgICAgICAgICBtYWFrUmlqKCcrJywgYTJbeCAtIDFdKTsKICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHkgPiAwICYmICh4ID09PSAwIHx8IG1hdHJpeFt5XVt4IC0gMV0gPCBtYXRyaXhbeSAtIDFdW3hdKSkgewogICAgICAgICAgICAgICAgICAgICAgICBnZXREaWZmKG1hdHJpeCwgYTEsIGEyLCB4LCB5IC0gMSk7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hYWtSaWooJy0nLCBhMVt5IC0gMV0pOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIGExID0gYTEuc3BsaXQoLyg/PVxifFxXfF8pL2cpOwogICAgICAgICAgICBhMiA9IGEyLnNwbGl0KC8oPz1cYnxcV3xfKS9nKTsKCiAgICAgICAgICAgIHZhciBtYXRyaXggPSBuZXcgQXJyYXkoYTEubGVuZ3RoICsgMSk7CiAgICAgICAgICAgIHZhciB4LCB5OwogICAgICAgICAgICBmb3IgKHkgPSAwOyB5IDwgbWF0cml4Lmxlbmd0aDsgeSsrKSB7CiAgICAgICAgICAgICAgICBtYXRyaXhbeV0gPSBuZXcgQXJyYXkoYTIubGVuZ3RoICsgMSk7CgogICAgICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IG1hdHJpeFt5XS5sZW5ndGg7IHgrKykgewogICAgICAgICAgICAgICAgICAgIG1hdHJpeFt5XVt4XSA9IDA7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAoeSA9IDE7IHkgPCBtYXRyaXgubGVuZ3RoOyB5KyspIHsKICAgICAgICAgICAgICAgIGZvciAoeCA9IDE7IHggPCBtYXRyaXhbeV0ubGVuZ3RoOyB4KyspIHsKICAgICAgICAgICAgICAgICAgICBpZiAoYTFbeSAtIDFdID09PSBhMlt4IC0gMV0pIHsKICAgICAgICAgICAgICAgICAgICAgICAgbWF0cml4W3ldW3hdID0gMSArIG1hdHJpeFt5IC0gMV1beCAtIDFdOwogICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICAgICAgICAgIG1hdHJpeFt5XVt4XSA9IE1hdGgubWF4KG1hdHJpeFt5IC0gMV1beF0sIG1hdHJpeFt5XVt4IC0gMV0pOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQoKICAgICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgICAgIGdldERpZmYobWF0cml4LCBhMSwgYTIsIHggLSAxLCB5IC0gMSk7CiAgICAgICAgICAgICAgICByZXR1cm4gc3RyaW5ncy5qb2luKCcnKTsKICAgICAgICAgICAgfSBjYXRjaCAoZSkgewogICAgICAgICAgICAgICAgY29uc29sZS5sb2coZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9OwoKICAgICAgICAvLyBQaXBlIGRhdGEgdGhyb3VnaCBtb2R1bGVzIGluIHByb3BlciBvcmRlciwgcmV0dXJuaW5nIHRoZSByZXN1bHQKICAgICAgICBBcHAucGlwZSA9IGZ1bmN0aW9uKGRhdGEsIG1vZHMsIG9yZGVyKSB7CiAgICAgICAgICAgIHZhciBtb2ROYW1lOwogICAgICAgICAgICBmb3IgKHZhciBpIGluIG9yZGVyKSB7CiAgICAgICAgICAgICAgICBpZiAob3JkZXIuaGFzT3duUHJvcGVydHkoaSkpIHsKICAgICAgICAgICAgICAgICAgICBtb2ROYW1lID0gb3JkZXJbaV07CiAgICAgICAgICAgICAgICAgICAgbW9kc1ttb2ROYW1lXShkYXRhKTsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIEFwcC5waXBlTW9kcy5vbWl0ID0gZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICBpZiAoIWRhdGEuYm9keSkgcmV0dXJuIGZhbHNlOwogICAgICAgICAgICBmb3IgKHZhciB0eXBlIGluIEFwcC5nbG9iYWxzLmNoZWNrcykgewogICAgICAgICAgICAgICAgZGF0YS5ib2R5ID0gZGF0YS5ib2R5LnJlcGxhY2UoQXBwLmdsb2JhbHMuY2hlY2tzW3R5cGVdLCBmdW5jdGlvbihtYXRjaCkgewogICAgICAgICAgICAgICAgICAgIEFwcC5nbG9iYWxzLnJlcGxhY2VkU3RyaW5nc1t0eXBlXS5wdXNoKG1hdGNoKTsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gQXBwLmdsb2JhbHMucGxhY2VIb2xkZXJzW3R5cGVdOwogICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmV0dXJuIGRhdGE7CiAgICAgICAgfTsKCiAgICAgICAgQXBwLnBpcGVNb2RzLmNvZGVmaXggPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIHJlcGxhY2VkID0gQXBwLmdsb2JhbHMucmVwbGFjZWRTdHJpbmdzLmJsb2NrLCBzdHI7CiAgICAgICAgICAgIGZvciAodmFyIGkgaW4gcmVwbGFjZWQpIHsKICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvdFg5cE0zLzEgICAgICAgICAgICAgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvdFg5cE0zLzIgICAgICAgICAgICAgICAgIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IvdFg5cE0zLzMKICAgICAgICAgICAgICAgIGlmICgvXmBbXl0rYCQvLnRlc3QocmVwbGFjZWRbaV0pKSByZXBsYWNlZFtpXSA9ICdcblxuJyArIC8oPyFgKSgoPyFgKVteXSkrLy5leGVjKHJlcGxhY2VkW2ldKVswXS5yZXBsYWNlKC8oLispL2csICcgICAgJDEnKTsKICAgICAgICAgICAgfQogICAgICAgIH07CgogICAgICAgIEFwcC5waXBlTW9kcy5lZGl0ID0gZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICBBcHAuZnVuY3MucG9wT3JpZ2luYWxzKCk7CgogICAgICAgICAgICAvLyBWaXN1YWxseSBjb25maXJtIGVkaXQgLSBTRSBtYWtlcyBpdCBlYXN5IGJlY2F1c2UgdGhlIGpRdWVyeSBjb2xvciBhbmltYXRpb24gcGx1Z2luIHNlZW1zIHRvIGJlIHRoZXJlIGJ5IGRlZmF1bHQKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuYm9keS5hbmltYXRlKHsgYmFja2dyb3VuZENvbG9yOiAnI2M4ZmZhNycgfSwgMTApOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5ib2R5LmFuaW1hdGUoeyBiYWNrZ3JvdW5kQ29sb3I6ICcjZmZmJyB9LCAxMDAwKTsKCiAgICAgICAgICAgIC8vIExpc3Qgb2YgZmllbGRzIHRvIGJlIGVkaXRlZAogICAgICAgICAgICB2YXIgZmllbGRzID0ge2JvZHk6J2JvZHknLHRpdGxlOid0aXRsZSd9OwogICAgICAgICAgICAKICAgICAgICAgICAgLy8gTG9vcCB0aHJvdWdoIGFsbCBlZGl0aW5nIHJ1bGVzCiAgICAgICAgICAgIGZvciAodmFyIGogaW4gQXBwLmVkaXRzKSBmb3IgKHZhciBmaWVsZCBpbiBmaWVsZHMpIHsKICAgICAgICAgICAgICAgIGlmIChBcHAuY29uc3RzLnJlYXNvbnMudGlkeVRpdGxlID09IEFwcC5lZGl0c1tqXS5yZWFzb24gJiYgJ3RpdGxlJyAhPT0gZmllbGQpCiAgICAgICAgICAgICAgICAgICAgY29udGludWU7ICAvLyBTa2lwIHRpdGxlLW9ubHkgZWRpdHMgaWYgbm90IGVkaXRpbmcgdGl0bGUuCiAgICAgICAgICAgICAgICB2YXIgZml4ID0gQXBwLmZ1bmNzLmZpeEl0KGRhdGFbZmllbGRdLCBBcHAuZWRpdHNbal0pOwogICAgICAgICAgICAgICAgaWYgKCFmaXgpIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgaWYgKGZpeC5yZWFzb24gaW4gQXBwLmdsb2JhbHMucmVhc29ucykgQXBwLmdsb2JhbHMucmVhc29uc1tmaXgucmVhc29uXS5jb3VudCArPSBmaXguY291bnQ7CiAgICAgICAgICAgICAgICBlbHNlIEFwcC5nbG9iYWxzLnJlYXNvbnNbZml4LnJlYXNvbl0gPSB7IHJlYXNvbjpmaXgucmVhc29uLCBlZGl0SWQ6aiwgY291bnQ6Zml4LmNvdW50IH07CiAgICAgICAgICAgICAgICBkYXRhW2ZpZWxkXSA9IGZpeC5maXhlZDsKICAgICAgICAgICAgICAgIEFwcC5lZGl0c1tqXS5maXhlZCA9IHRydWU7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIFJlbW92ZSBzaWxlbnQgY2hhbmdlIHJlYXNvbgogICAgICAgICAgICBkZWxldGUgQXBwLmdsb2JhbHMucmVhc29uc1tBcHAuY29uc3RzLnJlYXNvbnMuc2lsZW50XTsKICAgICAgICAgICAgCiAgICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBubyByZWFzb25zLCBleGl0CiAgICAgICAgICAgIGlmIChBcHAuZ2xvYmFscy5yZWFzb25zID09IHt9KSByZXR1cm4gZmFsc2U7CgogICAgICAgICAgICAvLyBXZSBuZWVkIGEgcGxhY2UgdG8gc3RvcmUgdGhlIHJlYXNvbnMgYmVpbmcgYXBwbGllZCB0byB0aGUgc3VtbWFyeS4gCiAgICAgICAgICAgIHZhciByZWFzb25zID0gW107CiAgICAgICAgICAgIEFwcC5nbG9iYWxzLmNoYW5nZXMgPSAwOwoKICAgICAgICAgICAgZm9yICh2YXIgeiBpbiBBcHAuZ2xvYmFscy5yZWFzb25zKSB7CiAgICAgICAgICAgICAgICAvLyBGb3IgZWFjaCB0eXBlIG9mIGNoYW5nZSBtYWRlLCBhZGQgYSByZWFzb24gc3RyaW5nIHdpdGggdGhlIHJlYXNvbiB0ZXh0LAogICAgICAgICAgICAgICAgLy8gb3B0aW9uYWxseSB0aGUgcnVsZSBJRCwgYW5kIHRoZSBudW1iZXIgb2YgcmVwZWF0cyBpZiAyIG9yIG1vcmUuCiAgICAgICAgICAgICAgICByZWFzb25zLnB1c2goQXBwLmdsb2JhbHMucmVhc29uc1t6XS5yZWFzb24KICAgICAgICAgICAgICAgICAgICAgICAgICAgICArIChBcHAuZ2xvYmFscy5zaG93UnVsZXMgPyAnIFsnKyBBcHAuZ2xvYmFscy5yZWFzb25zW3pdLmVkaXRJZCArJ10nIDogJycpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKyAoQXBwLmdsb2JhbHMuc2hvd0NvdW50cyA/ICgoQXBwLmdsb2JhbHMucmVhc29uc1t6XS5jb3VudCA+IDEpID8gJyAoJytBcHAuZ2xvYmFscy5yZWFzb25zW3pdLmNvdW50KycpJyA6ICcnKSA6ICcnKSApOwogICAgICAgICAgICAgICAgQXBwLmdsb2JhbHMuY2hhbmdlcyArPSBBcHAuZ2xvYmFscy5yZWFzb25zW3pdLmNvdW50OwogICAgICAgICAgICB9CgogICAgICAgICAgICB2YXIgcmVhc29uU3RyID0gcmVhc29ucy5sZW5ndGggPyByZWFzb25zLmpvaW4oJzsgJykrJy4nIDogJyc7ICAvLyBVbmlxdWUgcmVhc29ucyBzZXBhcmF0ZWQgYnkgOyBhbmQgdGVybWluYXRlZCBieSAuCgogICAgICAgICAgICBpZiAoIWRhdGEuaGFzT3duUHJvcGVydHkoJ3N1bW1hcnlPcmlnJykpIGRhdGEuc3VtbWFyeU9yaWcgPSBkYXRhLnN1bW1hcnkudHJpbSgpIC8vIFJlbWVtYmVyIG9yaWdpbmFsIHN1bW1hcnkKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKC8oW147XSlbLj8hOl0/JC8sIiQxOyIpOwogICAgICAgICAgICBpZiAoZGF0YS5zdW1tYXJ5T3JpZy5sZW5ndGgpCiAgICAgICAgICAgICAgICBkYXRhLnN1bW1hcnlPcmlnID0gZGF0YS5zdW1tYXJ5T3JpZyArICcgJzsKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcmVhc29uU3RyID0gcmVhc29uU3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcmVhc29uU3RyLnNsaWNlKDEpOyAgLy8gQ2FwIGZpcnN0IGxldHRlci4KCiAgICAgICAgICAgIGRhdGEuc3VtbWFyeSA9IGRhdGEuc3VtbWFyeU9yaWcgKyByZWFzb25TdHI7CiAgICAgICAgICAgIC8vIExpbWl0IHN1bW1hcnkgdG8gMzAwIGNoYXJzCiAgICAgICAgICAgIGlmIChkYXRhLnN1bW1hcnkubGVuZ3RoID4gMzAwKSBkYXRhLnN1bW1hcnkgPSBkYXRhLnN1bW1hcnkuc3Vic3RyKDAsMzAwLTMpICsgJy4uLic7CgogICAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICB9OyAgIAogICAgICAgIAogICAgICAgIC8vIFBvcHVsYXRlIHRoZSBkaWZmCiAgICAgICAgQXBwLnBpcGVNb2RzLmRpZmYgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuZGlmZi5lbXB0eSgpLmFwcGVuZCgnPGRpdiBjbGFzcz0iZGlmZnRpdGxlIj4nICsgQXBwLmZ1bmNzLmRpZmYoQXBwLm9yaWdpbmFscy50aXRsZSwgQXBwLml0ZW1zLnRpdGxlLCB0cnVlKSArICc8L2Rpdj4nICsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0iZGlmZmJvZHkiPicgKyBBcHAucGlwZU1vZHMucmVwbGFjZSh7Ym9keTpBcHAuZnVuY3MuZGlmZihBcHAub3JpZ2luYWxzLmJvZHksIEFwcC5pdGVtcy5ib2R5KX0sIHRydWUpLmJvZHkgKyAnPC9kaXY+Jyk7CiAgICAgICAgICAgIEFwcC5mdW5jcy5zaG93RGlmZigpOwogICAgICAgIH0KCiAgICAgICAgLy8gUmVwbGFjZSB0aGUgcHJldmlvdXNseSBvbWl0dGVkIGNvZGUKICAgICAgICBBcHAucGlwZU1vZHMucmVwbGFjZSA9IGZ1bmN0aW9uKGRhdGEsIGxpdGVyYWwpIHsKICAgICAgICAgICAgaWYgKCFkYXRhLmJvZHkpIHJldHVybiBmYWxzZTsKICAgICAgICAgICAgZm9yICh2YXIgdHlwZSBpbiBBcHAuZ2xvYmFscy5jaGVja3NyKSB7CiAgICAgICAgICAgICAgICB2YXIgaSA9IDA7CiAgICAgICAgICAgICAgICBkYXRhLmJvZHkgPSBkYXRhLmJvZHkucmVwbGFjZShBcHAuZ2xvYmFscy5wbGFjZUhvbGRlckNoZWNrc1t0eXBlXSwgZnVuY3Rpb24obWF0Y2gpIHsKICAgICAgICAgICAgICAgICAgICB2YXIgcmVwbGFjZSA9IEFwcC5nbG9iYWxzLnJlcGxhY2VkU3RyaW5nc1t0eXBlXVtpKytdOwogICAgICAgICAgICAgICAgICAgIGlmKGxpdGVyYWwgJiYgL2Jsb2NrfGxzZWMvLnRlc3QodHlwZSkpIHsgCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZnRlciA9IHJlcGxhY2UucmVwbGFjZSgvXlxuXG4vLCcnKTsKICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXBlbmQgPSBhZnRlciAhPT0gcmVwbGFjZSA/ICc8c3BhbiBjbGFzcz0iYWRkIj5cblxuPC9zcGFuPjxzcGFuIGNsYXNzPSJkZWwiPmA8L3NwYW4+JyA6ICcnOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXBwZW5kICA9IGFmdGVyICE9PSByZXBsYWNlID8gJzxzcGFuIGNsYXNzPSJkZWwiPmA8L3NwYW4+JyA6ICcnOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIga2xhc3MgICA9IC9sc2VjLy50ZXN0KHR5cGUpID8gJyBjbGFzcz0ibGFuZy1ub25lIHByZXR0eXByaW50IHByZXR0eXByaW50ZWQiJyA6ICcnOwogICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJlcGVuZCArICc8cHJlJyArIGtsYXNzICsgJz48Y29kZT4nICsgYWZ0ZXIucmVwbGFjZSgvPC9nLCcmbHQ7JykucmVwbGFjZSgvXiAgICAvZ20sJycpICsgJzwvY29kZT48L3ByZT4nICsgYXBwZW5kOwogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICBpZihsaXRlcmFsICYmIC9xdW90ZS8udGVzdCh0eXBlKSkgcmV0dXJuICc8YmxvY2txdW90ZT4nICsgcmVwbGFjZS5yZXBsYWNlKC88L2csJyZsdDsnKS5yZXBsYWNlKC9ePi9nbSwnJykgKyAnPC9ibG9ja3F1b3RlPic7CiAgICAgICAgICAgICAgICAgICAgaWYobGl0ZXJhbCkgcmV0dXJuICc8Y29kZT4nICsgcmVwbGFjZS5yZXBsYWNlKC88L2csJyZsdDsnKS5yZXBsYWNlKC8oPzpeYHxgJCkvZywnJykgKyAnPC9jb2RlPic7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2U7CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gZGF0YTsKICAgICAgICB9OwogICAgICAgIAogICAgICAgIC8vIEhhbmRsZSBwaXBlIG91dHB1dAogICAgICAgIEFwcC5waXBlTW9kcy5vdXRwdXQgPSBmdW5jdGlvbihkYXRhKSB7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnRpdGxlLnZhbChkYXRhLnRpdGxlKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuYm9keS52YWwoZGF0YS5ib2R5LnJlcGxhY2UoL1xuezMsfS8sJ1xuXG4nKSk7CiAgICAgICAgICAgIEFwcC5zZWxlY3Rpb25zLnN1bW1hcnkudmFsKGRhdGEuc3VtbWFyeSk7CiAgICAgICAgICAgIEFwcC5nbG9iYWxzLnJvb3QuZmluZCgnLmFjdHVhbC1lZGl0LW92ZXJsYXknKS5yZW1vdmUoKTsKICAgICAgICAgICAgQXBwLnNlbGVjdGlvbnMuc3VtbWFyeS5jc3Moe29wYWNpdHk6MX0pOwogICAgICAgICAgICBBcHAuc2VsZWN0aW9ucy5idXR0b25JbmZvLnRleHQoQXBwLmdsb2JhbHMuY2hhbmdlcykuc2hvdygpOwogICAgICAgICAgICBTdGFja0V4Y2hhbmdlLk1hcmtkb3duRWRpdG9yLnJlZnJlc2hBbGxQcmV2aWV3cygpOwogICAgICAgIH07CgogICAgICAgIC8vIEluaXQgYXBwCiAgICAgICAgQXBwLmluaXQgPSBmdW5jdGlvbigpIHsKICAgICAgICAgICAgdmFyIGNvdW50ID0gMDsKICAgICAgICAgICAgdmFyIHRvb2xiYXJjaGsgPSBzZXRJbnRlcnZhbChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgaWYoKytjb3VudCA9PT0gMTApIGNsZWFySW50ZXJ2YWwodG9vbGJhcmNoayk7CiAgICAgICAgICAgICAgICBpZighQXBwLmdsb2JhbHMucm9vdC5maW5kKCcud21kLWJ1dHRvbi1yb3cnKS5sZW5ndGgpIHJldHVybjsKICAgICAgICAgICAgICAgIGNsZWFySW50ZXJ2YWwodG9vbGJhcmNoayk7CiAgICAgICAgICAgICAgICBBcHAuZnVuY3MucG9wU2VsZWN0aW9ucygpOwogICAgICAgICAgICAgICAgQXBwLmZ1bmNzLmNyZWF0ZUJ1dHRvbigpOwogICAgICAgICAgICB9LCAxMDApOwogICAgICAgICAgICByZXR1cm4gQXBwOwogICAgICAgIH07CgogICAgICAgIHJldHVybiBBcHAuaW5pdCgpOwogICAgfQogICAgdHJ5IHsKICAgICAgICB2YXIgdGVzdCA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLm1hdGNoKC8ucG9zdHMuKFxkKykuZWRpdC8pOwogICAgICAgIGlmKHRlc3QpIGV4dGVuZEVkaXRvcigkKCdmb3JtW2FjdGlvbl49Ii9wb3N0cy8nICsgdGVzdFsxXSArICciXScpKTsKICAgICAgICBlbHNlICQoZG9jdW1lbnQpLmFqYXhDb21wbGV0ZShmdW5jdGlvbigpIHsgCiAgICAgICAgICAgIHRlc3QgPSBhcmd1bWVudHNbMl0udXJsLm1hdGNoKC9wb3N0cy4oXGQrKS5lZGl0LWlubGluZS8pOwogICAgICAgICAgICBpZighdGVzdCkgewogICAgICAgICAgICAgICAgdGVzdCA9IGFyZ3VtZW50c1syXS51cmwubWF0Y2goL3Jldmlldy5pbmxpbmUtZWRpdC1wb3N0Lyk7CiAgICAgICAgICAgICAgICBpZighdGVzdCkgcmV0dXJuOwogICAgICAgICAgICAgICAgdGVzdCA9IGFyZ3VtZW50c1syXS5kYXRhLm1hdGNoKC9pZD0oXGQrKS8pOwogICAgICAgICAgICAgICAgaWYoIXRlc3QpIHJldHVybjsKICAgICAgICAgICAgfQogICAgICAgICAgICBleHRlbmRFZGl0b3IoJCgnZm9ybVthY3Rpb25ePSIvcG9zdHMvJyArIHRlc3RbMV0gKyAnIl0nKSk7CiAgICAgICAgfSk7CiAgICAgICAgaWYoJCgnI3Bvc3QtZm9ybScpLmxlbmd0aCkgJCgnI3Bvc3QtZm9ybScpLmVhY2goZnVuY3Rpb24oKXsgZXh0ZW5kRWRpdG9yKCQodGhpcykpOyB9KTsKICAgICAgICAvLyBUaGlzIGlzIHRoZSBzdHlsaW5nIGZvciB0aGUgZGlmZiBvdXRwdXQuCiAgICAgICAgJCgnYm9keScpLmFwcGVuZCgnPHN0eWxlPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgJy5kaWZmdGl0bGUgeycgKwogICAgICAgICAgICAgICAgICAgICAgICAgJyAgICBjb2xvcjogcmdiKDM0LCAzNCwgMzQpOycgKwogICAgICAgICAgICAgICAgICAgICAgICAgJyAgICBmb250LXNpemU6IDI0cHg7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIGZvbnQtd2VpZ2h0OiBub3JtYWw7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIGxpbmUtaGVpZ2h0OiAzNnB4OycgKwogICAgICAgICAgICAgICAgICAgICAgICAgJyAgICBtYXJnaW4tYm90dG9tOiAxMnB4OycgKwogICAgICAgICAgICAgICAgICAgICAgICAgJ30nICsKICAgICAgICAgICAgICAgICAgICAgICAgICcuZGlmZmJvZHkgeycgKwogICAgICAgICAgICAgICAgICAgICAgICAgJyAgICB3aGl0ZS1zcGFjZTogcHJlLXdyYXA7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIGZvbnQtZmFtaWx5OiAiY291cmllciBuZXciLCAibHVjaWRhIHNhbnMgdHlwZXdyaXRlciIsIG1vbm8sIG1vbm9zcGFjZScgKyAKICAgICAgICAgICAgICAgICAgICAgICAgICd9JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnLmFkZCB7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnICAgIGJhY2tncm91bmQ6ICNDRkM7JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAnfScgKwogICAgICAgICAgICAgICAgICAgICAgICAgJy5kZWwgeycgKwogICAgICAgICAgICAgICAgICAgICAgICAgJyAgICBiYWNrZ3JvdW5kOiAjRkNDOycgKwogICAgICAgICAgICAgICAgICAgICAgICAgJ30nICsKICAgICAgICAgICAgICAgICAgICAgICAgICc8L3N0eWxlPicpOwogICAgfSBjYXRjaCAoZSkgewogICAgICAgIGNvbnNvbGUubG9nKGUpOwogICAgfQp9KSgpOwoKLyogCiAgKiBUbyBUaXRsZSBDYXNlIDIuMSDigJMgaHR0cDovL2luZGl2aWRlZC5jb20vY29kZS90by10aXRsZS1jYXNlLwogICogQ29weXJpZ2h0IMKpIDIwMDjigJMyMDEzIERhdmlkIEdvdWNoLiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuCiAqLwoKU3RyaW5nLnByb3RvdHlwZS50b1RpdGxlQ2FzZSA9IGZ1bmN0aW9uKCl7CiAgdmFyIHNtYWxsV29yZHMgPSAvXihhfGFufGFuZHxhc3xhdHxidXR8Ynl8ZW58Zm9yfGlmfGlufG5vcnxvZnxvbnxvcnxwZXJ8dGhlfHRvfHZzP1wuP3x2aWEpJC9pOwoKICByZXR1cm4gdGhpcy5yZXBsYWNlKC9bQS1aYS16MC05XHUwMEMwLVx1MDBGRl0rW15ccy1dKi9nLCBmdW5jdGlvbihtYXRjaCwgaW5kZXgsIHRpdGxlKXsKICAgIGlmIChpbmRleCA+IDAgJiYgaW5kZXggKyBtYXRjaC5sZW5ndGggIT09IHRpdGxlLmxlbmd0aCAmJgogICAgICBtYXRjaC5zZWFyY2goc21hbGxXb3JkcykgPiAtMSAmJiB0aXRsZS5jaGFyQXQoaW5kZXggLSAyKSAhPT0gIjoiICYmCiAgICAgICh0aXRsZS5jaGFyQXQoaW5kZXggKyBtYXRjaC5sZW5ndGgpICE9PSAnLScgfHwgdGl0bGUuY2hhckF0KGluZGV4IC0gMSkgPT09ICctJykgJiYKICAgICAgdGl0bGUuY2hhckF0KGluZGV4IC0gMSkuc2VhcmNoKC9bXlxzLV0vKSA8IDApIHsKICAgICAgcmV0dXJuIG1hdGNoLnRvTG93ZXJDYXNlKCk7CiAgICB9CgogICAgaWYgKG1hdGNoLnN1YnN0cigxKS5zZWFyY2goL1tBLVpdfFwuLi8pID4gLTEpIHsKICAgICAgcmV0dXJuIG1hdGNoOwogICAgfQoKICAgIHJldHVybiBtYXRjaC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIG1hdGNoLnN1YnN0cigxKTsKICB9KTsKfTsKCi8vIEZyb20gaHR0cHM6Ly9naXRodWIuY29tL0VhbW9uTmVyYm9ubmUvYS12cy1hbgp2YXIgQXZzQW5TaW1wbGU9ZnVuY3Rpb24obil7ZnVuY3Rpb24gaShuKXt2YXIgcj1wYXJzZUludCh0LDM2KXx8MCxmPXImJnIudG9TdHJpbmcoMzYpLmxlbmd0aCx1LGU7Zm9yKG4uYXJ0aWNsZT10W2ZdPT0iLiI/ImEiOiJhbiIsdD10LnN1YnN0cigxK2YpLHU9MDt1PHI7dSsrKWU9blt0WzBdXT17fSx0PXQuc3Vic3RyKDEpLGkoZSl9dmFyIHQ9IjJoLiMyLmE7aTsmMS5OOyo0LmE7ZTtpO287LzkuYTtlO2gxLm8uaTtsMS4vO24xLm8ubztyMS5lLnMxLi87MDEuODsxMi4xYTswMS4wOzEyLjg7OTsyLjMxLjc7NC41LjYuNy44LjkuOGE7MGEuMDsxOzI7Mzs0OzU7Njs3Ozg7OTsxMTsgLjIyOyAu4oCTLjMxOyAuNDI7IC7igJMuNTU7IC4sLmguay5tLjYyOyAuay43MjsgLuKAky44MjsgLiwuOTI7IC7igJMuODs8Mi5tMS5kO287PTEuPTEuRTtAO0E2O0ExO0ExLlM7aTE7cjE7by5tMTthMTtyMTsgLm4xO2QxO2ExO2wxO3UxO2MxLmkxLmExLm47czE7dDE7dTE7cjE7aTE7YTE7cy50MTtoMTtsMTtlMTt0MTtlMS5zO0IyLmgyLmExLmkxO3IxO2Euw6E7bzEucjEuZDEuIDtDMy5hMS5pMS5zMS5zLmg0LmEyLmkxLnMxO2UubzEuaTtsMS7DoTtyMS5vMS7DrTt1Mi5pO3IxLnIxLmE7bzEubjEuZzEuajtENy5hMS5vMS5xO2kyLm4xLmExLnM7bzEudDt1MS5hMS5sMS5jO8OhMS4gO8OyO8O5O8awO0U3O1UxO1IuYjE7bzE7bDE7aS5tMTtwMTtlMTt6Lm4xO2ExO20uczE7cDUuYTEuYztlO2g7bztyO3UxLmwxO28udzE7aS5GMTEuIDssOy47LzswOzE7MjszOzQ7NTs2OzcxLjAuODs5O0FlO0IuQy5ELkYuSTIuTC5SLksuTC5NLk4uUC5RLlIuUy5ULkI7QzE7TS5EO0UyLkM7STtGMTtyLkg7STMuQTE7VC5SMS4gO1U7SjtMMy5DO047UDtNO08xLiA7UDE7Li5SMi5BMS4gO1M7UztUMTtTLlUyLiw7LjtYO1kxO1YuYztmMS5vLmg7z4M7RzcuZTEucjEubjEuZTtoMS5hMy5lO2k7bztpMS5hMS5uMS5nO28yLmYxLiA7dDEudDEuIDtyMS5pMS5hO3cxLmExLnIxLnI7w7o7SHMuIDsmOyw7LjI7QS5JLjE7MjszOzU7NztCMTtQLkM7RDtGO0c7SDE7SS5JNjtDLkcuTi5QLlMxLkQ7VC5LMS45O0w7TTE7Li5OO08yLiA7VjtQO1IxO1QuUzEuRi5UO1Y7ZTIuaTEucjtyMS5yMS5uO28yLm42O2QuZTEucztnLmsubzI7bC5yMTtpMS5mO3YudTEucjtJMztJMjsqLkkubjE7ZDE7ZTE7cDE7ZTE7bjE7ZDI7ZTE7bjE7YzE7aS7Dqi5zMTtsMTthMTtuMTtkMTtzLkoxLmkxLmExLm87THkuIDssOy47MTsyOzM7NDs4O0EzLiA7UDtYO0I7QztEO0UyLiA7RDtGMTtULkc7SDEuRC5JMS5SO0w7TTtOO1A7UjtTMTttLlQ7VTEuIDtWMTtDLlcxLlQ7WjteO2ExLm8xLmkxLmc7bzEuYzEuaDEuYTE7Yi5wO3UxLnMxLmgxO28u4buZO00xNS4gOyY7LDsuMTtBMTsuMTtTLi87MTsyOzM7NDs1OzY7Nzs4O0FpO0IuQy5ELkYuRy5KLkwuTS5OLlAuUi5TLlQuVi5XLlguWS5aLkIxO1MxO1QuQztEO0UzLlAxO1MuVztuO0Y7RztIO0k0LiA7NTs2O1QxO00uSztMO007TjtPMS5VO1A7UTtSO1M7VDE7Ui5VMi4gO1Y7VjtYO2IxLnUxLm07ZjtoO28yLkQxLmUuVTE7Li5wMS4zO3MxLmM7TnkuIDsrOy4xLkUuNDs3Ozg7OjtBMy5BMTtGLkk7UzEuTDtCO0M7RDtFMy5BO0g7UzEuIDtGMTtVLkc7SDtJNy5DLkQxLiA7Sy5MLk4uTy5TLks7TDtNMTtNLk4yLlI7VDtQMS5PMS5WMS4vMS5CO1IyO0ouVC5TMTtXLlQxO0wxLkQuVTEuUztWO1cyLkE7TzEuSDtYO1kzLkMxLkw7UDtVO2ExLnMxLmExLm47dDEuaDt2O8KyO8OXO081O04xO0UubDE7di5uMjtjMS5lLmUxLmk7bzE7cC51MTtpLlAxLmgyLmkxLmE7bzIuYjI7aS5vLmk7UTEuaTEubjEuZzEueDtSei4gOyY7LDsuMTtKLi87MTs0OzY7QTMuIDsuO0YxO1QuQjE7Ui5DO0Q7RTMuIDtTMS5QO1U7RjtHO0gxLlM7STIuQTtDMS4gO0o7SztMMTtQLk01OzEuMi4zLjUuNi5OO08yLkg7VDI7QS5PLlA7UTtSMTtGLlM0OywuLi4/LlQuVDtVNDtCLk0uTi5TLlY7WDtjO2YxO00xLi4uaDIuQTtCO8OyO1MxMS4gOyY7LDsuNC5FO007TztUMS4uMy5CO0Q7TTsxOzM7NDs1OzY7ODs5O0EzLiA7ODtTMjtFLkkuQjtDMy5BMS4gO1IyLkEuVS5UO0Q7RTYuIDs1O0MzO0EuTy5SLkkxLkYuTztVO0YzOyYuSC5PMS5TLkcxO0QuSDMuMjszO0w7STIuIDtTMS5PLksyLkkuWS5MMztBMi4gOy47STEuIDtPLk0zO0ExLiA7SS5VMS5SLk41LkEuQzMuQS5CLkMuRS5GLk8uTzUuIDtBMS5JO0U7UzE7VS5WO1A3O0E3O0EuQy5ELk0uTi5SLlMuRTEuIDtJNDtDLkQuTi5SLkwxO08uTy5VLlkuUTEuIDtSO1MxO1cuVDkuQTEuIDtDO0Q7RjtJO0w7TTtTO1Y7VTcuQi5MLk0uTi5QLlIuUy5WO1cxLlI7WDEuTTtoMS5pMS5nMS5hMS5vO3AxLmkxLm8xO24udDIuQjtpMS5jMS5pO1Q0LmEyLmkyLmcxLmEuczEuYzt2MS5lMS5zO2UxLmExLm0xLnA7dTEuaTIubDtyO8OgO1VtLi4xLk4xLi4xLkM7LzEuMTsxMS4gLjIxLjE7TDEuVDtNMS5OO040LkMxLkw7RDIuIC5QLks7UjEuIC5hO2IyO2EuaS5kO2cxLmw7aTEuZy5sMjtpLnkubTtuby4gO2ExLm4uYjtjO2Q7ZTE7cy5mO2c7aDtpMi5kO247ajtrO2w7bTtuO287cDtxO3I7czt0O3U7djt3O3A7cjM7YS5lLnUxLms7czMuIDtoO3QxO3IudDQuaDtuO3I7dDt4O3o7w607VzIuUDEuOjQuQTEuRjtJMi5CO04xLkguTzEuVjtSMS5GMS5DMi5OLlUuaTEuazEuaTEuRTEubDEuaTtYNzthLmUuaC5pLm8udS55LlkzLmUxLnQxLmg7cDtzO1s1LkE7RTtJO2E7ZTtfMi5fMS5pO2U7YDMuYTtlO2k7YTc7IC5tMTthMTtyMS4gLm4xO2QyOyAuxJsucDE7cjE7dC5yMTt0MTvDrS51MTtzMTtzMTtpMS4gLnYxO3UxO3QuZDMuYTEuczEuIDtlMi5tMS4gO3IxLiA7aTIuYzEuaDEuIDtlMS5zMS5lMi5tO3I7ZTg7YzE7bzE7bjE7bzE7bTE7aTE7YS5lMTt3LmwxO2kxO3QxO2UxO2kubTE7cDE7ZTE7ei5uMTt0MTtlMTtuMTtkLnMyO2ExLiAudDQ7YTE7IC5lMTsgLmkxO20xO2ExO3IucjE7dTEudC51MS5wMS4gO3cuZjMuIDtNO3kxLmk7aDkuIDssOy47QzthMS51MS50MTtiLmUyLmkxLnIxO2EucjEubTEuYTEubjtvNC5tMi5hMTsgLm07bjg7IC5iLmQuZTM7IC5kLnkuZy5pLmsudi5yMS5zMS4gO3UxLnI7cjEuIDt0MTt0MTtwMTs6Lmk2O2IxO24uZTE7ci5uMjtmMjtsMTt1MTvDqi5vMTthLnMxO3QxO2ExO2wxO2EucjE7IC5zMTsgLnUuazEudTEuIDtsMy5jMS5kO3MxLiA7djEuYTttYS4gOyw7UjtiMS5hLmUxLmkxLm47ZjtwO3QxLmEudTEubDEudDEuaTEuYzEuYTEubTEucDEuaTvDlztuNi4gO1Y7VztkMTsgLnQ7w5c7bzg7YzI7aDE7by51MTtwLmQxO2QxO3kuZjE7IC5nMTtnMTtpLm5vLiA7JzssOy87YTtiO2MxLm87ZDtlMi5pO3I7ZjtnO2k7bDttO247bztyO3M7dDt1O3c7eTt6O+KAkztyMTtpMTtnMTtlLnQxO3IxLnM7dTE7aS5yMy4gOyY7ZjtzOS4sOz87UjtmMi5lLm8uaTEuYzEuaDtsMS4gO3AyLjM7aTEuIDtyMS5nO3YzLmEuZS5pLnQyLkE7Uzt1YzsgLi4uYjIuZTtsO2YuazIuYTtpO20xO2ExLiAubjM7YTM7IC5uNS5hO2M7bjtzO3Q7cjE7eS5lMjsgLmkuaTguYzIubzEucjEucDt1MS5tO2QxO2kxLm87ZzEubjtsMS5sO20xO28ubjtzMS5zO3YxLm8xO2MucjU7YS5lLmkubC5vLnMzLiA7aDt1MS5yMjtlLnAzO2EuZS5pLnQyLm07dDt2LncxLmE7eGIuIDsnOyw7Ljs4O2I7aztsO20xO2EudDt5MS4gO3kxLmw7ezEuYTt8MS5hO8KjMS44O8OAO8OBO8OEO8OFO8OGO8OJO8OSO8OTO8OWO8OcO8OgO8OhO8OmO8OoO8OpMTt0My5hO287dTvDrTvDtjvDvDE7IC7EgDvEgTvEqzvEsDvFjDvFjTvFkzvOqTvOsTvOtTvPiTvPtTvQtTvigJMyLmU7aTvihJM7IjtyZXR1cm4gaShuKSx7cmF3Om4scXVlcnk6ZnVuY3Rpb24odCl7dmFyIGk9bixmPTAsdSxyO2RvIHI9dFtmKytdO3doaWxlKCJcIuKAmOKAmeKAnOKAnSQnIi5pbmRleE9mKHIpPj0wKTtmb3IoOzspe2lmKHU9aS5hcnRpY2xlfHx1LGk9aVtyXSwhaSlyZXR1cm4gdTtyPXRbZisrXXx8IiAifX19fSh7fSkKCi8vIEFkYXB0ZWQgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS82OTY5NDg2LzE2Nzc5MTIKZnVuY3Rpb24gZXNjYXBlVGFnKHRhZykgewogICAgLy8gU2VlIGh0dHBzOi8vcmVnZXgxMDEuY29tL3IveVc5Y0Q0LzEKICAgIHZhciByZXRhZyA9IHRhZy5yZXBsYWNlKC8oPzooXC0pfChbKy4jXSkpL2csCiAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIChtYXRjaCwgaHlwaGVuLCBvdGhlcikgewogICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWQgPSAoaHlwaGVuKSA/ICJbIFxcLV0iIDogIlxcIittYXRjaDsKICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlc2NhcGVkOwogICAgICAgICAgICAgICAgICAgICB9KTsKICAgIHJldHVybiAiKD86XFxzfFxcYnwkKSIgKyByZXRhZyArICIoPzpcXHN8XFxifCQpIjsgIC8vIGhhY2sgLSBlbmNsb3NlIHRhZyBpbiByZWdleHAgYm91bmRhcnkgY2hlY2tzLiBXQk4gdG8gZG8gdGhpcyBpbiB0aGUgdGFnbGlzdCByZWdleHAuCn0KCi8vIEJldHRlciBoYW5kbGluZyBvZiBpbmRlbnRhdGlvbiBhbmQgdGhlIFRBQiBrZXkgd2hlbiBlZGl0aW5nIHBvc3RzCi8vIEZyb20gYmFscGhhJ3Mgc3RhY2tleGNoYW5nZS10YWItZWRpdGluZwovLyAoYykgMjAxMiBCZW5qYW1pbiBEdW1rZS12b24gZGVyIEVoZQovLyBXaGljaCBpcyByZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgLSBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVAovLyBTZWUgaHR0cDovL3N0YWNrYXBwcy5jb20vcXVlc3Rpb25zLzMyNDcvYmV0dGVyLWhhbmRsaW5nLW9mLWluZGVudGF0aW9uLWFuZC10aGUtdGFiLWtleS13aGVuLWVkaXRpbmctcG9zdHMKZnVuY3Rpb24gd2l0aF9qcXVlcnkodCl7dmFyIGU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgic2NyaXB0Iik7ZS50eXBlPSJ0ZXh0L2phdmFzY3JpcHQiLGUudGV4dENvbnRlbnQ9IigiK3QudG9TdHJpbmcoKSsiKShqUXVlcnkpIixkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGUpfXdpdGhfanF1ZXJ5KGZ1bmN0aW9uKHQpe3QoZnVuY3Rpb24oKXtmdW5jdGlvbiBlKHQpe3ZhciBlPXQuY2FyZXQoKSxuPSJiYWNrd2FyZCI9PT10WzBdLnNlbGVjdGlvbkRpcmVjdGlvbjtyZXR1cm4gZS5lbmQtPWUudGV4dC5tYXRjaCgvKFsgXHRcbl0qKSQvKVswXS5sZW5ndGgsbj8oZS5kaXJlY3RlZFN0YXJ0PWUuZW5kLGUuZGlyZWN0ZWRFbmQ9ZS5zdGFydCxlLmJhY2t3YXJkPSEwKTooZS5kaXJlY3RlZFN0YXJ0PWUuc3RhcnQsZS5kaXJlY3RlZEVuZD1lLmVuZCksZX1mdW5jdGlvbiBuKHQsZSxuLHIpe3ZhciBhLGk7Mj09PWFyZ3VtZW50cy5sZW5ndGgmJihuPWUpLHImJihhPWUsZT1uLG49YSksZT5uJiYoYT1lLGU9bixuPWEsaT0hMCksaSYmaD90WzBdLnNldFNlbGVjdGlvblJhbmdlKGUsbiwiYmFja3dhcmQiKTp0LmNhcmV0KGUsbil9ZnVuY3Rpb24gcihlLG4peyJ1bmRlZmluZWQiPT10eXBlb2YgbiYmKG49IWwpLGxebiYmKHQoZSkuY3NzKCJvcGFjaXR5IixuPzE6LjMpLGw9bil9ZnVuY3Rpb24gYSgpe3ZhciBlPXQodGhpcyksbj10aGlzLnZhbHVlfHwiIixyPWUuY2FyZXQoKSxhPW4uc3Vic3RyaW5nKDAsci5lbmQpLGk9KGEubWF0Y2goLyg/Ol58XG4pKFteXG5dKikkLyl8fFsiIiwiIl0pWzFdO3JldHVybi9eWyBcdF0rJC8udGVzdChpKT9jLmNhbGwodGhpcywhMCk6ITB9ZnVuY3Rpb24gaShyKXt2YXIgYSxpLGM9dCh0aGlzKSxzPXRoaXMudmFsdWV8fCIiLGg9ZShjKSx1PXMuc3Vic3RyaW5nKDAsaC5kaXJlY3RlZEVuZCksbD1zLnN1YnN0cmluZyhoLmRpcmVjdGVkRW5kKSxvPSh1Lm1hdGNoKC8oPzpefFxuKShbXlxuXSopJC8pfHxbIiIsIiJdKVsxXTtpZihvLmxlbmd0aCl7YT1vLnNlYXJjaCgvW14gXHRdLyk7dmFyIGY9bmV3IFJlZ0V4cCgiXiB7MCwiKyhkLTEpKyJ9CSIpOyhhPj1kfHxhPjAmJmYudGVzdChvKSkmJihpPWguZGlyZWN0ZWRFbmQtby5sZW5ndGgrYSl9ZWxzZSBhPShsLm1hdGNoKC9eW1x0IF0qLyl8fFsiIl0pWzBdLmxlbmd0aCxhPjAmJihpPWguZGlyZWN0ZWRFbmQrYSk7cmV0dXJuInVuZGVmaW5lZCIhPXR5cGVvZiBpPyhyP24oYyxoLmRpcmVjdGVkU3RhcnQsaSk6bihjLGkpLCExKTohMH1mdW5jdGlvbiBjKHIpe3ZhciBhLGksYz10KHRoaXMpLGg9dGhpcy52YWx1ZXx8IiIsdT1lKGMpLGw9aC5zdWJzdHJpbmcoMCx1LnN0YXJ0KSxvPWguc3Vic3RyaW5nKHUuc3RhcnQsdS5lbmQpLGY9aC5zdWJzdHJpbmcodS5lbmQpO2lmKHUuc3RhcnQ9PT11LmVuZCl7dmFyIGcsdz0obC5tYXRjaCgvKD86XnxcbikoW15cbl0qKSQvKXx8WyIiLCIiXSlbMV0scD0wO2lmKHImJiEvKF58WyBcdF0pJC8udGVzdCh3KSlyZXR1cm4hMTt2YXIgdj0hMDtmb3IociYmIXcubGVuZ3RoJiYoZj1mLnJlcGxhY2UoL15bIFx0XSovLGZ1bmN0aW9uKHQpe3JldHVybiB3PXQsbCs9dCwiIn0pLHY9ITEpLGc9MDtnPHcubGVuZ3RoO2crKykiCSI9PT13LmNoYXJBdChnKT9wPTA6cCsrO2lmKHIpe3ZhciB5PXcubGVuZ3RoP3AlZHx8ZDpkLGI9bmV3IFJlZ0V4cCgiIHswLCIrKHktMSkrIn1bIFxcdF0kIik7bD1sLnJlcGxhY2UoYixmdW5jdGlvbih0KXtyZXR1cm4gYT0tdC5sZW5ndGgsIiJ9KX1lbHNlIGE9ZC1wJWQsbCs9cy5zbGljZShwJWQpO2MudmFsKGwrZiksdnx8KGE9MCksYy5jYXJldCh1LnN0YXJ0K2EsdS5zdGFydCthKX1lbHNle2w9bC5yZXBsYWNlKC8oXnxcbikoW15cbl0qKSQvLGZ1bmN0aW9uKHQsZSxuKXtyZXR1cm4gbz1uK28sZX0pO3ZhciBtPSJcbiI9PT1oLnN1YnN0cih1LnN0YXJ0LTEsMSk/MDoxO2lmKHIpe2E9MDt2YXIgYj1uZXcgUmVnRXhwKCIoXnxcbikoCXwgezEsIisoZC0xKSsifVsgCV0pIiwiZyIpO2lmKG89by5yZXBsYWNlKGIsZnVuY3Rpb24odCxlLG4pe3JldHVybiBhfHwoaT1kLW4ubGVuZ3RoKSxhLT1uLmxlbmd0aCxlfSksIWEpcmV0dXJuITF9ZWxzZSBhPTAsaT0wLG89by5yZXBsYWNlKC9efFxuL2csZnVuY3Rpb24odCl7cmV0dXJuIGErPWQsdCtzfSk7Yy52YWwobCtvK2YpLG4oYyx1LnN0YXJ0K2krbSphLHUuZW5kK2EsdS5iYWNrd2FyZCl9cmV0dXJuITF9aWYod2luZG93LlN0YWNrRXhjaGFuZ2UmJlN0YWNrRXhjaGFuZ2UucmVhZHkpe3ZhciBkPTQscz0iICIucmVwZWF0KGQpLGg9InNlbGVjdGlvbkRpcmVjdGlvbiJpbiB0KCI8dGV4dGFyZWEgLz4iKVswXSx1PXs5OntoYW5kbGVyOmMsYWxsb3dTaGlmdDohMH0sMzY6e2hhbmRsZXI6aSxhbGxvd1NoaWZ0Omh9LDg6e2hhbmRsZXI6YX19LGw9ITAsbz0hMTt0KCIjbWFpbmJhciIpLm9uKCJrZXl1cCIsIi53bWQtaW5wdXQiLGZ1bmN0aW9uKHQpe28mJjE3PT09dC53aGljaD9yKHRoaXMpOnIodGhpcywhMCl9KSx0KCIjbWFpbmJhciIpLm9uKCJrZXlkb3duIiwiLndtZC1pbnB1dCIsZnVuY3Rpb24odCl7aWYobz0xNz09PXQud2hpY2gsdC5jdHJsS2V5fHx0LmFsdEtleXx8dC5tZXRhS2V5KXJldHVybiEwO3ZhciBlPWw7aWYocih0aGlzLCEwKSwhZSlyZXR1cm4hMDtpZighdS5oYXNPd25Qcm9wZXJ0eSh0LndoaWNoKSlyZXR1cm4hMDt2YXIgbj11W3Qud2hpY2hdO3JldHVybiB0LnNoaWZ0S2V5JiYhbi5hbGxvd1NoaWZ0PyEwOm4uaGFuZGxlci5jYWxsKHRoaXMsdC5zaGlmdEtleSl9KX19KX0pOwo="},{"name":"Current Completed Reviews in Queue","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["http://stackoverflow.com/review/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831477},"enabled":true,"position":13,"file_url":"https://raw.githubusercontent.com/SO-Close-Vote-Reviewers/UserScripts/master/CurrentQueueReviewsDone.user.js","uuid":"1ae23fcb-e8b9-43e0-bacc-14e8c3ed4798","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBDdXJyZW50IENvbXBsZXRlZCBSZXZpZXdzIGluIFF1ZXVlCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzU3ODQxMS9yZW5lCi8vIEB2ZXJzaW9uICAgICAgMC4yCi8vIEBkZXNjcmlwdGlvbiAgQWRkcyB0aGUgY3VycmVudCBudW1iZXIgb2YgcmV2aWV3cyB5b3UgaGF2ZSBjb21wbGV0ZWQgaW4gdGhlIHF1ZXVlIGluIGZyb250IG9mIHlvdXIgdG90YWwgcmV2aWV3cyBvbiB0aGUgcmV2aWV3IHRhYgovLyBAYXV0aG9yICAgICAgIFJlbmUsIFNPQ1ZSCi8vIEBtYXRjaCAgICAgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3Jldmlldy8qCi8vIEBncmFudCAgICAgICAgbm9uZQovLyA9PS9Vc2VyU2NyaXB0PT0KCi8vIHRoaXMgc2NyaXB0IGNvbWVzIGZyb20gdGhlIHJlcXVlc3QgaGVyZTogaHR0cDovL21ldGEuc3RhY2tleGNoYW5nZS5jb20vcS8yNTA1ODAvMjEzNjcxCi8vIHJlbmUgb3JpZ2luYWxseSBtYWRlIHRoaXM6IGh0dHA6Ly9tZXRhLnN0YWNrZXhjaGFuZ2UuY29tL2EvMjUwNjIyLzIxMzY3MQoKKGZ1bmN0aW9uKCQsIHdpbmRvdykgewoKICAgIHZhciBwYXJ0cywKICAgICAgICBzdGF0c3VybCwKICAgICAgICBjdXJyZW50aHJlZiA9IHdpbmRvdy5sb2NhdGlvbi5ocmVmLAogICAgICAgIC8vIGhlcmUgd2UgcHV0IG91ciBzdGF0CiAgICAgICAgc3RhdCA9ICQoJzxkaXY+PC9kaXY+JykKICAgICAgICAuaHRtbCgnLi4uJm5ic3A7LyZuYnNwOycpCiAgICAgICAgLmNzcygnZmxvYXQnLCdsZWZ0JykKICAgICAgICAuY3NzKCdwYWRkaW5nLXRvcCcsJzEzcHgnKTsKCiAgICBmdW5jdGlvbiBidWlsZFVybCgpIHsKICAgICAgICAvLyBidWlsZCB0aGUgc3RhdHMgdXJsCiAgICAgICAgcGFydHMgPSB3aW5kb3cubG9jYXRpb24ucGF0aG5hbWUuc3BsaXQoJy8nKTsKICAgICAgICBpZiAocGFydHMubGVuZ3RoPjMpIHsKICAgICAgICAgICBwYXJ0c1twYXJ0cy5sZW5ndGgtMV0gPSAnc3RhdHMnOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHBhcnRzLnB1c2goJ3N0YXRzJyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBwYXJ0cy5qb2luKCcvJyk7CiAgICB9CgogICAgc3RhdHN1cmwgPSBidWlsZFVybCgpOwoKICAgIC8vIGludGVnYXRlIGluIHRoZSByZXZpZXcgcGFnZQogICAgJCgnI2JhZGdlLXByb2dyZXNzJykucHJlcGVuZChzdGF0KTsKCiAgICAvLyBnZXQgdGhlIChmdWxsYmxvd24pIHN0YXRzIHBhZ2UgYW5kIGZpbmQgeW91ciBvd24gc3RhdAogICAgZnVuY3Rpb24gcmVmcmVzaHN0YXQoKSB7CiAgICAgICAgJC5nZXQoc3RhdHN1cmwsIGZ1bmN0aW9uIChkYXRhKSB7CiAgICAgICAgICAgIHZhciBodG1sID0gJChkYXRhKSwKICAgICAgICAgICAgICAgIHRkID0gaHRtbC5maW5kKCd0ZC5yZXZpZXctc3RhdHMtY291bnQtY3VycmVudC11c2VyOmZpcnN0Jyk7CiAgICAgICAgICAgIC8vIHJlcGxhY2Ugb3VyIGN1cnJlbnQgc3RhdCB3aXRoIHRoZSBqdXN0IGxvYWRlZCBvbmUKICAgICAgICAgICAgc3RhdC5odG1sKHRkLnRleHQoKSArICcmbmJzcDsvJm5ic3A7Jyk7ICAgIAogICAgICAgIH0pLmZhaWwoZnVuY3Rpb24ocHJvbSwgZXJyb3IsIG1zZykgewogICAgICAgICAgICBkZWJ1Z2dlcjsKICAgICAgICAgICAgaWYgKG1zZyA9PT0gJ05vdCBGb3VuZCcpIHsKICAgICAgICAgICAgICAgIC8vIHRoZSB1cmwgaXMgbm90IGNvcnJlY3QsIHRyeSBhIG5ldyBvbmUKICAgICAgICAgICAgICAgIHN0YXRzdXJsID0gYnVpbGRVcmwoKTsKICAgICAgICAgICAgfQogICAgICAgIH0pOwogICAgfQoKICAgIC8vIGNoZWNrIHJlZ3VsYXJseSAoZXZlcnkgNSBzZWNvbmRzKSBpZiB3ZSBkb25lIGEgcmV2aWV3IHlldAogICAgd2luZG93LnNldEludGVydmFsKGZ1bmN0aW9uICgpIHsKICAgICAgICAvLyBpZiB0aGUgdXJsIGNoYW5nZWQsIGxldHMgZ2V0IHRoZSBuZXcgc3RhdAogICAgICAgIGlmICh3aW5kb3cubG9jYXRpb24uaHJlZiAhPT0gY3VycmVudGhyZWYpIHsKICAgICAgICAgICAgY3VycmVudGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjsKICAgICAgICAgICAgcmVmcmVzaHN0YXQoKTsKICAgICAgICB9CiAgICB9LCA1MDAwKTsgLy8gbm93IDUgc2Vjb25kcyBiZWNhdXNlIHdlIGhhcmRseSBldmVyIHJldmlldyBxdWlja2VyIHRoYW4gdGhhdAogICAgcmVmcmVzaHN0YXQoKTsgLy8gcnVuIG9uY2UgZm9yIGFuIGluaXRpYWwgdmFsdWUKCn0oJCB8fCB1bnNhZmVXaW5kb3cuJCwgd2luZG93IHx8IHVuc2FmZVdpbmRvdykpOwo="},{"name":"(SE) Customize help menu","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/*","*://*.mathoverflow.net/*","*://*.serverfault.com/*","*://*.stackapps.com/*","*://*.stackexchange.com/*","*://*.stackoverflow.com/*","*://*.superuser.com/*"],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{"helpSE_v1":"s{\"help_blank\":false,\"remove_help\":false,\"menu\":[{\"name\":\"Moderation Tools\",\"url\":\"/tools\"},{\"name\":\"NATO\",\"url\":\"/tools/new-answers-old-questions\"}]}"},"ts":1456720105784},"enabled":true,"position":14,"file_url":"https://gist.github.com/raw/a539c1905608b253fcb6/CustomizeHelpMenu.user.js","uuid":"098ebad5-b95b-472e-be23-361868277072","source":""},{"name":"AutoReviewComments","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/^https?:\\/\\/(.*\\.)?stackoverflow\\.com/.*$/","/^https?:\\/\\/(.*\\.)?serverfault\\.com/.*$/","/^https?:\\/\\/(.*\\.)?superuser\\.com/.*$/","/^https?:\\/\\/(.*\\.)?stackexchange\\.com/.*$/","/^https?:\\/\\/(.*\\.)?askubuntu\\.com/.*$/","/^https?:\\/\\/(.*\\.)?mathoverflow\\.com/.*$/","/^https?:\\/\\/discuss\\.area51\\.stackexchange\\.com/.*$/","/^https?:\\/\\/stackapps\\.com/.*$/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{},"ts":1456451831506},"enabled":true,"position":15,"file_url":"https://raw.github.com/Benjol/SE-AutoReviewComments/master/dist/autoreviewcomments.user.js","uuid":"8b302a20-45b6-48df-aa1f-ba2a8c340e57","source":""},{"name":"NATO Enhancements","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?:\\/\\/(meta\\.)?stackoverflow.com\\/tools\\/new-answers-old-questions.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1456466373761,"data":{}},"enabled":true,"position":16,"file_url":"https://raw.githubusercontent.com/Tiny-Giant/myuserscripts/master/NATOEnhancements.user.js","uuid":"6dad8b6e-1a2a-42b0-901e-67831ea0cf8f","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBOQVRPIEVuaGFuY2VtZW50cwovLyBAbmFtZXNwYWNlICAgIGh0dHA6Ly9naXRodWIuY29tL1RpbnktR2lhbnQKLy8gQHZlcnNpb24gICAgICAxLjAuMC44Ci8vIEBkZXNjcmlwdGlvbiAgSW5jbHVkZXMgdGhlIGFjdHVhbCBwb3N0IG9uIHRoZSBuZXcgYW5zd2VycyB0byBvbGQgcXVlc3Rpb25zIHBhZ2Ugb2YgdGhlIDEwayB0b29scy4gCi8vIEBhdXRob3IgICAgICAgQFRpbnlHaWFudAovLyBAaW5jbHVkZSAgICAgIC9odHRwcz86XC9cLyhtZXRhXC4pP3N0YWNrb3ZlcmZsb3cuY29tXC90b29sc1wvbmV3LWFuc3dlcnMtb2xkLXF1ZXN0aW9ucy4qLwovLyBAZ3JhbnQgICAgICAgIG5vbmUKLy8gPT0vVXNlclNjcmlwdD09Ci8qIGpzaGludCAtVzA5NyAqLwovKiBqc2hpbnQgZXNuZXh0OiB0cnVlICovCid1c2Ugc3RyaWN0JzsKCmNvbnN0IFNjcmlwdFRvSW5qZWN0ID0gZnVuY3Rpb24oKQp7CiAgICAndXNlIHN0cmljdCc7CiAgICBjb25zdCBmdW5jcyA9IHt9OwoKICAgIGZ1bmNzLmZldGNoID0gKHVybCwgY29tcGxldGUpID0+IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+CiAgICB7CiAgICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpOwoKICAgICAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGV2ZW50ID0+CiAgICAgICAgewogICAgICAgICAgICBpZiAoeGhyLnN0YXR1cyAhPT0gMjAwKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKHhocik7CiAgICAgICAgICAgICAgICByZWplY3QoeGhyKTsKICAgICAgICAgICAgICAgIHJldHVybjsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgaWYgKHR5cGVvZiBjb21wbGV0ZSA9PT0gJ2Z1bmN0aW9uJykKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgY29tcGxldGUoeGhyLnJlc3BvbnNlVGV4dCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIHJlc29sdmUoeGhyKTsKICAgICAgICB9LCBmYWxzZSk7CgogICAgICAgIHhoci5vcGVuKCdHRVQnLCB1cmwpOwoKICAgICAgICB4aHIuc2VuZCgpOwogICAgfSk7CgogICAgZnVuY3MuZmV0Y2hQb3N0cyA9IHBvc3RzID0+CiAgICB7CiAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBbXTsKCiAgICAgICAgY29uc3QgcG9zdHZvdGVzID0gW107CgogICAgICAgIGZvciAobGV0IHBvc3Qgb2YgcG9zdHMpCiAgICAgICAgewogICAgICAgICAgICAvLyBGaXJlZm94IGlzIGEgYml0Y2gsIGFuZCBkb2Vzbid0IGhhbmRsZSBsZXQgaW4gZm9yLi4ub2YgbG9vcHMgcHJvcGVybHkuCiAgICAgICAgICAgIChmdW5jdGlvbihwb3N0KQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAvLyBHZXQgcG9zdHMKICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goZnVuY3MuZmV0Y2goJy9wb3N0cy9hamF4LWxvYWQtcmVhbHRpbWUvJyArIHBvc3QucXVlc3Rpb25pZCwgaHRtbCA9PgogICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgIHBvc3Qubm9kZXMucXVlc3Rpb24uaW5uZXJIVE1MID0gaHRtbDsKICAgICAgICAgICAgICAgIH0pKTsKICAgICAgICAgICAgICAgIHByb21pc2VzLnB1c2goZnVuY3MuZmV0Y2goJy9wb3N0cy9hamF4LWxvYWQtcmVhbHRpbWUvJyArIHBvc3QuYW5zd2VyaWQsIGh0bWwgPT4KICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICBwb3N0Lm5vZGVzLmFuc3dlci5pbm5lckhUTUwgPSBodG1sOwogICAgICAgICAgICAgICAgfSkpOwoKICAgICAgICAgICAgICAgIC8vIEdldCB2b3RlcwogICAgICAgICAgICAgICAgcHJvbWlzZXMucHVzaChmdW5jcy5mZXRjaCgnL3Bvc3RzLycgKyBwb3N0LnF1ZXN0aW9uaWQgKyAnL3ZvdGVzJywgdm90ZXMgPT4KICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICB2b3RlcyA9IEpTT04ucGFyc2Uodm90ZXMpOwoKICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBwb3N0IG9mIHZvdGVzKQogICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgcG9zdHZvdGVzLnB1c2gocG9zdCk7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfSkpOwogICAgICAgICAgICB9KShwb3N0KTsKICAgICAgICB9CgogICAgICAgIFByb21pc2UuYWxsKHByb21pc2VzKS50aGVuKHhociA9PgogICAgICAgIHsKICAgICAgICAgICAgZnVuY3MuYWRkQ1NTKCk7CgogICAgICAgICAgICBmb3IgKGxldCBwb3N0IG9mIHBvc3RzKQogICAgICAgICAgICB7CiAgICAgICAgICAgICAgICBwb3N0Lm5vZGVzLmNvbHVtbnNbMF0uaW5uZXJIVE1MID0gJyc7CiAgICAgICAgICAgICAgICBwb3N0Lm5vZGVzLmNvbHVtbnNbMV0uaW5uZXJIVE1MID0gJyc7CiAgICAgICAgICAgICAgICBwb3N0Lm5vZGVzLmNvbHVtbnNbMF0uYXBwZW5kQ2hpbGQocG9zdC5ub2Rlcy53cmFwKTsKICAgICAgICAgICAgICAgIHBvc3Qubm9kZXMud3JhcC5zdHlsZS5kaXNwbGF5ID0gJyc7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIFN0YWNrRXhjaGFuZ2UucXVlc3Rpb24uaW5pdCgKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgdm90ZXNDYXN0OiBwb3N0dm90ZXMsCiAgICAgICAgICAgICAgICBjYW5WaWV3Vm90ZUNvdW50czogdHJ1ZSwKICAgICAgICAgICAgICAgIHF1ZXN0aW9uSWQ6IHBvc3RzWzBdLnF1ZXN0aW9uaWQsCiAgICAgICAgICAgICAgICBjYW5PcGVuQm91bnR5OiB0cnVlCiAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgY29uc3QgY29tbWVudExpbmtzID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuanMtc2hvdy1saW5rLmNvbW1lbnRzLWxpbmsnKSk7CgogICAgICAgICAgICBmb3IgKGxldCBjb21tZW50TGluayBvZiBjb21tZW50TGlua3MpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIGNvbW1lbnRMaW5rLmNsaWNrKCk7CiAgICAgICAgICAgIH0KCiAgICAgICAgICAgIGZvciAobGV0IHBvc3Qgb2YgcG9zdHMpCiAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgIFN0YWNrRXhjaGFuZ2UucmVhbHRpbWUuc3Vic2NyaWJlVG9RdWVzdGlvbihTdGFja0V4Y2hhbmdlLm9wdGlvbnMuc2l0ZS5pZCwgcG9zdC5xdWVzdGlvbmlkKTsKICAgICAgICAgICAgfQoKICAgICAgICAgICAgU3RhY2tFeGNoYW5nZS5pbmxpbmVUYWdFZGl0aW5nLmluaXQoKTsKICAgICAgICAgICAgCiAgICAgICAgICAgIFN0YWNrRXhjaGFuZ2UuaGVscGVycy5yZW1vdmVTcGlubmVyKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zdWJoZWFkZXIgaDEnKSk7CiAgICAgICAgfSwgeGhyID0+CiAgICAgICAgewogICAgICAgICAgICBjb25zb2xlLmxvZygnRmFpbGVkJywgeGhyKTsKICAgICAgICB9KTsKICAgIH07CgogICAgZnVuY3MuYXBwZW5kTm9kZXMgPSBwb3N0cyA9PgogICAgewogICAgICAgIGZvciAobGV0IHBvc3Qgb2YgcG9zdHMpCiAgICAgICAgewogICAgICAgICAgICBwb3N0Lm5vZGVzLmNvbHVtbnNbMF0uYXBwZW5kQ2hpbGQocG9zdC5ub2Rlcy53cmFwKTsKICAgICAgICB9CiAgICB9OwoKICAgIGZ1bmNzLmdldFBvc3RzID0gKCkgPT4KICAgIHsKICAgICAgICBjb25zdCBwb3N0cyA9IFtdOwogICAgICAgIGNvbnN0IHJvd3MgPSBBcnJheS5mcm9tKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5kZWZhdWx0LXZpZXctcG9zdC10YWJsZSA+IHRib2R5ID4gdHInKSk7CgogICAgICAgIGZvciAobGV0IHJvdyBvZiByb3dzKQogICAgICAgIHsKICAgICAgICAgICAgY29uc3Qgbm9kZXMgPSB7fTsKCiAgICAgICAgICAgIG5vZGVzLnNjb3BlID0gcm93OwogICAgICAgICAgICBub2Rlcy5jb2x1bW5zID0gQXJyYXkuZnJvbShub2Rlcy5zY29wZS5jaGlsZHJlbik7CiAgICAgICAgICAgIG5vZGVzLndyYXAgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgbm9kZXMud3JhcC5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnOwoKICAgICAgICAgICAgbm9kZXMub2xkID0ge307CgogICAgICAgICAgICBub2Rlcy5vbGQuYW5zd2VyID0gbm9kZXMuc2NvcGUucXVlcnlTZWxlY3RvcignLnBvc3QtdGV4dCcpOwogICAgICAgICAgICBub2Rlcy5vbGQudGl0bGUgPSBub2Rlcy5zY29wZS5xdWVyeVNlbGVjdG9yKCcuYW5zd2VyLWh5cGVybGluaycpOwoKICAgICAgICAgICAgY29uc3QgdXJsc2VjdGlvbnMgPSAvKFxkKylcLyguKj8pXC8oXGQrKS8uZXhlYyhub2Rlcy5vbGQudGl0bGUuaHJlZik7CiAgICAgICAgICAgIGNvbnN0IHF1ZXN0aW9uaWQgPSB1cmxzZWN0aW9uc1sxXTsKICAgICAgICAgICAgY29uc3QgdGl0bGVzbHVnID0gdXJsc2VjdGlvbnNbMl07CiAgICAgICAgICAgIGNvbnN0IGFuc3dlcmlkID0gdXJsc2VjdGlvbnNbM107CgogICAgICAgICAgICBub2Rlcy50aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2gxJyk7CiAgICAgICAgICAgIG5vZGVzLndyYXAuYXBwZW5kQ2hpbGQobm9kZXMudGl0bGUpOwoKICAgICAgICAgICAgbm9kZXMubGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgICAgICAgICAgbm9kZXMubGluay5ocmVmID0gd2luZG93LmxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIHdpbmRvdy5sb2NhdGlvbi5ob3N0ICsgJy9xdWVzdGlvbnMvJyArIHF1ZXN0aW9uaWQgKyAnLycgKyB0aXRsZXNsdWc7CiAgICAgICAgICAgIG5vZGVzLmxpbmsudGV4dENvbnRlbnQgPSBub2Rlcy5vbGQudGl0bGUudGV4dENvbnRlbnQ7CiAgICAgICAgICAgIG5vZGVzLnRpdGxlLmFwcGVuZENoaWxkKG5vZGVzLmxpbmspOwoKICAgICAgICAgICAgbm9kZXMucXVlc3Rpb24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgbm9kZXMud3JhcC5hcHBlbmRDaGlsZChub2Rlcy5xdWVzdGlvbik7CgogICAgICAgICAgICBub2Rlcy5hbnN3ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTsKICAgICAgICAgICAgbm9kZXMud3JhcC5hcHBlbmRDaGlsZChub2Rlcy5hbnN3ZXIpOwoKICAgICAgICAgICAgcG9zdHMucHVzaCgKICAgICAgICAgICAgewogICAgICAgICAgICAgICAgYW5zd2VyaWQ6IGFuc3dlcmlkLAogICAgICAgICAgICAgICAgcXVlc3Rpb25pZDogcXVlc3Rpb25pZCwKICAgICAgICAgICAgICAgIG5vZGVzOiBub2RlcwogICAgICAgICAgICB9KTsKICAgICAgICB9CgogICAgICAgIHJldHVybiBwb3N0czsKICAgIH07CgogICAgZnVuY3MuYWRkQ1NTID0gKCkgPT4KICAgIHsKICAgICAgICBjb25zdCBDU1MgPSBbCiAgICAgICAgICAgICcucXVlc3Rpb24sIC5hbnN3ZXIgeycsCiAgICAgICAgICAgICcgICAgd2lkdGg6IDczMHB4ICFpbXBvcnRhbnQnLAogICAgICAgICAgICAnfScsCiAgICAgICAgICAgICdoMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHsnLAogICAgICAgICAgICAnICAgIGZvbnQtd2VpZ2h0OiBub3JtYWwnLAogICAgICAgICAgICAnfScsCiAgICAgICAgICAgICcuYW5zd2VyIHsnLAogICAgICAgICAgICAnICAgIGJhY2tncm91bmQ6IFJHQkEoMjU1LDE1MywwLCAwLjEpOycsCiAgICAgICAgICAgICcgICAgbWFyZ2luLXRvcDogMWVtOycsCiAgICAgICAgICAgICd9JwogICAgICAgIF0uam9pbignXG4nKTsKCiAgICAgICAgY29uc3Qgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpOwogICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc3R5bGUpOwoKICAgICAgICBjb25zdCB0ZXh0ID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoQ1NTKTsKICAgICAgICBzdHlsZS5hcHBlbmRDaGlsZCh0ZXh0KTsKICAgIH0KCiAgICBmdW5jcy5pbml0ID0gKCkgPT4KICAgIHsKICAgICAgICBjb25zdCBwb3N0cyA9IGZ1bmNzLmdldFBvc3RzKCk7CgogICAgICAgIGNvbnN0IHRpdGxlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnN1YmhlYWRlciBoMScpOwoKICAgICAgICBTdGFja0V4Y2hhbmdlLmhlbHBlcnMuYWRkU3Bpbm5lcih0aXRsZSk7CgogICAgICAgIFN0YWNrRXhjaGFuZ2UudXNpbmcoImlubGluZUVkaXRpbmciLCAoKSA9PgogICAgICAgIHsKICAgICAgICAgICAgU3RhY2tFeGNoYW5nZS5pbmxpbmVFZGl0aW5nLmluaXQoKTsKICAgICAgICB9KTsKICAgICAgICAKICAgICAgICAvLyBUaGlzIGhhY2sgaXMgdG8gc3RvcCB0aGUgaW5saW5lIHRhZyBlZGl0b3IgZnJvbSBtb3ZpbmcgYWxsIHRhZ3Mgb24gdGhlIHBhZ2UgaW50byB0aGUgZmlyc3QgcXVlc3Rpb24uCiAgICAgICAgLy8gU2hvZzkga25vd3MgYWJvdXQgdGhpcywgYnV0IGRlY2lkZWQgbm90IHRvIGZpeCBpdCBiZWNhdXNlIG5vIG9uZSB1c2luZyB0aGUgc2l0ZSBub3JtYWxseSB3aWxsIGV2ZXIKICAgICAgICAvLyBydW4gaW50byB0aGlzIHByb2JsZW0uIFRoYW5rIHRoZSBhbG1pZ2h0eSBTaG9nLgogICAgICAgIFN0YWNrRXhjaGFuZ2UudXNpbmcoImlubGluZVRhZ0VkaXRpbmciLCAoKSA9PiAKICAgICAgICB7CiAgICAgICAgICAgIFN0YWNrRXhjaGFuZ2UuaW5saW5lVGFnRWRpdGluZyA9IChmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICB2YXIgcXVlc3Rpb25zID0gJCgnZGl2LnF1ZXN0aW9uJyk7CiAgICAgICAgICAgICAgICB2YXIgaW5pdHMgPSB7fTsKCiAgICAgICAgICAgICAgICBxdWVzdGlvbnMuZWFjaChmdW5jdGlvbigpewogICAgICAgICAgICAgICAgICAgIHZhciBxdWVzdGlvbiA9ICQodGhpcyk7CiAgICAgICAgICAgICAgICAgICAgdmFyIGpUYWdMaXN0OwogICAgICAgICAgICAgICAgICAgIHZhciBqRWRpdFRhZ3NMaW5rOwogICAgICAgICAgICAgICAgICAgIHZhciBqTGlua1dyYXBwZXI7CgogICAgICAgICAgICAgICAgICAgIHZhciBxdWVzdGlvbklkOwogICAgICAgICAgICAgICAgICAgIHZhciByZXZpZXdUYXNrSWQ7CiAgICAgICAgICAgICAgICAgICAgdmFyIGpDdXJyZW50VGFnc0J1ZmZlciA9ICQoIjxkaXY+PC9kaXY+Iik7CgogICAgICAgICAgICAgICAgICAgIHZhciBiaW5kV3JhcHBlckhvdmVyRXZlbnRzID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBqTGlua1dyYXBwZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tb3VzZW92ZXIoZnVuY3Rpb24gKCkgeyBqRWRpdFRhZ3NMaW5rLnNob3coKTsgfSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tb3VzZW91dChmdW5jdGlvbiAoKSB7IGpFZGl0VGFnc0xpbmsuaGlkZSgpOyB9KTsKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICB2YXIgYmluZEVkaXRUYWdzTGlua0NsaWNrID0gZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBqRWRpdFRhZ3NMaW5rLnVuYmluZCgnY2xpY2snKS5vbmUoJ2NsaWNrJywgZnVuY3Rpb24gKCkgewoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpMaW5rV3JhcHBlci5mYWRlT3V0KCdmYXN0JywgZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVwb24gY2xpY2tpbmcgImVkaXQgdGFncyIsIHNhdmUgdGhlIGN1cnJlbnQgdGFncyBpbiBjYXNlIG9mIGNhbmNlbAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpMaW5rV3JhcHBlci5hcHBlbmRUbyhqQ3VycmVudFRhZ3NCdWZmZXIpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmZXRjaCBvdXIgdGFnIGVkaXRvciAtIHdpbGwgY29udGFpbiB0aGUgbGF0ZXN0IHRhZ3MsIHdoaWNoIGNvdWxkIGRpZmZlciBmcm9tIHdoYXQncyBsb2FkZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTdGFja0V4Y2hhbmdlLmhlbHBlcnMuYWRkU3Bpbm5lcihqVGFnTGlzdCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJC5hamF4KHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ0dFVCcsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybDogJy9wb3N0cy8nICsgcXVlc3Rpb25JZCArICcvZWRpdC10YWdzJywKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogeyByZXZpZXdUYXNrSWQ6IHJldmlld1Rhc2tJZCB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogJ2h0bWwnLAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmZXRjaFN1Y2Nlc3MsCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBmZXRjaEVycm9yCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgfTsKCiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3RvcmVDdXJyZW50VGFncyA9IGZ1bmN0aW9uIChpbW1lZGlhdGVseSkgewogICAgICAgICAgICAgICAgICAgICAgICBTdGFja0V4Y2hhbmdlLmhlbHBlcnMuZGlzYWJsZVN1Ym1pdEJ1dHRvbihqVGFnTGlzdCk7CiAgICAgICAgICAgICAgICAgICAgICAgIFN0YWNrRXhjaGFuZ2UuaGVscGVycy5yZW1vdmVNZXNzYWdlcygpOwogICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9JdCA9IGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpUYWdMaXN0LmVtcHR5KCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqTGlua1dyYXBwZXIuYXBwZW5kVG8oalRhZ0xpc3QpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgakxpbmtXcmFwcGVyLnNob3coKS5maW5kKCdhI2VkaXQtdGFncycpLnBhcmVudCgpLmhpZGUoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpUYWdMaXN0LmZhZGVJbignZmFzdCcpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYmluZEVkaXRUYWdzTGlua0NsaWNrKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbW1lZGlhdGVseSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvSXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICAgICAgalRhZ0xpc3QuZmFkZU91dCgnZmFzdCcsIGRvSXQpOwogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgIHZhciBmZXRjaFN1Y2Nlc3MgPSBmdW5jdGlvbiAoaHRtbCkgewogICAgICAgICAgICAgICAgICAgICAgICAvLyBUT0RPOiB3ZSBjb3VsZCBmZXRjaCBuZXdlciB0YWdzIC0gdXBkYXRlIGpDdXJyZW50VGFnc0J1ZmZlcidzIHRhZ3Mgd2l0aCBsYXRlc3QKCiAgICAgICAgICAgICAgICAgICAgICAgIFN0YWNrRXhjaGFuZ2UuaGVscGVycy5yZW1vdmVTcGlubmVyKCk7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyB3ZSdsbCBoaWRlIHRoZSBjb250YWluZXIsIHRoZW4gc2hvdyBpdCB2aWEgYW5pbWF0aW9uIChKT1kpCiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqSHRtbCA9ICQoaHRtbCk7CgogICAgICAgICAgICAgICAgICAgICAgICAvLyBvbmx5IGZldGNoIHRhZ2VkaXRvci5qcyBpZiB0aGUgYXV0b2NvbXBsZXRlIHBsdWdpbiBpc24ndCBhdmFpbGFibGUKICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiAkKCkuYXV0b2NvbXBsZXRlID09ICdmdW5jdGlvbicpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqSHRtbCA9IGpIdG1sLm5vdCgnc2NyaXB0W3NyYyo9InRhZ2VkaXRvci5qcyJdJyk7CgogICAgICAgICAgICAgICAgICAgICAgICB2YXIgakZvcm0gPSAkKCc8Zm9ybSBtZXRob2Q9InBvc3QiIGFjdGlvbj0iL3Bvc3RzLycgKyBxdWVzdGlvbklkICsgJy9lZGl0LXRhZ3MiPjwvZm9ybT4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgalRhZ0xpc3QuY3NzKCdkaXNwbGF5JywgJ25vbmUnKS5hcHBlbmQoakZvcm0pOwogICAgICAgICAgICAgICAgICAgICAgICBqRm9ybS5hcHBlbmQoakh0bWwpOwoKICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIHN1Ym1pdCBhbmQgY2FuY2VsCiAgICAgICAgICAgICAgICAgICAgICAgIGpUYWdMaXN0LmZpbmQoJ2Rpdi5mb3JtLWl0ZW0nKS5hcHBlbmQoCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz0iZm9ybS1zdWJtaXQiPicgKwogICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9ImZrZXkiIHZhbHVlPSInICsgU3RhY2tFeGNoYW5nZS5vcHRpb25zLnVzZXIuZmtleSArICciIC8+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0icmV2aWV3VGFza0lkIiB2YWx1ZT0iJyArIHJldmlld1Rhc2tJZCArICciIC8+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKCc8aW5wdXQ+JywgeyBpZDogImVkaXQtdGFncy1zdWJtaXQiLCB0eXBlOiAic3VibWl0IiwgdmFsdWU6ICJTYXZlIFRhZyBFZGl0cyIsIHRhYmluZGV4OiAiMTA0IiB9KS5wcm9wKCdvdXRlckhUTUwnKSArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGEgaWQ9ImVkaXQtdGFncy1jYW5jZWwiIGNsYXNzPSJjYW5jZWwtZWRpdCIgc3R5bGU9Im1hcmdpbi1sZWZ0OjhweDsiIGhyZWY9IiMiIHRhYmluZGV4PSIxMDUiPicgKyAiY2FuY2VsIiArICc8L2E+JyArCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPC9kaXY+Jyk7CgogICAgICAgICAgICAgICAgICAgICAgICBTdGFja0V4Y2hhbmdlLnVzaW5nKCJwb3N0VmFsaWRhdGlvbiIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YWNrRXhjaGFuZ2UucG9zdFZhbGlkYXRpb24uaW5pdE9uQmx1ckFuZFN1Ym1pdChqRm9ybSwgMSwgJ3RhZ3MnLCBmYWxzZSwgZnVuY3Rpb24gKGRhdGEpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXJ2ZXIgc2VuZHMgZG93biB0aGUgc2F2ZWQgdGFncyBhcyB0aGV5IGFyZSBmaXJzdCByZW5kZXJlZCBvbiB0aGUgcGFnZSAtIHJlcGxhY2UgYnVmZmVyZWQgdGFncyBhbmQgc2hvdwogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpMaW5rV3JhcHBlci5maW5kKCdhLnBvc3QtdGFnJykucmVtb3ZlKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgakxpbmtXcmFwcGVyLnByZXBlbmQoZGF0YS5odG1sKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN0b3JlQ3VycmVudFRhZ3MoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS50cmlnZ2VyKCdyZXRhZycsIHF1ZXN0aW9uSWQpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwoKICAgICAgICAgICAgICAgICAgICAgICAgakZvcm0uZmluZCgnLmNhbmNlbC1lZGl0JykuY2xpY2soZnVuY3Rpb24gKGUpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3RvcmVDdXJyZW50VGFncygpOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgICAgICAgICAgICAgICB9KTsKCiAgICAgICAgICAgICAgICAgICAgICAgIGpUYWdMaXN0LmZhZGVJbignZmFzdCcsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoJyN0YWduYW1lcycpLmZvY3VzKCk7CiAgICAgICAgICAgICAgICAgICAgICAgIH0pOwogICAgICAgICAgICAgICAgICAgIH07CgogICAgICAgICAgICAgICAgICAgIHZhciBmZXRjaEVycm9yID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7CiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHVuZG8gb3VyIHN0eWxpbmcgYW5kIHNob3cgd2hhdCBoYXBwZW5lZAogICAgICAgICAgICAgICAgICAgICAgICBTdGFja0V4Y2hhbmdlLmhlbHBlcnMucmVtb3ZlU3Bpbm5lcigpOwogICAgICAgICAgICAgICAgICAgICAgICByZXN0b3JlQ3VycmVudFRhZ3MoKTsKICAgICAgICAgICAgICAgICAgICAgICAgU3RhY2tFeGNoYW5nZS5oZWxwZXJzLnNob3dFcnJvck1lc3NhZ2UoakxpbmtXcmFwcGVyLCAocmVzcG9uc2UucmVzcG9uc2VUZXh0ICYmIHJlc3BvbnNlLnJlc3BvbnNlVGV4dC5sZW5ndGggPCAzMDAgPyByZXNwb25zZS5yZXNwb25zZVRleHQgOiAiQW4gZXJyb3Igb2NjdXJyZWQgd2hlbiBmZXRjaGluZyB0aGUgdGFnIGVkaXRvciIpKTsKICAgICAgICAgICAgICAgICAgICB9OwoKICAgICAgICAgICAgICAgICAgICAvLyBwdWJsaWMgbWV0aG9kcwogICAgICAgICAgICAgICAgICAgIGluaXRzW3F1ZXN0aW9uSWRdID0gewogICAgICAgICAgICAgICAgICAgICAgICBpbml0OiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoU3RhY2tFeGNoYW5nZS5kaXNhYmxlSW5saW5lVGFnRWRpdHMpIHJldHVybjsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlc3Rpb25JZCA9IHF1ZXN0aW9uLmZpbmQoJ2Rpdi52b3RlID4gaW5wdXRbdHlwZT0iaGlkZGVuIl0nKS52YWwoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpUYWdMaXN0ID0gcXVlc3Rpb24uZmluZCgnZGl2LnBvc3QtdGFnbGlzdCcpOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdyYXAgb3VyIHRhZ3MgaW4gYSBzcGFuIHRvIGVhc2UgaG92ZXIgc2hvdy9oaWRlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqVGFnTGlzdC5maW5kKCdhLnBvc3QtdGFnJykud3JhcEFsbCgnPHNwYW4gY2xhc3M9ImVkaXQtdGFncy13cmFwcGVyIj48L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqTGlua1dyYXBwZXIgPSBqVGFnTGlzdC5maW5kKCdzcGFuLmVkaXQtdGFncy13cmFwcGVyJyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWRkIGFuICJlZGl0IHRhZ3MiIGxpbmsgdXBvbiBob3ZlcmluZyBvdmVyIHRhZ3MKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpFZGl0VGFnc0xpbmsgPSAkKCc8c3BhbiBjbGFzcz0iZG5vIj4nICsgJCgnPGE+JywgeyBpZDogImVkaXQtdGFncyIsIHN0eWxlOiAiIiwgdGl0bGU6ICJlZGl0IG9ubHkgdGhpcyBxdWVzdGlvbidzIHRhZ3MiLCB0ZXh0OiAiZWRpdCB0YWdzIiB9KS5wcm9wKCdvdXRlckhUTUwnKSArICc8L3NwYW4+Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqTGlua1dyYXBwZXIuYXBwZW5kKGpFZGl0VGFnc0xpbmspOwoKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRXcmFwcGVySG92ZXJFdmVudHMoKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJpbmRFZGl0VGFnc0xpbmtDbGljaygpOwogICAgICAgICAgICAgICAgICAgICAgICB9LAoKICAgICAgICAgICAgICAgICAgICAgICAgaW5pdFJldmlld1JldGFnOiBmdW5jdGlvbiAoY3VycmVudFJldmlld1Rhc2tJZCkgewogICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFN0YWNrRXhjaGFuZ2UuZGlzYWJsZUlubGluZVRhZ0VkaXRzKSByZXR1cm47CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHF1ZXN0aW9uSWQgPSBxdWVzdGlvbi5maW5kKCdkaXYudm90ZSA+IGlucHV0W3R5cGU9ImhpZGRlbiJdJykudmFsKCk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXZpZXdUYXNrSWQgPSBjdXJyZW50UmV2aWV3VGFza0lkOwogICAgICAgICAgICAgICAgICAgICAgICAgICAgalRhZ0xpc3QgPSBxdWVzdGlvbi5maW5kKCdkaXYucG9zdC10YWdsaXN0Jyk7CgogICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd3JhcCBvdXIgdGFncyBpbiBhIHNwYW4gdG8gZWFzZSBob3ZlciBzaG93L2hpZGUKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpUYWdMaXN0LmZpbmQoJ2EucG9zdC10YWcnKS53cmFwQWxsKCc8c3BhbiBjbGFzcz0iZWRpdC10YWdzLXdyYXBwZXIiPjwvc3Bhbj4nKTsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGpMaW5rV3JhcHBlciA9IGpUYWdMaXN0LmZpbmQoJ3NwYW4uZWRpdC10YWdzLXdyYXBwZXInKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqRWRpdFRhZ3NMaW5rID0gJCgnLnJldGFnLXF1ZXN0aW9uOmZpcnN0Jyk7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBqRWRpdFRhZ3NMaW5rLnJlbW92ZUF0dHIoJ2hyZWYnKTsKCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiaW5kRWRpdFRhZ3NMaW5rQ2xpY2soKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH07CiAgICAgICAgICAgICAgICB9KTsKICAgICAgICAgICAgICAgIHJldHVybiB7CiAgICAgICAgICAgICAgICAgICAgaW5pdDogZnVuY3Rpb24gKCkgewogICAgICAgICAgICAgICAgICAgICAgICBmb3IodmFyIGkgaW4gaW5pdHMpCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaXRzW2ldLmluaXQoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0sCgogICAgICAgICAgICAgICAgICAgIGluaXRSZXZpZXdSZXRhZzogZnVuY3Rpb24gKGN1cnJlbnRSZXZpZXdUYXNrSWQpIHsKICAgICAgICAgICAgICAgICAgICAgICAgZm9yKHZhciBpIGluIGluaXRzKQogICAgICAgICAgICAgICAgICAgICAgICB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbml0c1tpXS5pbml0UmV2aWV3UmV0YWcoKTsKICAgICAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSkoKTsKICAgICAgICB9KTsKCiAgICAgICAgZnVuY3MuYXBwZW5kTm9kZXMocG9zdHMpOwoKICAgICAgICBmdW5jcy5mZXRjaFBvc3RzKHBvc3RzKTsKICAgIH07CgogICAgZnVuY3MuaW5pdCgpOwp9OwoKY29uc3QgU2NyaXB0VG9JbmplY3ROb2RlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7CmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoU2NyaXB0VG9JbmplY3ROb2RlKTsKCmNvbnN0IFNjcmlwdFRvSW5qZWN0Q29udGVudCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcoJyArIFNjcmlwdFRvSW5qZWN0LnRvU3RyaW5nKCkgKyAnKSgpJyk7ClNjcmlwdFRvSW5qZWN0Tm9kZS5hcHBlbmRDaGlsZChTY3JpcHRUb0luamVjdENvbnRlbnQpOwo="},{"name":"Votes Page Enhancer","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["/https?:\\/\\/(meta\\.|www\\.)?stackoverflow\\.com/users/.*?tab\\=votes.*/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1457442038376,"data":{}},"enabled":true,"position":17,"uuid":"ad9135a7-2e9a-423b-baf5-6bc59f6598cf","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBWb3RlcyBQYWdlIEVuaGFuY2VyCi8vIEBuYW1lc3BhY2UgICAgaHR0cDovL3RhbXBlcm1vbmtleS5uZXQvCi8vIEB2ZXJzaW9uICAgICAgMS4wLjAuMgovLyBAZGVzY3JpcHRpb24gIExvYWRzIHBvc3RzIGluIHRoZWlyIG5hdHVyYWwgZm9ybSBvbiB0aGUgdm90ZXMgcGFnZXMgZm9yIHVzZXJzLgovLyBAYXV0aG9yICAgICAgIEBUaW55LUdpYW50Ci8vIEBpbmNsdWRlICAgICAgL2h0dHBzPzpcL1wvKG1ldGFcLnx3d3dcLik/c3RhY2tvdmVyZmxvd1wuY29tL3VzZXJzLy4qP3RhYlw9dm90ZXMuKi8KLy8gQGdyYW50ICAgICAgICBub25lCi8vID09L1VzZXJTY3JpcHQ9PQovKiBqc2hpbnQgLVcwOTcgKi8KJ3VzZSBzdHJpY3QnOwoKbGV0IHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTsKc3R5bGUudGV4dENvbnRlbnQgPSAnLmFjdHVhbC1lZGl0LW92ZXJsYXkgeyBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7IH0nOwpkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKHN0eWxlKTsKClN0YWNrRXhjaGFuZ2UudXNpbmcoImlubGluZUVkaXRpbmciLCBmdW5jdGlvbiAoKSB7CiAgICBTdGFja0V4Y2hhbmdlLmlubGluZUVkaXRpbmcuaW5pdCgpOwp9KTsKCmxldCBjc3MgPSBbCiAgICAnLnF1ZXN0aW9uLCAuYW5zd2VyIHsnLAogICAgJyAgICB3aWR0aDogNzMwcHggIWltcG9ydGFudCcsCiAgICAnfScsCiAgICAnLnZvdGVjZWxsIHsnLAogICAgJyAgICB2ZXJ0aWNhbC1hbGlnbjogdG9wICFpbXBvcnRhbnQ7JywKICAgICd9JywKICAgICdoMSwgaDIsIGgzLCBoNCwgaDUsIGg2IHsnLAogICAgJyAgICBmb250LXdlaWdodDogbm9ybWFsJywKICAgICd9JwpdLmpvaW4oJ1xuJyk7CgppZiAoZmFsc2UpOwplbHNlIGlmICgidW5kZWZpbmVkIiAhPSB0eXBlb2YgR01fYWRkU3R5bGUpICBHTV9hZGRTdHlsZShjc3MpOwplbHNlIGlmICgidW5kZWZpbmVkIiAhPSB0eXBlb2YgUFJPX2FkZFN0eWxlKSBQUk9fYWRkU3R5bGUoY3NzKTsKZWxzZSBpZiAoInVuZGVmaW5lZCIgIT0gdHlwZW9mIGFkZFN0eWxlKSAgICAgYWRkU3R5bGUoY3NzKTsKZWxzZSAoZG9jdW1lbnQuYm9keSB8fCBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYm9keSIpWzBdKS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJzdHlsZSIpLmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpLnBhcmVudE5vZGUpOwoKbGV0IGluaXRQb3N0ID0gKHBvc3QsIGh0bWwsIGNvbnRhaW5lciwgbG9hZGVyLCBwYXJlbnQpID0+IHsKICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGV2ZW50ID0+IHsKICAgICAgICBpZih4aHIuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgY29uc29sZS5sb2coeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQsIHhoci5yZXNwb25zZVRleHQpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQogICAgICAgIAogICAgICAgIGxldCBxdWVzdGlvbiA9ICgvXGQrLy5leGVjKGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlbmFibGUtbG9hZC1ib2R5LScgKyBwb3N0KS5xdWVyeVNlbGVjdG9yKCdhW2hyZWZdJykpfHxbZmFsc2VdKVswXTsKICAgICAgICAKICAgICAgICBsZXQgb3NuaXBwZXRzID0gY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3JBbGwoJy5zbmlwcGV0Jyk7CiAgICAgICAgCiAgICAgICAgY29udGFpbmVyLmlubmVySFRNTCA9IGh0bWw7CiAgICAgICAgCiAgICAgICAgbGV0IG5zbmlwcGV0cyA9IGNvbnRhaW5lci5xdWVyeVNlbGVjdG9yQWxsKCcuc25pcHBldCcpOwogICAgICAgIAogICAgICAgIGxvYWRlci5yZW1vdmUoKTsKICAgICAgICBwYXJlbnQuYXBwZW5kQ2hpbGQoY29udGFpbmVyKTsKCiAgICAgICAgU3RhY2tFeGNoYW5nZS5xdWVzdGlvbi5pbml0KHsKICAgICAgICAgICAgdm90ZXNDYXN0OiBKU09OLnBhcnNlKHhoci5yZXNwb25zZVRleHQpLAogICAgICAgICAgICBjYW5WaWV3Vm90ZUNvdW50czogdHJ1ZSwKICAgICAgICAgICAgcXVlc3Rpb25JZDogcXVlc3Rpb24KICAgICAgICB9KTsKCiAgICAgICAgY29udGFpbmVyLnF1ZXJ5U2VsZWN0b3IoJy5qcy1zaG93LWxpbmsuY29tbWVudHMtbGluaycpLmNsaWNrKCk7CiAgICAgICAgCiAgICAgICAgZm9yKGxldCBpIGluIE9iamVjdC5rZXlzKG5zbmlwcGV0cykpIHsKICAgICAgICAgICAgbnNuaXBwZXRzW2ldLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG9zbmlwcGV0c1tpXSwgbnNuaXBwZXRzW2ldKTsKICAgICAgICAgICAgbnNuaXBwZXRzW2ldLnJlbW92ZSgpOwogICAgICAgIH0KICAgIH0sIGZhbHNlKTsKCiAgICB4aHIub3BlbignR0VUJywgJy9wb3N0cy8nICsgcG9zdCArICcvdm90ZXMnKTsKCiAgICB4aHIuc2VuZCgpOwp9CgpsZXQgZmV0Y2hQb3N0ID0gcG9zdCA9PiB7CiAgICBsZXQgY29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VuYWJsZS1sb2FkLWJvZHktJyArIHBvc3QpLnBhcmVudE5vZGUubmV4dEVsZW1lbnRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoJy5ib2R5LWNvbnRhaW5lcicpOwogICAgbGV0IHBhcmVudCA9IGNvbnRhaW5lci5wYXJlbnROb2RlOwogICAgY29udGFpbmVyLnJlbW92ZSgpOwogICAgCiAgICBsZXQgbG9hZGVyID0gcGFyZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3RkJykpOwogICAgbG9hZGVyLmNsYXNzTmFtZSA9ICdib2R5LWNvbnRhaW5lcic7CiAgICBsb2FkZXIuc3R5bGUuaGVpZ2h0ID0gJ2F1dG8nOwogICAgbG9hZGVyLmlubmVySFRNTCA9ICc8aW1nIGNsYXNzPSJhamF4LWxvYWRlciIgc3JjPSIvY29udGVudC9pbWcvcHJvZ3Jlc3MtZG90cy5naWYiIHRpdGxlPSJsb2FkaW5nLi4uIiBhbHQ9ImxvYWRpbmcuLi4iPic7CiAgICAKICAgIGxldCB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTsKCiAgICB4aHIuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsIGV2ZW50ID0+IHsKICAgICAgICBpZih4aHIuc3RhdHVzICE9PSAyMDApIHsKICAgICAgICAgICAgY29uc29sZS5sb2coeGhyLnN0YXR1cywgeGhyLnN0YXR1c1RleHQsIHhoci5yZXNwb25zZVRleHQpOwogICAgICAgICAgICByZXR1cm47CiAgICAgICAgfQoKICAgICAgICBpbml0UG9zdChwb3N0LCB4aHIucmVzcG9uc2VUZXh0LCBjb250YWluZXIsIGxvYWRlciwgcGFyZW50KTsKICAgIH0sIGZhbHNlKTsKCiAgICB4aHIub3BlbignR0VUJywgJy9wb3N0cy9hamF4LWxvYWQtcmVhbHRpbWUvJyArIHBvc3QpOwoKICAgIHhoci5zZW5kKCk7Cn0KCiQoZG9jdW1lbnQpLmFqYXhDb21wbGV0ZSgoZXZlbnQsIHJlcXVlc3QsIHNldHRpbmdzKSA9PiB7IAogICAgbGV0IHBvc3QgPSAoL3Bvc3RzXC8oXGQrKVwvYm9keS8uZXhlYyhzZXR0aW5ncy51cmwpfHxbMCwwXSlbMV07CiAgICBpZiAocG9zdCkgZmV0Y2hQb3N0KHBvc3QpOwp9KTs="},{"name":"Flagging Percentages","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":["*://api.stackexchange.com/*","*://blog.stackexchange.com/*","*://blog.stackoverflow.com/*","*://data.stackexchange.com/*","*://elections.stackexchange.com/*","*://stackexchange.com/*"],"orig_includes":[],"orig_matches":["*://*.askubuntu.com/users/flag-summary/*","*://*.mathoverflow.net/users/flag-summary/*","*://*.serverfault.com/users/flag-summary/*","*://*.stackapps.com/users/flag-summary/*","*://*.stackexchange.com/users/flag-summary/*","*://*.stackoverflow.com/users/flag-summary/*","*://*.superuser.com/users/flag-summary/*"],"orig_noframes":null,"orig_run_at":"document-end","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1458020544836,"data":{}},"enabled":true,"position":18,"file_url":"file:///home/kevin/Downloads/flagging-percentages.user.js","uuid":"3d679309-7436-47ce-b601-9fc6c1be4484","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgICBGbGFnZ2luZyBQZXJjZW50YWdlcwovLyBAZGVzY3JpcHRpb24gIEFkZHMgZmxhZ2dpbmcgcGVyY2VudGFnZXMgd2hlbiB2aWV3aW5nIHRoZSBGbGFnIFN1bW1hcnkgcGFnZS4KLy8gQG5hbWVzcGFjZSAgICBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3VzZXJzLzE0NTQ1MzgvCi8vIEBhdXRob3IgICAgICAg4bSJyp51x50KLy8gQG1hdGNoICAgICAgICAqOi8vKi5hc2t1YnVudHUuY29tL3VzZXJzL2ZsYWctc3VtbWFyeS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyoubWF0aG92ZXJmbG93Lm5ldC91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnNlcnZlcmZhdWx0LmNvbS91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnN0YWNrYXBwcy5jb20vdXNlcnMvZmxhZy1zdW1tYXJ5LyoKLy8gQG1hdGNoICAgICAgICAqOi8vKi5zdGFja2V4Y2hhbmdlLmNvbS91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAbWF0Y2ggICAgICAgICo6Ly8qLnN0YWNrb3ZlcmZsb3cuY29tL3VzZXJzL2ZsYWctc3VtbWFyeS8qCi8vIEBtYXRjaCAgICAgICAgKjovLyouc3VwZXJ1c2VyLmNvbS91c2Vycy9mbGFnLXN1bW1hcnkvKgovLyBAZXhjbHVkZSAgICAgICo6Ly9hcGkuc3RhY2tleGNoYW5nZS5jb20vKgovLyBAZXhjbHVkZSAgICAgICo6Ly9ibG9nLnN0YWNrZXhjaGFuZ2UuY29tLyoKLy8gQGV4Y2x1ZGUgICAgICAqOi8vYmxvZy5zdGFja292ZXJmbG93LmNvbS8qCi8vIEBleGNsdWRlICAgICAgKjovL2RhdGEuc3RhY2tleGNoYW5nZS5jb20vKgovLyBAZXhjbHVkZSAgICAgICo6Ly9lbGVjdGlvbnMuc3RhY2tleGNoYW5nZS5jb20vKgovLyBAZXhjbHVkZSAgICAgICo6Ly9zdGFja2V4Y2hhbmdlLmNvbS8qCi8vIEBydW4tYXQgICAgICAgZG9jdW1lbnQtZW5kCi8vID09L1VzZXJTY3JpcHQ9PQovKiBqc2hpbnQgLVcwOTcgKi8KKGZ1bmN0aW9uICgkKSB7CiAgICAidXNlIHN0cmljdCI7CiAgICB2YXIgZ3JvdXAgPSB7CiAgICAgICAgUE9TVDogMSwKICAgICAgICBTUEFNOiAyLAogICAgICAgIE9GRkVOU0lWRTogMywKICAgICAgICBDT01NRU5UOiA0CiAgICB9OwogICAgdmFyIHR5cGUgPSB7CiAgICAgICAgVE9UQUw6ICJmbGFncyIsCiAgICAgICAgV0FJVElORzogIndhaXRpbmciLAogICAgICAgIEhFTFBGVUw6ICJoZWxwZnVsIiwKICAgICAgICBERUNMSU5FRDogImRlY2xpbmVkIiwKICAgICAgICBESVNQVVRFRDogImRpc3B1dGVkIiwKICAgICAgICBBR0VEQVdBWTogImFnZWQgYXdheSIKICAgIH07CgogICAgdmFyIGdyb3VwS2V5LAogICAgICAgIHR5cGVLZXksCiAgICAgICAgdG90YWwsCiAgICAgICAgY291bnQsCiAgICAgICAgcGVyY2VudGFnZTsKCiAgICBmdW5jdGlvbiBhZGRQZXJjZW50YWdlKGdyb3VwLCB0eXBlLCBwZXJjZW50YWdlKSB7CiAgICAgICAgdmFyICRzcGFuID0gJCgiPHNwYW4vPiIsIHsKICAgICAgICAgICAgdGV4dDogIih7MH0lKSIucmVwbGFjZSgnezB9JywgcGVyY2VudGFnZSksCiAgICAgICAgICAgIHN0eWxlOiAibWFyZ2luLWxlZnQ6NXB4OyBjb2xvcjogIzk5OTsgZm9udC1zaXplOiAxMnB4OyIKICAgICAgICB9KTsKICAgICAgICAkKCJ0ZCA+IGFbaHJlZio9J2dyb3VwPSIgKyBncm91cCArICInXTpjb250YWlucygnIiArIHR5cGUgKyAiJykiKS5hZnRlcigkc3Bhbik7CiAgICB9CgogICAgZnVuY3Rpb24gY2FsY3VsYXRlUGVyY2VudGFnZShjb3VudCwgdG90YWwpIHsKICAgICAgICB2YXIgcGVyY2VudCA9IChjb3VudCAvIHRvdGFsKSAqIDEwMDsKICAgICAgICByZXR1cm4gK3BlcmNlbnQudG9GaXhlZCgyKTsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRGbGFnQ291bnQoZ3JvdXAsIHR5cGUpIHsKICAgICAgICB2YXIgZmxhZ0NvdW50ID0gMDsKICAgICAgICBmbGFnQ291bnQgKz0gTnVtYmVyKCQoInRkID4gYVtocmVmKj0nZ3JvdXA9IiArIGdyb3VwICsgIiddOmNvbnRhaW5zKCciICsgdHlwZSArICInKSIpCiAgICAgICAgICAgIC5wYXJlbnQoKQogICAgICAgICAgICAucHJldigpCiAgICAgICAgICAgIC50ZXh0KCkKICAgICAgICAgICAgLnJlcGxhY2UoIiwiLCAiIikpOwogICAgICAgIHJldHVybiBmbGFnQ291bnQ7CiAgICB9CgogICAgLy8gYWRkIHBlcmNlbnRhZ2VzCiAgICBmb3IgKGdyb3VwS2V5IGluIGdyb3VwKSB7CiAgICAgICAgdG90YWwgPSBnZXRGbGFnQ291bnQoZ3JvdXBbZ3JvdXBLZXldLCB0eXBlLlRPVEFMKTsKICAgICAgICBmb3IgKHR5cGVLZXkgaW4gdHlwZSkgewogICAgICAgICAgICBpZiAodHlwZUtleSAhPT0gIlRPVEFMIikgewogICAgICAgICAgICAgICAgY291bnQgPSBnZXRGbGFnQ291bnQoZ3JvdXBbZ3JvdXBLZXldLCB0eXBlW3R5cGVLZXldKTsKICAgICAgICAgICAgICAgIHBlcmNlbnRhZ2UgPSBjYWxjdWxhdGVQZXJjZW50YWdlKGNvdW50LCB0b3RhbCk7CiAgICAgICAgICAgICAgICAvL2NvbnNvbGUubG9nKGdyb3VwS2V5ICsgIjogIiArIHR5cGVLZXkgKyAiIEZsYWdzIC0tICIgKyBjb3VudCk7CiAgICAgICAgICAgICAgICBhZGRQZXJjZW50YWdlKGdyb3VwW2dyb3VwS2V5XSwgdHlwZVt0eXBlS2V5XSwgcGVyY2VudGFnZSk7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICB9Cn0oalF1ZXJ5KSk7Cg=="},{"name":"SmokePreview","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://chat.meta.stackexchange.com/rooms/89/tavern-on-the-meta","http://chat.stackexchange.com/rooms/11540/charcoal-hq","http://chat.stackoverflow.com/rooms/41570/so-close-vote-reviewers"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"data":{"askubuntu.com":"n103","meta.stackexchange.com":"n118","stackapps.com":"n113","stackoverflow.com":"n10248","superuser.com":"n105","token":"sK(Kzc7KCwmPboc84OE1TQA))","unix.stackexchange.com":"n103"},"ts":1458289631453},"enabled":true,"position":19,"file_url":"https://raw.githubusercontent.com/rekire/SmokePreview/master/SmokePreview.user.js","uuid":"8173f05d-49f7-4213-b6d7-6c2a7bf0dc9c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFNtb2tlUHJldmlldwovLyBAbmFtZXNwYWNlICAgZXUucmVraXNvZnQuc21va2VyCi8vIEBkZXNjcmlwdGlvbiBBIEdyZWFzZU1vbmtleSBzY3JpcHQgdG8gYWRkIGEgcHJldmlldyB0byBjaGF0IG1lc3NhZ2VzIG9mIHRoZSBTbW9rZURldGVjdG9yLgovLyBAaW5jbHVkZSAgICAgaHR0cDovL2NoYXQubWV0YS5zdGFja2V4Y2hhbmdlLmNvbS9yb29tcy84OS90YXZlcm4tb24tdGhlLW1ldGEKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly9jaGF0LnN0YWNrZXhjaGFuZ2UuY29tL3Jvb21zLzExNTQwL2NoYXJjb2FsLWhxCi8vIEBpbmNsdWRlICAgICBodHRwOi8vY2hhdC5zdGFja292ZXJmbG93LmNvbS9yb29tcy80MTU3MC9zby1jbG9zZS12b3RlLXJldmlld2VycwovLyBAdmVyc2lvbiAgICAgMTYwMzMwMDEKLy8gQGdyYW50ICAgICAgIEdNX2dldFZhbHVlCi8vIEBncmFudCAgICAgICBHTV9zZXRWYWx1ZQovLyA9PS9Vc2VyU2NyaXB0PT0KCnVuc2FmZVdpbmRvdy5zcF9sb2FkID0gR01fZ2V0VmFsdWU7CnVuc2FmZVdpbmRvdy5zcF9zYXZlID0gR01fc2V0VmFsdWU7Cgp2YXIgdGFyZ2V0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ2NoYXQnKTsKdmFyIGxhc3RVc2VyOwp2YXIgcHJpbnRUb0NvbnNvbGUgPSBmYWxzZTsKCnZhciBtc2dHcm91cE9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obXV0YXRpb25zKSB7CiAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHsKICAgIGlmKG11dGF0aW9uLmFkZGVkTm9kZXMubGVuZ3RoID4gMCkgewogICAgICBwcm9jZXNzTWVzc2FnZU5vZGUobXV0YXRpb24uYWRkZWROb2Rlc1swXSk7CiAgICB9CiAgfSk7Cn0pOwoKdmFyIG5ld01zZ09ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24obXV0YXRpb25zKSB7CiAgbXV0YXRpb25zLmZvckVhY2goZnVuY3Rpb24obXV0YXRpb24pIHsKICAgIHRyeSB7CgkgIC8vIHRoZSBsYXN0IGdyb3VwIGlzIG5vdCBpbnRlcmVzdGluZyBhbnltb3JlIHNpbmNlIHRoZXJlIGlzIGEgbmV3IGdyb3VwCiAgICAgIG1zZ0dyb3VwT2JzZXJ2ZXIuZGlzY29ubmVjdCgpOwogICAgfSBjYXRjaChlKSB7fQogICAgLy8gcHJvY2VzcyB0aGUgbmV3IG1lc3NhZ2UKICAgIHByb2Nlc3NOZXdNZXNzYWdlKG11dGF0aW9uKTsKICAgIHZhciBtZXNzYWdlTGlzdCA9IHRhcmdldC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJtZXNzYWdlcyIpOwogICAgdmFyIGxhc3RNZXNzYWdlID0gbWVzc2FnZUxpc3RbbWVzc2FnZUxpc3QubGVuZ3RoIC0gMV07CiAgICBtc2dHcm91cE9ic2VydmVyLm9ic2VydmUobGFzdE1lc3NhZ2UsIG9ic2VydmVyQ29uZmlnKTsKICB9KTsgICAgCn0pOwoKZnVuY3Rpb24gcHJvY2Vzc05ld01lc3NhZ2UobXV0YXRpb24pIHsKICB0cnkgewogICAgbGFzdFVzZXIgPSBtdXRhdGlvbi5hZGRlZE5vZGVzWzBdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoInVzZXJuYW1lIilbMF0uaW5uZXJIVE1MOwogICAgdmFyIG1lc3NhZ2UgPSBtdXRhdGlvbi5hZGRlZE5vZGVzWzBdLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImNvbnRlbnQiKVswXTsKICAgIG9uTWVzc2FnZShsYXN0VXNlciwgbWVzc2FnZSk7CiAgfSBjYXRjaChlKSB7fQp9CgpmdW5jdGlvbiBwcm9jZXNzTWVzc2FnZU5vZGUobm9kZSkgewogIHRyeSB7CiAgICB2YXIgbWVzc2FnZSA9IG5vZGUuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgiY29udGVudCIpWzBdOwogICAgb25NZXNzYWdlKGxhc3RVc2VyLCBtZXNzYWdlKTsKICB9IGNhdGNoKGUpIHt9Cn0KCmZ1bmN0aW9uIG9uTWVzc2FnZSh1c2VyLCBtc2cpIHsKICBpZihwcmludFRvQ29uc29sZSkgY29uc29sZS5sb2codXNlciArICIgc2FpZCAiICsgbXNnLmlubmVySFRNTCk7CiAgaWYodXNlciA9PSAiU21va2VEZXRlY3RvciIgJiYgbXNnLmlubmVySFRNTC5pbmRleE9mKCJieSIpID4gMCkgewogICAgdmFyIGNvZGUgPSBtc2cuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImNvZGUiKTsKICAgIGlmKGNvZGUubGVuZ3RoID4gMCkgewogICAgICB2YXIgc2l0ZSA9IGNvZGVbMF0uaW5uZXJIVE1MOwogICAgICB2YXIgcG9zdCA9IG1zZy5nZXRFbGVtZW50c0J5VGFnTmFtZSgiYSIpWzFdLmhyZWY7CiAgICAgIHZhciB0eXBlID0gKHBvc3QuaW5kZXhPZigicXVlc3Rpb25zIikgPiAwKSA/ICJxdWVzdGlvbnMiIDogImFuc3dlcnMiOwogICAgICB2YXIgaWQgPSBwb3N0LnN1YnN0cihwb3N0Lmxhc3RJbmRleE9mKCIvIikgKyAxKTsKICAgICAgdmFyIHRhZyA9ICc8ZGl2IGlkPSJzZCcgKyBpZCArICciIGNsYXNzPSJvbmVib3ggb2ItcG9zdCIgc3R5bGU9Im92ZXJmbG93LXk6YXV0bzsgbWF4LWhlaWdodDoxNTBweDsgbWFyZ2luLWJvdHRvbToyZW0iPjwvZGl2Pic7CiAgICAgIGlmKGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdzZCcraWQpID09IG51bGwpIHsKICAgICAgICBtc2cuaW5uZXJIVE1MICs9IHRhZzsKICAgICAgfQogICAgICBpZihwcmludFRvQ29uc29sZSkgY29uc29sZS5sb2coY29kZVswXS5pbm5lckhUTUwgKyAiIC0+ICIgKyBzaXRlLCB0eXBlLCBpZCwgbXNnKTsKICAgICAgLy8gVE9ETyBjaGVjayBpZiB0aGUgY3VycmVudCB1c2VyIGhhcyBhbiBhY2NvdW50IG9uIHRoYXQgc2l0ZS4KICAgICAgbG9hZFByZXZpZXcoc2l0ZSwgaWQpOwogICAgfQogICAgaWYocHJpbnRUb0NvbnNvbGUpIGNvbnNvbGUubG9nKGNvZGVbMF0uaW5uZXJIVE1MLCBtc2cuaW5uZXJIVE1MKTsKICB9Cn0KCmZ1bmN0aW9uIGxvYWRQcmV2aWV3KHNpdGUsIGlkKSB7CiAgdmFyIHVybCA9ICJodHRwOi8vYXBpLnN0YWNrZXhjaGFuZ2UuY29tLzIuMi9wb3N0cy8iICsgaWQgKyAiP3NpdGU9IiArIHNpdGUgKyAiJmZpbHRlcj0hTEduS0tLLVgwYmJkKmNpeGtaaWgqSyZrZXk9NEp2RU9sZ20wYUlncmNtbzJoc2JuZygoIjsKICBpZihwcmludFRvQ29uc29sZSkgY29uc29sZS5sb2coInRyeSB0byBkb3dubG9hZCAiICsgdXJsKTsKICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7CiAgeGhyLm9wZW4oJ0dFVCcsIHVybCk7CiAgeGhyLm9ubG9hZCA9IHNob3dQcmV2aWV3OwogIHhoci5pZCA9IGlkOwogIHhoci5zZW5kKCk7Cn0KCmZ1bmN0aW9uIHNob3dQcmV2aWV3KHJlc3BvbnNlKSB7CiAgaWYocHJpbnRUb0NvbnNvbGUpIGNvbnNvbGUubG9nKHJlc3BvbnNlLCB0aGlzLnJlc3BvbnNlLCB0aGlzLmlkKTsKICB2YXIgcmVzcCA9IEpTT04ucGFyc2UodGhpcy5yZXNwb25zZSk7CiAgaWYocmVzcC5pdGVtcy5sZW5ndGggPT0gMCkgewogICAgdmFyIGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgic2QiICsgdGhpcy5pZCk7CiAgICBlbGVtLnN0eWxlLmRpc3BsYXkgPSAibm9uZSI7CiAgICBlbGVtLnBhcmVudE5vZGUuc3R5bGUub3BhY2l0eSA9IC41OwogIH0gZWxzZSB7CiAgICB2YXIgcG9zdCA9IHJlc3AuaXRlbXNbMF07Cgl2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTsKICAgIGxpbmsuc2V0QXR0cmlidXRlKCdocmVmJywgcG9zdC5saW5rKTsKICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJzZCIgKyB0aGlzLmlkKS5pbm5lckhUTUwgPQogICAgICAnPGRpdiB0aXRsZT0iVGhpcyAnICsgcG9zdC5wb3N0X3R5cGUgKyAnIGhhcyBhIHNjb3JlIG9mICcgKyBwb3N0LnNjb3JlICsKICAgICAgJy4iIGNsYXNzPSJvYi1wb3N0LXZvdGVzIj4nICsgcG9zdC5zY29yZSArICc8L2Rpdj4nICsKICAgICAgJzxkaXYgY2xhc3M9Im9iLXBvc3QtdGl0bGUiPicgKyBwb3N0LnBvc3RfdHlwZS5zdWJzdHIoMCwgMSkudG9VcHBlckNhc2UoKSArCiAgICAgICc6IDxhIGhyZWY9IicgKyBwb3N0LmxpbmsgKyAnIiBzdHlsZT0iY29sb3I6ICM0RTgyQzI7Ij4nICsgcG9zdC50aXRsZSArCiAgICAgICc8L2E+PC9kaXY+PHAgY2xhc3M9Im9iLXBvc3QtYm9keSI+PGltZyB3aWR0aD0iMzIiIGhlaWdodD0iMzIiIGFsdD0iJyArIHBvc3Qub3duZXIuZGlzcGxheV9uYW1lICsKICAgICAgJyIgdGl0bGU9IicgKyBwb3N0Lm93bmVyLmRpc3BsYXlfbmFtZSArICciIHNyYz0iJyArIHBvc3Qub3duZXIucHJvZmlsZV9pbWFnZSArCiAgICAgICciIGNsYXNzPSJ1c2VyLWdyYXZhdGFyMzIiPicgKyByZXNwLml0ZW1zWzBdLmJvZHkgKyAnPC9wPicgKwogICAgICAnPGRpdiBjbGFzcz0idG9vbGJhciIgc3R5bGU9InBvc2l0aW9uOmFic29sdXRlOyBib3R0b206IDBweDsiPic7CiAgfQp9CgovLyBzZXR1cCB0aGUgb2JzZXJ2ZXIgY29uZmlndXJhdGlvbgp2YXIgb2JzZXJ2ZXJDb25maWcgPSB7IGF0dHJpYnV0ZXM6IHRydWUsIGNoaWxkTGlzdDogdHJ1ZSwgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9OwoKd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBmdW5jdGlvbigpIHsKICBpZihwcmludFRvQ29uc29sZSkgY29uc29sZS5sb2coImluaXQiKTsKICB2YXIgbWVzc2FnZUxpc3QgPSB0YXJnZXQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgibWVzc2FnZXMiKTsKICB2YXIgbGFzdE1lc3NhZ2UgPSBtZXNzYWdlTGlzdFttZXNzYWdlTGlzdC5sZW5ndGggLSAxXTsKICBtc2dHcm91cE9ic2VydmVyLm9ic2VydmUobGFzdE1lc3NhZ2UsIG9ic2VydmVyQ29uZmlnKTsKICBuZXdNc2dPYnNlcnZlci5vYnNlcnZlKHRhcmdldCwgb2JzZXJ2ZXJDb25maWcpOwoKICB2YXIgbmljayA9IHRhcmdldC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ1c2VybmFtZSIpOwogIGxhc3RVc2VyID0gbmljay5sZW5ndGggPiAwCiAgICAgICAgICAgICAgICAgPyBuaWNrW25pY2subGVuZ3RoIC0gMV0uaW5uZXJIVE1MCiAgICAgICAgICAgICAgICAgOiAidW5rbm93biI7CiAgCiAgLy8gcGFyc2UgZXhpc3RpbmcgbWVzc2FnZXMKICB2YXIgbWVzc2FnZUJsb2NrcyA9IHRhcmdldC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJ1c2VyLWNvbnRhaW5lciIpOwogIGZvcih2YXIgaSA9IDAsIG1lc3NhZ2VCbG9ja3NMZW5ndGggPSBtZXNzYWdlQmxvY2tzLmxlbmd0aDsgaSA8IG1lc3NhZ2VCbG9ja3NMZW5ndGg7IGkrKykgewogICAgdmFyIHVzZXIgPSBtZXNzYWdlQmxvY2tzW2ldLmdldEVsZW1lbnRzQnlDbGFzc05hbWUoInVzZXJuYW1lIilbMF0uaW5uZXJIVE1MOwogICAgdmFyIG1lc3NhZ2VzID0gbWVzc2FnZUJsb2Nrc1tpXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJtZXNzYWdlIik7CiAgICBmb3IodmFyIGogPSAwLCBtZXNzYWdlc0xlbmd0aCA9IG1lc3NhZ2VzLmxlbmd0aDsgaiA8IG1lc3NhZ2VzTGVuZ3RoOyBqKyspIHsKICAgICAgdmFyIG1lc3NhZ2UgPSBtZXNzYWdlc1tqXS5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCJjb250ZW50IilbMF07CiAgICAgIG9uTWVzc2FnZSh1c2VyLCBtZXNzYWdlKTsKICAgIH0KICB9CiAgCiAgdmFyIHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpOwogIHNjcmlwdC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnKCcgKyBwdWJsaWNBcGkgKyAnKSgpOycpKTsKICAoZG9jdW1lbnQuaGVhZCB8fCBkb2N1bWVudC5ib2R5IHx8IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkuYXBwZW5kQ2hpbGQoc2NyaXB0KTsKfSwgZmFsc2UpOw=="},{"name":"Review Stalker","options":{"awareOfChrome":false,"comment":null,"compat_arrayleft":false,"compat_foreach":false,"compat_forvarin":false,"compat_metadata":false,"compat_uW_gmonkey":false,"compat_wrappedjsobject":false,"compatopts_for_requires":true,"noframes":null,"override":{"merge_excludes":true,"merge_includes":true,"merge_matches":true,"orig_excludes":[],"orig_includes":["http://*stackexchange.com/review","http://*stackexchange.com/review/","http://stackoverflow.com/review","http://stackoverflow.com/review/","http://serverfault.com/review","http://serverfault.com/review/","http://superuser.com/review","http://superuser.com/review/","http://askubuntu.com/review","http://askubuntu.com/review/"],"orig_matches":[],"orig_noframes":null,"orig_run_at":"document-idle","use_excludes":[],"use_includes":[],"use_matches":[]},"run_at":null,"user_agent":""},"storage":{"ts":1458291531414,"data":{}},"enabled":true,"position":20,"file_url":"https://greasyfork.org/scripts/4951-review-stalker/code/Review%20Stalker.user.js","uuid":"a8ea3f84-2c80-449a-b3c9-8d9b62f3d57c","source":"Ly8gPT1Vc2VyU2NyaXB0PT0KLy8gQG5hbWUgICAgICAgIFJldmlldyBTdGFsa2VyCi8vIEBuYW1lc3BhY2UgICBodHRwOi8vY2FtaWxzdGFwcy5ubAovLyBAZGVzY3JpcHRpb24gU3RhbGtzIHRoZSBTdGFja0V4Y2hhbmdlIHJldmlldyBwYWdlcwovLyBAaW5jbHVkZSAgICAgaHR0cDovLypzdGFja2V4Y2hhbmdlLmNvbS9yZXZpZXcKLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly8qc3RhY2tleGNoYW5nZS5jb20vcmV2aWV3LwovLyBAaW5jbHVkZSAgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3JldmlldwovLyBAaW5jbHVkZSAgICAgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3Jldmlldy8KLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly9zZXJ2ZXJmYXVsdC5jb20vcmV2aWV3Ci8vIEBpbmNsdWRlICAgICBodHRwOi8vc2VydmVyZmF1bHQuY29tL3Jldmlldy8KLy8gQGluY2x1ZGUgICAgIGh0dHA6Ly9zdXBlcnVzZXIuY29tL3JldmlldwovLyBAaW5jbHVkZSAgICAgaHR0cDovL3N1cGVydXNlci5jb20vcmV2aWV3LwovLyBAaW5jbHVkZSAgICAgaHR0cDovL2Fza3VidW50dS5jb20vcmV2aWV3Ci8vIEBpbmNsdWRlICAgICBodHRwOi8vYXNrdWJ1bnR1LmNvbS9yZXZpZXcvCi8vIEB2ZXJzaW9uICAgICAxLjEKLy8gQGdyYW50ICAgICAgIAovLyA9PS9Vc2VyU2NyaXB0PT0KCnZhciBSU19yZXZpZXdzX2F2YWlsID0gMDsKCmZ1bmN0aW9uIFJTX3BhcnNlSW50KHN0cmluZykgewogICAgdmFyIGdvdF9kZWNpbWFsX3BvaW50ID0gZmFsc2U7CiAgICB2YXIgZGl2aWRlciA9IDEwOwogICAgdmFyIHJlc3VsdCA9IDA7CiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZy5sZW5ndGg7IGkrKykgewogICAgICAgIHZhciBjaGFyID0gc3RyaW5nLnN1YnN0cmluZyhpLGkrMSk7CiAgICAgICAgaWYgKGNoYXIgPj0gJzAnICYmIGNoYXIgPD0gJzknKSB7CiAgICAgICAgICAgIGlmICghZ290X2RlY2ltYWxfcG9pbnQpIHsKICAgICAgICAgICAgICAgIHJlc3VsdCAqPSAxMDsKICAgICAgICAgICAgICAgIHJlc3VsdCArPSBwYXJzZUludChjaGFyKTsKICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICAgIHJlc3VsdCArPSBwYXJzZUludChjaGFyKSAvIGRpdmlkZXI7CiAgICAgICAgICAgICAgICBkaXZpZGVyICo9IDEwOwogICAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIGlmIChjaGFyID09ICcsJykgewogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiAtMTsKICAgICAgICB9CiAgICB9CiAgICByZXR1cm4gcmVzdWx0Owp9CgpmdW5jdGlvbiBSU19oYXNDbGFzcyhlbGVtZW50LCBjbHMpIHsKICAgIHJldHVybiAoJyAnICsgZWxlbWVudC5jbGFzc05hbWUgKyAnICcpLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA+IC0xOwp9Cgp2YXIgUlNfbnVtYmVycyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoImRhc2hib2FyZC1udW0iKTsKZm9yICh2YXIgUlNfaSA9IFJTX251bWJlcnMubGVuZ3RoIC0gMTsgUlNfaSA+PSAwOyBSU19pLS0pIHsKICAgIGlmICghUlNfaGFzQ2xhc3MoUlNfbnVtYmVyc1tSU19pXS5wYXJlbnROb2RlLCAiZGFzaGJvYXJkLWZhZGVkIikpIHsKICAgICAgICB2YXIgaW50ID0gUlNfcGFyc2VJbnQoUlNfbnVtYmVyc1tSU19pXS5nZXRBdHRyaWJ1dGUoJ3RpdGxlJykpOwogICAgICAgIFJTX3Jldmlld3NfYXZhaWwgKz0gaW50OwogICAgfQp9CgppZiAoUlNfcmV2aWV3c19hdmFpbCkgewogICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICBkb2N1bWVudC50aXRsZSA9ICIoIiArIFJTX3Jldmlld3NfYXZhaWwgKyAiKSAiICsgZG9jdW1lbnQudGl0bGU7CiAgICB9LCAzMDApOwp9IGVsc2UgewogICAgd2luZG93LnNldFRpbWVvdXQoZnVuY3Rpb24oKXsKICAgICAgICB3aW5kb3cubG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb247CiAgICB9LCAxNTAwMCk7Cn0="}]}